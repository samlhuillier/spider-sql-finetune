[
    {
        "question": "How many heads of the departments are older than 56 ?",
        "context": "CREATE TABLE head (age INTEGER)",
        "answer": "SELECT count(*) FROM head WHERE age  >  56",
        "db_id": "department_management"
    },
    {
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "context": "CREATE TABLE head (name VARCHAR, born_state VARCHAR, age VARCHAR)",
        "answer": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
        "db_id": "department_management"
    },
    {
        "question": "List the creation year, name and budget of each department.",
        "context": "CREATE TABLE department (creation VARCHAR, name VARCHAR, budget_in_billions VARCHAR)",
        "answer": "SELECT creation ,  name ,  budget_in_billions FROM department",
        "db_id": "department_management"
    },
    {
        "question": "What are the maximum and minimum budget of the departments?",
        "context": "CREATE TABLE department (budget_in_billions INTEGER)",
        "answer": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
        "db_id": "department_management"
    },
    {
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "context": "CREATE TABLE department (num_employees INTEGER, ranking INTEGER)",
        "answer": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
        "db_id": "department_management"
    },
    {
        "question": "What are the names of the heads who are born outside the California state?",
        "context": "CREATE TABLE head (name VARCHAR, born_state VARCHAR)",
        "answer": "SELECT name FROM head WHERE born_state != 'California'",
        "db_id": "department_management"
    },
    {
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "context": "CREATE TABLE department (creation VARCHAR, department_id VARCHAR); CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (head_id VARCHAR, born_state VARCHAR)",
        "answer": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "db_id": "department_management"
    },
    {
        "question": "What are the names of the states where at least 3 heads were born?",
        "context": "CREATE TABLE head (born_state VARCHAR)",
        "answer": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
        "db_id": "department_management"
    },
    {
        "question": "In which year were most departments established?",
        "context": "CREATE TABLE department (creation VARCHAR)",
        "answer": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "db_id": "department_management"
    },
    {
        "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "context": "CREATE TABLE management (department_id VARCHAR, temporary_acting VARCHAR); CREATE TABLE department (name VARCHAR, num_employees VARCHAR, department_id VARCHAR)",
        "answer": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'",
        "db_id": "department_management"
    },
    {
        "question": "How many acting statuses are there?",
        "context": "CREATE TABLE management (temporary_acting VARCHAR)",
        "answer": "SELECT count(DISTINCT temporary_acting) FROM management",
        "db_id": "department_management"
    },
    {
        "question": "How many departments are led by heads who are not mentioned?",
        "context": "CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR)",
        "answer": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
        "db_id": "department_management"
    },
    {
        "question": "What are the distinct ages of the heads who are acting?",
        "context": "CREATE TABLE head (age VARCHAR, head_id VARCHAR); CREATE TABLE management (head_id VARCHAR, temporary_acting VARCHAR)",
        "answer": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "db_id": "department_management"
    },
    {
        "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "context": "CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (born_state VARCHAR, head_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)",
        "answer": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
        "db_id": "department_management"
    },
    {
        "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "context": "CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)",
        "answer": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
        "db_id": "department_management"
    },
    {
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "context": "CREATE TABLE head (head_id VARCHAR, name VARCHAR)",
        "answer": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",
        "db_id": "department_management"
    },
    {
        "question": "How many farms are there?",
        "context": "CREATE TABLE farm (Id VARCHAR)",
        "answer": "SELECT count(*) FROM farm",
        "db_id": "farm"
    },
    {
        "question": "List the total number of horses on farms in ascending order.",
        "context": "CREATE TABLE farm (Total_Horses VARCHAR)",
        "answer": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "db_id": "farm"
    },
    {
        "question": "What are the hosts of competitions whose theme is not \"Aliens\"?",
        "context": "CREATE TABLE farm_competition (Hosts VARCHAR, Theme VARCHAR)",
        "answer": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
        "db_id": "farm"
    },
    {
        "question": "What are the themes of farm competitions sorted by year in ascending order?",
        "context": "CREATE TABLE farm_competition (Theme VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
        "db_id": "farm"
    },
    {
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "context": "CREATE TABLE farm (Working_Horses INTEGER, Total_Horses INTEGER)",
        "answer": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "db_id": "farm"
    },
    {
        "question": "What are the maximum and minimum number of cows across all farms.",
        "context": "CREATE TABLE farm (Cows INTEGER)",
        "answer": "SELECT max(Cows) ,  min(Cows) FROM farm",
        "db_id": "farm"
    },
    {
        "question": "How many different statuses do cities have?",
        "context": "CREATE TABLE city (Status VARCHAR)",
        "answer": "SELECT count(DISTINCT Status) FROM city",
        "db_id": "farm"
    },
    {
        "question": "List official names of cities in descending order of population.",
        "context": "CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)",
        "answer": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "db_id": "farm"
    },
    {
        "question": "List the official name and status of the city with the largest population.",
        "context": "CREATE TABLE city (Official_Name VARCHAR, Status VARCHAR, Population VARCHAR)",
        "answer": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
        "db_id": "farm"
    },
    {
        "question": "Show the years and the official names of the host cities of competitions.",
        "context": "CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Year VARCHAR, Host_city_ID VARCHAR)",
        "answer": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
        "db_id": "farm"
    },
    {
        "question": "Show the official names of the cities that have hosted more than one competition.",
        "context": "CREATE TABLE farm_competition (Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR)",
        "answer": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
        "db_id": "farm"
    },
    {
        "question": "Show the status of the city that has hosted the greatest number of competitions.",
        "context": "CREATE TABLE city (Status VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Host_city_ID VARCHAR)",
        "answer": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "farm"
    },
    {
        "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
        "context": "CREATE TABLE city (City_ID VARCHAR, Population INTEGER); CREATE TABLE farm_competition (Theme VARCHAR, Host_city_ID VARCHAR)",
        "answer": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
        "db_id": "farm"
    },
    {
        "question": "Please show the different statuses of cities and the average population of cities with each status.",
        "context": "CREATE TABLE city (Status VARCHAR, Population INTEGER)",
        "answer": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "db_id": "farm"
    },
    {
        "question": "Please show the different statuses, ordered by the number of cities that have each.",
        "context": "CREATE TABLE city (Status VARCHAR)",
        "answer": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "db_id": "farm"
    },
    {
        "question": "List the most common type of Status across cities.",
        "context": "CREATE TABLE city (Status VARCHAR)",
        "answer": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "farm"
    },
    {
        "question": "List the official names of cities that have not held any competition.",
        "context": "CREATE TABLE farm_competition (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR)",
        "answer": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
        "db_id": "farm"
    },
    {
        "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
        "context": "CREATE TABLE city (Status VARCHAR, Population INTEGER)",
        "answer": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
        "db_id": "farm"
    },
    {
        "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
        "context": "CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)",
        "answer": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
        "db_id": "farm"
    },
    {
        "question": "Show the census ranking of cities whose status are not \"Village\".",
        "context": "CREATE TABLE city (Census_Ranking VARCHAR, Status VARCHAR)",
        "answer": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
        "db_id": "farm"
    },
    {
        "question": "which course has most number of registered students?",
        "context": "CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_Id VARCHAR)",
        "answer": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_assessment"
    },
    {
        "question": "what is id of students who registered some courses but the least number of courses in these students?",
        "context": "CREATE TABLE student_course_registrations (student_id VARCHAR)",
        "answer": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "db_id": "student_assessment"
    },
    {
        "question": "what are the first name and last name of all candidates?",
        "context": "CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (first_name VARCHAR, last_name VARCHAR, person_id VARCHAR)",
        "answer": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "db_id": "student_assessment"
    },
    {
        "question": "List the id of students who never attends courses?",
        "context": "CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE students (student_id VARCHAR)",
        "answer": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "db_id": "student_assessment"
    },
    {
        "question": "List the id of students who attended some courses?",
        "context": "CREATE TABLE student_course_attendance (student_id VARCHAR)",
        "answer": "SELECT student_id FROM student_course_attendance",
        "db_id": "student_assessment"
    },
    {
        "question": "What are the ids of all students for courses and what are the names of those courses?",
        "context": "CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR)",
        "answer": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
        "db_id": "student_assessment"
    },
    {
        "question": "What is detail of the student who most recently registered course?",
        "context": "CREATE TABLE student_course_registrations (student_id VARCHAR, registration_date VARCHAR); CREATE TABLE students (student_details VARCHAR, student_id VARCHAR)",
        "answer": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
        "db_id": "student_assessment"
    },
    {
        "question": "How many students attend course English?",
        "context": "CREATE TABLE student_course_attendance (course_id VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)",
        "answer": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "db_id": "student_assessment"
    },
    {
        "question": "How many courses do the student whose id is 171 attend?",
        "context": "CREATE TABLE courses (course_id VARCHAR); CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR)",
        "answer": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
        "db_id": "student_assessment"
    },
    {
        "question": "Find id of the candidate whose email is stanley.monahan@example.org?",
        "context": "CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (person_id VARCHAR, email_address VARCHAR)",
        "answer": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "db_id": "student_assessment"
    },
    {
        "question": "Find id of the candidate who most recently accessed the course?",
        "context": "CREATE TABLE candidate_assessments (candidate_id VARCHAR, assessment_date VARCHAR)",
        "answer": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "db_id": "student_assessment"
    },
    {
        "question": "What is detail of the student who registered the most number of courses?",
        "context": "CREATE TABLE students (student_details VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)",
        "answer": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_assessment"
    },
    {
        "question": "List the id of students who registered some courses and the number of their registered courses?",
        "context": "CREATE TABLE students (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)",
        "answer": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "db_id": "student_assessment"
    },
    {
        "question": "How many registed students do each course have? List course name and the number of their registered students?",
        "context": "CREATE TABLE students (student_id VARCHAR); CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)",
        "answer": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
        "db_id": "student_assessment"
    },
    {
        "question": "Find id of candidates whose assessment code is \"Pass\"?",
        "context": "CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)",
        "answer": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
        "db_id": "student_assessment"
    },
    {
        "question": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?",
        "context": "CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (cell_mobile_number VARCHAR, person_id VARCHAR); CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)",
        "answer": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "db_id": "student_assessment"
    },
    {
        "question": "What are the id of students who registered course 301?",
        "context": "CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR)",
        "answer": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "db_id": "student_assessment"
    },
    {
        "question": "What is the id of the student who most recently registered course 301?",
        "context": "CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR)",
        "answer": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "db_id": "student_assessment"
    },
    {
        "question": "Find distinct cities of addresses of people?",
        "context": "CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "db_id": "student_assessment"
    },
    {
        "question": "Find distinct cities of address of students?",
        "context": "CREATE TABLE students (student_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR, person_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "db_id": "student_assessment"
    },
    {
        "question": "List the names of courses in alphabetical order?",
        "context": "CREATE TABLE courses (course_name VARCHAR)",
        "answer": "SELECT course_name FROM courses ORDER BY course_name",
        "db_id": "student_assessment"
    },
    {
        "question": "List the first names of people in alphabetical order?",
        "context": "CREATE TABLE people (first_name VARCHAR)",
        "answer": "SELECT first_name FROM people ORDER BY first_name",
        "db_id": "student_assessment"
    },
    {
        "question": "What are the id of students who registered courses or attended courses?",
        "context": "CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)",
        "answer": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "db_id": "student_assessment"
    },
    {
        "question": "Find the id of courses which are registered or attended by student whose id is 121?",
        "context": "CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)",
        "answer": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "db_id": "student_assessment"
    },
    {
        "question": "What are all info of students who registered courses but not attended courses?",
        "context": "CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)",
        "answer": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "db_id": "student_assessment"
    },
    {
        "question": "List the id of students who registered course statistics in the order of registration date.",
        "context": "CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR, registration_date VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)",
        "answer": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "db_id": "student_assessment"
    },
    {
        "question": "List the id of students who attended  statistics courses in the order of attendance date.",
        "context": "CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)",
        "answer": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
        "db_id": "student_assessment"
    },
    {
        "question": "Give me the dates when the max temperature was higher than 85.",
        "context": "CREATE TABLE weather (date VARCHAR, max_temperature_f INTEGER)",
        "answer": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "db_id": "bike_1"
    },
    {
        "question": "What are the names of stations that have latitude lower than 37.5?",
        "context": "CREATE TABLE station (name VARCHAR, lat INTEGER)",
        "answer": "SELECT name FROM station WHERE lat  <  37.5",
        "db_id": "bike_1"
    },
    {
        "question": "For each city, return the highest latitude among its stations.",
        "context": "CREATE TABLE station (city VARCHAR, lat INTEGER)",
        "answer": "SELECT city ,  max(lat) FROM station GROUP BY city",
        "db_id": "bike_1"
    },
    {
        "question": "Give me the start station and end station for the trips with the three oldest id.",
        "context": "CREATE TABLE trip (start_station_name VARCHAR, end_station_name VARCHAR, id VARCHAR)",
        "answer": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
        "db_id": "bike_1"
    },
    {
        "question": "What is the average latitude and longitude of stations located in San Jose city?",
        "context": "CREATE TABLE station (lat INTEGER, long INTEGER, city VARCHAR)",
        "answer": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "db_id": "bike_1"
    },
    {
        "question": "What is the id of the trip that has the shortest duration?",
        "context": "CREATE TABLE trip (id VARCHAR, duration VARCHAR)",
        "answer": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "db_id": "bike_1"
    },
    {
        "question": "What is the total and maximum duration of trips with bike id 636?",
        "context": "CREATE TABLE trip (duration INTEGER, bike_id VARCHAR)",
        "answer": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
        "db_id": "bike_1"
    },
    {
        "question": "For each zip code, return the average mean temperature of August there.",
        "context": "CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER, date VARCHAR)",
        "answer": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "db_id": "bike_1"
    },
    {
        "question": "From the trip record, find the number of unique bikes.",
        "context": "CREATE TABLE trip (bike_id VARCHAR)",
        "answer": "SELECT count(DISTINCT bike_id) FROM trip",
        "db_id": "bike_1"
    },
    {
        "question": "What is the number of distinct cities the stations are located at?",
        "context": "CREATE TABLE station (city VARCHAR)",
        "answer": "SELECT count(DISTINCT city) FROM station",
        "db_id": "bike_1"
    },
    {
        "question": "How many stations does Mountain View city has?",
        "context": "CREATE TABLE station (city VARCHAR)",
        "answer": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "db_id": "bike_1"
    },
    {
        "question": "Return the unique name for stations that have ever had 7 bikes available.",
        "context": "CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available VARCHAR)",
        "answer": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "db_id": "bike_1"
    },
    {
        "question": "Which start station had the most trips starting from August? Give me the name and id of the station.",
        "context": "CREATE TABLE trip (start_station_name VARCHAR, start_station_id VARCHAR, start_date VARCHAR)",
        "answer": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "bike_1"
    },
    {
        "question": "Which bike traveled the most often in zip code 94002?",
        "context": "CREATE TABLE trip (bike_id VARCHAR, zip_code VARCHAR)",
        "answer": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "bike_1"
    },
    {
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "context": "CREATE TABLE weather (mean_humidity VARCHAR, mean_visibility_miles VARCHAR)",
        "answer": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "db_id": "bike_1"
    },
    {
        "question": "What is the latitude, longitude, city of the station from which the shortest trip started?",
        "context": "CREATE TABLE trip (start_station_id VARCHAR, duration VARCHAR); CREATE TABLE station (lat VARCHAR, long VARCHAR, city VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "db_id": "bike_1"
    },
    {
        "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "context": "CREATE TABLE status (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER)",
        "answer": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
        "db_id": "bike_1"
    },
    {
        "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
        "context": "CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE station (name VARCHAR, id VARCHAR, installation_date VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)",
        "answer": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
        "db_id": "bike_1"
    },
    {
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "context": "CREATE TABLE weather (cloud_cover VARCHAR, zip_code VARCHAR)",
        "answer": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "db_id": "bike_1"
    },
    {
        "question": "What is the zip code in which the average mean sea level pressure is the lowest?",
        "context": "CREATE TABLE weather (zip_code VARCHAR, mean_sea_level_pressure_inches INTEGER)",
        "answer": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "db_id": "bike_1"
    },
    {
        "question": "What is the average bike availability in stations that are not located in Palo Alto?",
        "context": "CREATE TABLE status (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR); CREATE TABLE station (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR)",
        "answer": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "db_id": "bike_1"
    },
    {
        "question": "What is the average longitude of stations that never had bike availability more than 10?",
        "context": "CREATE TABLE station (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER); CREATE TABLE status (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER)",
        "answer": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "db_id": "bike_1"
    },
    {
        "question": "When and in what zip code did max temperature reach 80?",
        "context": "CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, max_temperature_f VARCHAR)",
        "answer": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "db_id": "bike_1"
    },
    {
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "context": "CREATE TABLE trip (id VARCHAR, zip_code VARCHAR); CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER)",
        "answer": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "db_id": "bike_1"
    },
    {
        "question": "For each zip code, return how many times max wind speed reached 25?",
        "context": "CREATE TABLE weather (zip_code VARCHAR, max_wind_Speed_mph VARCHAR)",
        "answer": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "db_id": "bike_1"
    },
    {
        "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?",
        "context": "CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, min_dew_point_f INTEGER)",
        "answer": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
        "db_id": "bike_1"
    },
    {
        "question": "For each trip, return its ending station's installation date.",
        "context": "CREATE TABLE station (installation_date VARCHAR, id VARCHAR); CREATE TABLE trip (id VARCHAR, end_station_id VARCHAR)",
        "answer": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "db_id": "bike_1"
    },
    {
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "context": "CREATE TABLE trip (id VARCHAR, start_station_id VARCHAR); CREATE TABLE station (id VARCHAR, dock_count VARCHAR)",
        "answer": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "db_id": "bike_1"
    },
    {
        "question": "Count the number of trips that did not end in San Francisco city.",
        "context": "CREATE TABLE trip (end_station_id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR)",
        "answer": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"",
        "db_id": "bike_1"
    },
    {
        "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?",
        "context": "CREATE TABLE weather (date VARCHAR, EVENTS VARCHAR, zip_code VARCHAR)",
        "answer": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "db_id": "bike_1"
    },
    {
        "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
        "context": "CREATE TABLE status (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER)",
        "answer": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "db_id": "bike_1"
    },
    {
        "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "context": "CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR); CREATE TABLE station (name VARCHAR, city VARCHAR, bikes_available INTEGER)",
        "answer": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "db_id": "bike_1"
    },
    {
        "question": "What are the name, latitude, and city of the station with the lowest latitude?",
        "context": "CREATE TABLE station (name VARCHAR, lat VARCHAR, city VARCHAR)",
        "answer": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
        "db_id": "bike_1"
    },
    {
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "context": "CREATE TABLE weather (date VARCHAR, mean_temperature_f VARCHAR, mean_humidity VARCHAR, max_gust_speed_mph VARCHAR)",
        "answer": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "db_id": "bike_1"
    },
    {
        "question": "List the name and the number of stations for all the cities that have at least 15 stations.",
        "context": "CREATE TABLE station (city VARCHAR)",
        "answer": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
        "db_id": "bike_1"
    },
    {
        "question": "Find the ids and names of stations from which at least 200 trips started.",
        "context": "CREATE TABLE trip (start_station_id VARCHAR, start_station_name VARCHAR)",
        "answer": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "db_id": "bike_1"
    },
    {
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "context": "CREATE TABLE weather (zip_code VARCHAR, mean_visibility_miles INTEGER)",
        "answer": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "db_id": "bike_1"
    },
    {
        "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "context": "CREATE TABLE station (city VARCHAR, lat INTEGER)",
        "answer": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "db_id": "bike_1"
    },
    {
        "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
        "context": "CREATE TABLE weather (date VARCHAR, cloud_cover VARCHAR)",
        "answer": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "db_id": "bike_1"
    },
    {
        "question": "What are the ids and durations of the trips with the top 3 durations?",
        "context": "CREATE TABLE trip (id VARCHAR, duration VARCHAR)",
        "answer": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
        "db_id": "bike_1"
    },
    {
        "question": "For each station, return its longitude and the average duration of trips that started from the station.",
        "context": "CREATE TABLE station (name VARCHAR, long VARCHAR, id VARCHAR); CREATE TABLE trip (duration INTEGER, start_station_id VARCHAR)",
        "answer": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
        "db_id": "bike_1"
    },
    {
        "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
        "context": "CREATE TABLE trip (duration INTEGER, end_station_id VARCHAR); CREATE TABLE station (name VARCHAR, lat VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "db_id": "bike_1"
    },
    {
        "question": "List all the distinct stations from which a trip of duration below 100 started.",
        "context": "CREATE TABLE trip (start_station_name VARCHAR, duration INTEGER)",
        "answer": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
        "db_id": "bike_1"
    },
    {
        "question": "Find all the zip codes in which the max dew point have never reached 70.",
        "context": "CREATE TABLE weather (zip_code VARCHAR, max_dew_point_f VARCHAR)",
        "answer": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "db_id": "bike_1"
    },
    {
        "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "context": "CREATE TABLE trip (id VARCHAR, duration INTEGER, zip_code VARCHAR)",
        "answer": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "db_id": "bike_1"
    },
    {
        "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
        "context": "CREATE TABLE weather (date VARCHAR, mean_sea_level_pressure_inches INTEGER)",
        "answer": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "db_id": "bike_1"
    },
    {
        "question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.",
        "context": "CREATE TABLE weather (date VARCHAR, max_temperature_f VARCHAR, min_temperature_f VARCHAR)",
        "answer": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "db_id": "bike_1"
    },
    {
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "context": "CREATE TABLE station (id VARCHAR, name VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)",
        "answer": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "db_id": "bike_1"
    },
    {
        "question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.",
        "context": "CREATE TABLE weather (zip_code VARCHAR, mean_humidity INTEGER); CREATE TABLE trip (zip_code VARCHAR, mean_humidity INTEGER)",
        "answer": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "db_id": "bike_1"
    },
    {
        "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
        "context": "CREATE TABLE trip (name VARCHAR, end_station_name VARCHAR, city VARCHAR); CREATE TABLE station (name VARCHAR, end_station_name VARCHAR, city VARCHAR)",
        "answer": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
        "db_id": "bike_1"
    },
    {
        "question": "How many trips started from Mountain View city and ended at Palo Alto city?",
        "context": "CREATE TABLE station (city VARCHAR, id VARCHAR); CREATE TABLE trip (end_station_id VARCHAR, id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR); CREATE TABLE trip (start_station_id VARCHAR, id VARCHAR)",
        "answer": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "db_id": "bike_1"
    },
    {
        "question": "What is the average latitude and longitude of the starting points of all trips?",
        "context": "CREATE TABLE trip (start_station_id VARCHAR); CREATE TABLE station (lat INTEGER, long INTEGER, id VARCHAR)",
        "answer": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
        "db_id": "bike_1"
    },
    {
        "question": "How many books are there?",
        "context": "CREATE TABLE book (Id VARCHAR)",
        "answer": "SELECT count(*) FROM book",
        "db_id": "book_2"
    },
    {
        "question": "List the writers of the books in ascending alphabetical order.",
        "context": "CREATE TABLE book (Writer VARCHAR)",
        "answer": "SELECT Writer FROM book ORDER BY Writer ASC",
        "db_id": "book_2"
    },
    {
        "question": "List the titles of the books in ascending order of issues.",
        "context": "CREATE TABLE book (Title VARCHAR, Issues VARCHAR)",
        "answer": "SELECT Title FROM book ORDER BY Issues ASC",
        "db_id": "book_2"
    },
    {
        "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?",
        "context": "CREATE TABLE book (Title VARCHAR, Writer VARCHAR)",
        "answer": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"",
        "db_id": "book_2"
    },
    {
        "question": "What are the title and issues of the books?",
        "context": "CREATE TABLE book (Title VARCHAR, Issues VARCHAR)",
        "answer": "SELECT Title ,  Issues FROM book",
        "db_id": "book_2"
    },
    {
        "question": "What are the dates of publications in descending order of price?",
        "context": "CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)",
        "answer": "SELECT Publication_Date FROM publication ORDER BY Price DESC",
        "db_id": "book_2"
    },
    {
        "question": "What are the distinct publishers of publications with price higher than 5000000?",
        "context": "CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)",
        "answer": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000",
        "db_id": "book_2"
    },
    {
        "question": "List the publisher of the publication with the highest price.",
        "context": "CREATE TABLE publication (Publisher VARCHAR, Price VARCHAR)",
        "answer": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
        "db_id": "book_2"
    },
    {
        "question": "List the publication dates of publications with 3 lowest prices.",
        "context": "CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)",
        "answer": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
        "db_id": "book_2"
    },
    {
        "question": "Show the title and publication dates of books.",
        "context": "CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Publication_Date VARCHAR, Book_ID VARCHAR)",
        "answer": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
        "db_id": "book_2"
    },
    {
        "question": "Show writers who have published a book with price more than 4000000.",
        "context": "CREATE TABLE publication (Book_ID VARCHAR, Price INTEGER); CREATE TABLE book (Writer VARCHAR, Book_ID VARCHAR)",
        "answer": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000",
        "db_id": "book_2"
    },
    {
        "question": "Show the titles of books in descending order of publication price.",
        "context": "CREATE TABLE publication (Book_ID VARCHAR, Price VARCHAR); CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR)",
        "answer": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC",
        "db_id": "book_2"
    },
    {
        "question": "Show publishers that have more than one publication.",
        "context": "CREATE TABLE publication (Publisher VARCHAR)",
        "answer": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
        "db_id": "book_2"
    },
    {
        "question": "Show different publishers together with the number of publications they have.",
        "context": "CREATE TABLE publication (Publisher VARCHAR)",
        "answer": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
        "db_id": "book_2"
    },
    {
        "question": "Please show the most common publication date.",
        "context": "CREATE TABLE publication (Publication_Date VARCHAR)",
        "answer": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "book_2"
    },
    {
        "question": "List the writers who have written more than one book.",
        "context": "CREATE TABLE book (Writer VARCHAR)",
        "answer": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
        "db_id": "book_2"
    },
    {
        "question": "List the titles of books that are not published.",
        "context": "CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Title VARCHAR, Book_ID VARCHAR)",
        "answer": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
        "db_id": "book_2"
    },
    {
        "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.",
        "context": "CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)",
        "answer": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000",
        "db_id": "book_2"
    },
    {
        "question": "What is the number of distinct publication dates?",
        "context": "CREATE TABLE publication (Publication_Date VARCHAR)",
        "answer": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
        "db_id": "book_2"
    },
    {
        "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
        "context": "CREATE TABLE publication (Price VARCHAR, Publisher VARCHAR)",
        "answer": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
        "db_id": "book_2"
    },
    {
        "question": "How many actors are there?",
        "context": "CREATE TABLE actor (Id VARCHAR)",
        "answer": "SELECT count(*) FROM actor",
        "db_id": "musical"
    },
    {
        "question": "List the name of actors in ascending alphabetical order.",
        "context": "CREATE TABLE actor (Name VARCHAR)",
        "answer": "SELECT Name FROM actor ORDER BY Name ASC",
        "db_id": "musical"
    },
    {
        "question": "What are the characters and duration of actors?",
        "context": "CREATE TABLE actor (Character VARCHAR, Duration VARCHAR)",
        "answer": "SELECT Character ,  Duration FROM actor",
        "db_id": "musical"
    },
    {
        "question": "List the name of actors whose age is not 20.",
        "context": "CREATE TABLE actor (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM actor WHERE Age != 20",
        "db_id": "musical"
    },
    {
        "question": "What are the characters of actors in descending order of age?",
        "context": "CREATE TABLE actor (Character VARCHAR, age VARCHAR)",
        "answer": "SELECT Character FROM actor ORDER BY age DESC",
        "db_id": "musical"
    },
    {
        "question": "What is the duration of the oldest actor?",
        "context": "CREATE TABLE actor (Duration VARCHAR, Age VARCHAR)",
        "answer": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "db_id": "musical"
    },
    {
        "question": "What are the names of musicals with nominee \"Bob Fosse\"?",
        "context": "CREATE TABLE musical (Name VARCHAR, Nominee VARCHAR)",
        "answer": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
        "db_id": "musical"
    },
    {
        "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
        "context": "CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)",
        "answer": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
        "db_id": "musical"
    },
    {
        "question": "Show names of actors and names of musicals they are in.",
        "context": "CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)",
        "answer": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
        "db_id": "musical"
    },
    {
        "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
        "context": "CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Musical_ID VARCHAR, Name VARCHAR)",
        "answer": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"",
        "db_id": "musical"
    },
    {
        "question": "Show names of actors in descending order of the year their musical is awarded.",
        "context": "CREATE TABLE musical (Musical_ID VARCHAR, Year VARCHAR); CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC",
        "db_id": "musical"
    },
    {
        "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "context": "CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "db_id": "musical"
    },
    {
        "question": "Show names of musicals which have at least three actors.",
        "context": "CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
        "db_id": "musical"
    },
    {
        "question": "Show different nominees and the number of musicals they have been nominated.",
        "context": "CREATE TABLE musical (Nominee VARCHAR)",
        "answer": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
        "db_id": "musical"
    },
    {
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "context": "CREATE TABLE musical (Nominee VARCHAR)",
        "answer": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "musical"
    },
    {
        "question": "List the most common result of the musicals.",
        "context": "CREATE TABLE musical (RESULT VARCHAR)",
        "answer": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "musical"
    },
    {
        "question": "List the nominees that have been nominated more than two musicals.",
        "context": "CREATE TABLE musical (Nominee VARCHAR)",
        "answer": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "db_id": "musical"
    },
    {
        "question": "List the name of musicals that do not have actors.",
        "context": "CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)",
        "answer": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "db_id": "musical"
    },
    {
        "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "context": "CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)",
        "answer": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "db_id": "musical"
    },
    {
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "context": "CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)",
        "answer": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "db_id": "musical"
    },
    {
        "question": "Find the emails of the user named \"Mary\".",
        "context": "CREATE TABLE user_profiles (email VARCHAR, name VARCHAR)",
        "answer": "SELECT email FROM user_profiles WHERE name  =  'Mary'",
        "db_id": "twitter_1"
    },
    {
        "question": "What is the partition id of the user named \"Iron Man\".",
        "context": "CREATE TABLE user_profiles (partitionid VARCHAR, name VARCHAR)",
        "answer": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'",
        "db_id": "twitter_1"
    },
    {
        "question": "How many users are there?",
        "context": "CREATE TABLE user_profiles (Id VARCHAR)",
        "answer": "SELECT count(*) FROM user_profiles",
        "db_id": "twitter_1"
    },
    {
        "question": "How many followers does each user have?",
        "context": "CREATE TABLE follows (Id VARCHAR)",
        "answer": "SELECT count(*) FROM follows",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the number of followers for each user.",
        "context": "CREATE TABLE follows (f1 VARCHAR)",
        "answer": "SELECT count(*) FROM follows GROUP BY f1",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the number of tweets in record.",
        "context": "CREATE TABLE tweets (Id VARCHAR)",
        "answer": "SELECT count(*) FROM tweets",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the number of users who posted some tweets.",
        "context": "CREATE TABLE tweets (UID VARCHAR)",
        "answer": "SELECT count(DISTINCT UID) FROM tweets",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)",
        "answer": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)",
        "answer": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
        "db_id": "twitter_1"
    },
    {
        "question": "Return the text of tweets about the topic 'intern'.",
        "context": "CREATE TABLE tweets (text VARCHAR)",
        "answer": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers INTEGER)",
        "answer": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".",
        "context": "CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the name and email for the users who have more than one follower.",
        "context": "CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the names of users who have more than one tweet.",
        "context": "CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the id of users who are followed by Mary and Susan.",
        "context": "CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)",
        "answer": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the id of users who are followed by Mary or Susan.",
        "context": "CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)",
        "answer": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the name of the user who has the largest number of followers.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)",
        "answer": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the name and email of the user followed by the least number of people.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers VARCHAR)",
        "answer": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "db_id": "twitter_1"
    },
    {
        "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)",
        "answer": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC",
        "db_id": "twitter_1"
    },
    {
        "question": "List the names of 5 users followed by the largest number of other users.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)",
        "answer": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5",
        "db_id": "twitter_1"
    },
    {
        "question": "List the text of all tweets in the order of date.",
        "context": "CREATE TABLE tweets (text VARCHAR, createdate VARCHAR)",
        "answer": "SELECT text FROM tweets ORDER BY createdate",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "context": "CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, partitionid VARCHAR, uid VARCHAR); CREATE TABLE tweets (uid VARCHAR)",
        "answer": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "context": "CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)",
        "answer": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the average number of followers for the users who do not have any tweet.",
        "context": "CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)",
        "answer": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the average number of followers for the users who had some tweets.",
        "context": "CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)",
        "answer": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the maximum and total number of followers of all users.",
        "context": "CREATE TABLE user_profiles (followers INTEGER)",
        "answer": "SELECT max(followers) ,  sum(followers) FROM user_profiles",
        "db_id": "twitter_1"
    },
    {
        "question": "Find the names of all the catalog entries.",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR)",
        "answer": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "db_id": "product_catalog"
    },
    {
        "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "context": "CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR)",
        "answer": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "db_id": "product_catalog"
    },
    {
        "question": "What is the attribute data type of the attribute with name \"Green\"?",
        "context": "CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR, attribute_name VARCHAR)",
        "answer": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
        "db_id": "product_catalog"
    },
    {
        "question": "Find the name and level of catalog structure with level between 5 and 10.",
        "context": "CREATE TABLE Catalog_Structure (catalog_level_name VARCHAR, catalog_level_number INTEGER)",
        "answer": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "db_id": "product_catalog"
    },
    {
        "question": "Find all the catalog publishers whose name contains \"Murray\"",
        "context": "CREATE TABLE catalogs (catalog_publisher VARCHAR)",
        "answer": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "db_id": "product_catalog"
    },
    {
        "question": "Which catalog publisher has published the most catalogs?",
        "context": "CREATE TABLE catalogs (catalog_publisher VARCHAR)",
        "answer": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
        "db_id": "product_catalog"
    },
    {
        "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "context": "CREATE TABLE catalogs (catalog_name VARCHAR, date_of_publication VARCHAR, catalog_id VARCHAR); CREATE TABLE catalog_structure (catalog_id VARCHAR)",
        "answer": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "db_id": "product_catalog"
    },
    {
        "question": "What are the entry names of catalog with the attribute possessed by most entries.",
        "context": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value VARCHAR)",
        "answer": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "db_id": "product_catalog"
    },
    {
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, price_in_dollars VARCHAR)",
        "answer": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "db_id": "product_catalog"
    },
    {
        "question": "What is the level name of the cheapest catalog (in USD)?",
        "context": "CREATE TABLE catalog_structure (catalog_level_name VARCHAR, catalog_level_number VARCHAR); CREATE TABLE catalog_contents (catalog_level_number VARCHAR, price_in_dollars VARCHAR)",
        "answer": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "db_id": "product_catalog"
    },
    {
        "question": "What are the average and minimum price (in Euro) of all products?",
        "context": "CREATE TABLE catalog_contents (price_in_euros INTEGER)",
        "answer": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "db_id": "product_catalog"
    },
    {
        "question": "What is the product with the highest height? Give me the catalog entry name.",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, height VARCHAR)",
        "answer": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "db_id": "product_catalog"
    },
    {
        "question": "Find the name of the product that has the smallest capacity.",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, capacity VARCHAR)",
        "answer": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "db_id": "product_catalog"
    },
    {
        "question": "Find the names of all the products whose stock number starts with \"2\".",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, product_stock_number VARCHAR)",
        "answer": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "db_id": "product_catalog"
    },
    {
        "question": "Find the names of catalog entries with level number 8.",
        "context": "CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, catalog_level_number VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR)",
        "answer": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "db_id": "product_catalog"
    },
    {
        "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, LENGTH VARCHAR, width VARCHAR)",
        "answer": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "db_id": "product_catalog"
    },
    {
        "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
        "context": "CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Attribute_Definitions (attribute_name VARCHAR, attribute_id VARCHAR)",
        "answer": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "db_id": "product_catalog"
    },
    {
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "context": "CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, capacity VARCHAR, price_in_dollars INTEGER)",
        "answer": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "db_id": "product_catalog"
    },
    {
        "question": "Find the dates on which more than one revisions were made.",
        "context": "CREATE TABLE Catalogs (date_of_latest_revision VARCHAR)",
        "answer": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "db_id": "product_catalog"
    },
    {
        "question": "How many products are there in the records?",
        "context": "CREATE TABLE catalog_contents (Id VARCHAR)",
        "answer": "SELECT count(*) FROM catalog_contents",
        "db_id": "product_catalog"
    },
    {
        "question": "Name all the products with next entry ID greater than 8.",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, next_entry_id INTEGER)",
        "answer": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "db_id": "product_catalog"
    },
    {
        "question": "How many aircrafts do we have?",
        "context": "CREATE TABLE Aircraft (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Aircraft",
        "db_id": "flight_1"
    },
    {
        "question": "How many aircrafts exist in the database?",
        "context": "CREATE TABLE aircraft (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Aircraft",
        "db_id": "flight_1"
    },
    {
        "question": "Show name and distance for all aircrafts.",
        "context": "CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)",
        "answer": "SELECT name ,  distance FROM Aircraft",
        "db_id": "flight_1"
    },
    {
        "question": "Show ids for all aircrafts with more than 1000 distance.",
        "context": "CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER)",
        "answer": "SELECT aid FROM Aircraft WHERE distance  >  1000",
        "db_id": "flight_1"
    },
    {
        "question": "How many aircrafts have distance between 1000 and 5000?",
        "context": "CREATE TABLE Aircraft (distance INTEGER)",
        "answer": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
        "db_id": "flight_1"
    },
    {
        "question": "What is the name and distance for aircraft with id 12?",
        "context": "CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR, aid VARCHAR)",
        "answer": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
        "db_id": "flight_1"
    },
    {
        "question": "What is the minimum, average, and maximum distance of all aircrafts.",
        "context": "CREATE TABLE Aircraft (distance INTEGER)",
        "answer": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
        "db_id": "flight_1"
    },
    {
        "question": "Show the id and name of the aircraft with the maximum distance.",
        "context": "CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR, distance VARCHAR)",
        "answer": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "db_id": "flight_1"
    },
    {
        "question": "Show the name of aircrafts with top three lowest distances.",
        "context": "CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)",
        "answer": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all aircrafts with distances more than the average.",
        "context": "CREATE TABLE Aircraft (name VARCHAR, distance INTEGER)",
        "answer": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
        "db_id": "flight_1"
    },
    {
        "question": "How many employees do we have?",
        "context": "CREATE TABLE Employee (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Employee",
        "db_id": "flight_1"
    },
    {
        "question": "What is the number of employees?",
        "context": "CREATE TABLE employee (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Employee",
        "db_id": "flight_1"
    },
    {
        "question": "Show name and salary for all employees sorted by salary.",
        "context": "CREATE TABLE Employee (name VARCHAR, salary VARCHAR)",
        "answer": "SELECT name ,  salary FROM Employee ORDER BY salary",
        "db_id": "flight_1"
    },
    {
        "question": "Show ids for all employees with at least 100000 salary.",
        "context": "CREATE TABLE Employee (eid VARCHAR, salary INTEGER)",
        "answer": "SELECT eid FROM Employee WHERE salary  >  100000",
        "db_id": "flight_1"
    },
    {
        "question": "How many employees have salary between 100000 and 200000?",
        "context": "CREATE TABLE Employee (salary INTEGER)",
        "answer": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
        "db_id": "flight_1"
    },
    {
        "question": "What is the name and salary for employee with id 242518965?",
        "context": "CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)",
        "answer": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965",
        "db_id": "flight_1"
    },
    {
        "question": "What is average and maximum salary of all employees.",
        "context": "CREATE TABLE Employee (salary INTEGER)",
        "answer": "SELECT avg(salary) ,  max(salary) FROM Employee",
        "db_id": "flight_1"
    },
    {
        "question": "Show the id and name of the employee with maximum salary.",
        "context": "CREATE TABLE Employee (eid VARCHAR, name VARCHAR, salary VARCHAR)",
        "answer": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",
        "db_id": "flight_1"
    },
    {
        "question": "Show the name of employees with three lowest salaries.",
        "context": "CREATE TABLE Employee (name VARCHAR, salary VARCHAR)",
        "answer": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all employees with salary more than the average.",
        "context": "CREATE TABLE Employee (name VARCHAR, salary INTEGER)",
        "answer": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
        "db_id": "flight_1"
    },
    {
        "question": "Show the id and salary of Mark Young.",
        "context": "CREATE TABLE Employee (eid VARCHAR, salary VARCHAR, name VARCHAR)",
        "answer": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "db_id": "flight_1"
    },
    {
        "question": "How many flights do we have?",
        "context": "CREATE TABLE Flight (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Flight",
        "db_id": "flight_1"
    },
    {
        "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "context": "CREATE TABLE Flight (flno VARCHAR, origin VARCHAR, destination VARCHAR)",
        "answer": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "db_id": "flight_1"
    },
    {
        "question": "Show all flight number from Los Angeles.",
        "context": "CREATE TABLE Flight (flno VARCHAR, origin VARCHAR)",
        "answer": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "db_id": "flight_1"
    },
    {
        "question": "Show origins of all flights with destination Honolulu.",
        "context": "CREATE TABLE Flight (origin VARCHAR, destination VARCHAR)",
        "answer": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"",
        "db_id": "flight_1"
    },
    {
        "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "context": "CREATE TABLE Flight (departure_date VARCHAR, arrival_date VARCHAR, origin VARCHAR, destination VARCHAR)",
        "answer": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "db_id": "flight_1"
    },
    {
        "question": "Show flight number for all flights with more than 2000 distance.",
        "context": "CREATE TABLE Flight (flno VARCHAR, distance INTEGER)",
        "answer": "SELECT flno FROM Flight WHERE distance  >  2000",
        "db_id": "flight_1"
    },
    {
        "question": "What is the average price for flights from Los Angeles to Honolulu.",
        "context": "CREATE TABLE Flight (price INTEGER, origin VARCHAR, destination VARCHAR)",
        "answer": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "db_id": "flight_1"
    },
    {
        "question": "Show origin and destination for flights with price higher than 300.",
        "context": "CREATE TABLE Flight (origin VARCHAR, destination VARCHAR, price INTEGER)",
        "answer": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
        "db_id": "flight_1"
    },
    {
        "question": "Show the flight number and distance of the flight with maximum price.",
        "context": "CREATE TABLE Flight (flno VARCHAR, distance VARCHAR, price VARCHAR)",
        "answer": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "db_id": "flight_1"
    },
    {
        "question": "Show the flight number of flights with three lowest distances.",
        "context": "CREATE TABLE Flight (flno VARCHAR, distance VARCHAR)",
        "answer": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "db_id": "flight_1"
    },
    {
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "context": "CREATE TABLE Flight (distance INTEGER, price INTEGER, origin VARCHAR)",
        "answer": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "db_id": "flight_1"
    },
    {
        "question": "Show all origins and the number of flights from each origin.",
        "context": "CREATE TABLE Flight (origin VARCHAR)",
        "answer": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "db_id": "flight_1"
    },
    {
        "question": "Show all destinations and the number of flights to each destination.",
        "context": "CREATE TABLE Flight (destination VARCHAR)",
        "answer": "SELECT destination ,  count(*) FROM Flight GROUP BY destination",
        "db_id": "flight_1"
    },
    {
        "question": "Which origin has most number of flights?",
        "context": "CREATE TABLE Flight (origin VARCHAR)",
        "answer": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_1"
    },
    {
        "question": "Which destination has least number of flights?",
        "context": "CREATE TABLE Flight (destination VARCHAR)",
        "answer": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "db_id": "flight_1"
    },
    {
        "question": "What is the aircraft name for the flight with number 99",
        "context": "CREATE TABLE Flight (aid VARCHAR, flno VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)",
        "answer": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "db_id": "flight_1"
    },
    {
        "question": "Show all flight numbers with aircraft Airbus A340-300.",
        "context": "CREATE TABLE Flight (flno VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)",
        "answer": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
        "db_id": "flight_1"
    },
    {
        "question": "Show aircraft names and number of flights for each aircraft.",
        "context": "CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)",
        "answer": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all aircraft with at least two flights.",
        "context": "CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)",
        "answer": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "db_id": "flight_1"
    },
    {
        "question": "How many employees have certificate.",
        "context": "CREATE TABLE Certificate (eid VARCHAR)",
        "answer": "SELECT count(DISTINCT eid) FROM Certificate",
        "db_id": "flight_1"
    },
    {
        "question": "Show ids for all employees who don't have a certificate.",
        "context": "CREATE TABLE Employee (eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR)",
        "answer": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "context": "CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Employee (eid VARCHAR, name VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)",
        "answer": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all employees who have certificate of Boeing 737-800.",
        "context": "CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)",
        "answer": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.",
        "context": "CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)",
        "answer": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"",
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all employees who do not have certificate of Boeing 737-800.",
        "context": "CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Employee (name VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)",
        "answer": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "db_id": "flight_1"
    },
    {
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "context": "CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)",
        "answer": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_1"
    },
    {
        "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "context": "CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR, distance INTEGER)",
        "answer": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "db_id": "flight_1"
    },
    {
        "question": "what is the salary and name of the employee who has the most number of aircraft certificates?",
        "context": "CREATE TABLE Certificate (eid VARCHAR); CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)",
        "answer": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_1"
    },
    {
        "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?",
        "context": "CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)",
        "answer": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_1"
    },
    {
        "question": "How many allergies are there?",
        "context": "CREATE TABLE Allergy_type (allergy VARCHAR)",
        "answer": "SELECT count(DISTINCT allergy) FROM Allergy_type",
        "db_id": "allergy_1"
    },
    {
        "question": "How many different allergy types exist?",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR)",
        "answer": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all allergy types.",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR)",
        "answer": "SELECT DISTINCT allergytype FROM Allergy_type",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all allergies and their types.",
        "context": "CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)",
        "answer": "SELECT allergy ,  allergytype FROM Allergy_type",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all allergies with type food.",
        "context": "CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)",
        "answer": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
        "db_id": "allergy_1"
    },
    {
        "question": "What is the type of allergy Cat?",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)",
        "answer": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"",
        "db_id": "allergy_1"
    },
    {
        "question": "How many allergies have type animal?",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR)",
        "answer": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all allergy types and the number of allergies in each type.",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR)",
        "answer": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype",
        "db_id": "allergy_1"
    },
    {
        "question": "Which allergy type has most number of allergies?",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR)",
        "answer": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
        "db_id": "allergy_1"
    },
    {
        "question": "Which allergy type has least number of allergies?",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR)",
        "answer": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
        "db_id": "allergy_1"
    },
    {
        "question": "How many students are there?",
        "context": "CREATE TABLE Student (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Student",
        "db_id": "allergy_1"
    },
    {
        "question": "What is the total number of students?",
        "context": "CREATE TABLE student (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Student",
        "db_id": "allergy_1"
    },
    {
        "question": "Show first name and last name for all students.",
        "context": "CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR)",
        "answer": "SELECT Fname ,  Lname FROM Student",
        "db_id": "allergy_1"
    },
    {
        "question": "How many different advisors are listed?",
        "context": "CREATE TABLE Student (advisor VARCHAR)",
        "answer": "SELECT count(DISTINCT advisor) FROM Student",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all majors.",
        "context": "CREATE TABLE Student (Major VARCHAR)",
        "answer": "SELECT DISTINCT Major FROM Student",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all cities where students live.",
        "context": "CREATE TABLE Student (city_code VARCHAR)",
        "answer": "SELECT DISTINCT city_code FROM Student",
        "db_id": "allergy_1"
    },
    {
        "question": "Show first name, last name, age for all female students. Their sex is F.",
        "context": "CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Sex VARCHAR)",
        "answer": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
        "db_id": "allergy_1"
    },
    {
        "question": "Show student ids for all male students.",
        "context": "CREATE TABLE Student (StuID VARCHAR, Sex VARCHAR)",
        "answer": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "db_id": "allergy_1"
    },
    {
        "question": "How many students are age 18?",
        "context": "CREATE TABLE Student (age VARCHAR)",
        "answer": "SELECT count(*) FROM Student WHERE age  =  18",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all student ids who are older than 20.",
        "context": "CREATE TABLE Student (StuID VARCHAR, age INTEGER)",
        "answer": "SELECT StuID FROM Student WHERE age  >  20",
        "db_id": "allergy_1"
    },
    {
        "question": "Which city does the student whose last name is \"Kim\" live in?",
        "context": "CREATE TABLE Student (city_code VARCHAR, LName VARCHAR)",
        "answer": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"",
        "db_id": "allergy_1"
    },
    {
        "question": "Who is the advisor of student with ID 1004?",
        "context": "CREATE TABLE Student (Advisor VARCHAR, StuID VARCHAR)",
        "answer": "SELECT Advisor FROM Student WHERE StuID  =  1004",
        "db_id": "allergy_1"
    },
    {
        "question": "How many students live in HKG or CHI?",
        "context": "CREATE TABLE Student (city_code VARCHAR)",
        "answer": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
        "db_id": "allergy_1"
    },
    {
        "question": "Show the minimum, average, and maximum age of all students.",
        "context": "CREATE TABLE Student (age INTEGER)",
        "answer": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
        "db_id": "allergy_1"
    },
    {
        "question": "What is the last name of the youngest student?",
        "context": "CREATE TABLE Student (LName VARCHAR, age INTEGER)",
        "answer": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
        "db_id": "allergy_1"
    },
    {
        "question": "Show the student id of the oldest student.",
        "context": "CREATE TABLE Student (StuID VARCHAR, age INTEGER)",
        "answer": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all majors and corresponding number of students.",
        "context": "CREATE TABLE Student (major VARCHAR)",
        "answer": "SELECT major ,  count(*) FROM Student GROUP BY major",
        "db_id": "allergy_1"
    },
    {
        "question": "Which major has most number of students?",
        "context": "CREATE TABLE Student (major VARCHAR)",
        "answer": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "db_id": "allergy_1"
    },
    {
        "question": "What is the largest major?",
        "context": "CREATE TABLE STUDENT (Major VARCHAR, major VARCHAR)",
        "answer": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all ages and corresponding number of students.",
        "context": "CREATE TABLE Student (age VARCHAR)",
        "answer": "SELECT age ,  count(*) FROM Student GROUP BY age",
        "db_id": "allergy_1"
    },
    {
        "question": "Show the average age for male and female students.",
        "context": "CREATE TABLE Student (sex VARCHAR, age INTEGER)",
        "answer": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all cities and corresponding number of students.",
        "context": "CREATE TABLE Student (city_code VARCHAR)",
        "answer": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all advisors and corresponding number of students.",
        "context": "CREATE TABLE Student (advisor VARCHAR)",
        "answer": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor",
        "db_id": "allergy_1"
    },
    {
        "question": "How many students does each advisor have?",
        "context": "CREATE TABLE STUDENT (Advisor VARCHAR)",
        "answer": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor",
        "db_id": "allergy_1"
    },
    {
        "question": "Which advisor has most number of students?",
        "context": "CREATE TABLE Student (advisor VARCHAR)",
        "answer": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
        "db_id": "allergy_1"
    },
    {
        "question": "How many students have cat allergies?",
        "context": "CREATE TABLE Has_allergy (Allergy VARCHAR)",
        "answer": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all student IDs who have at least two allergies.",
        "context": "CREATE TABLE Has_allergy (StuID VARCHAR)",
        "answer": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
        "db_id": "allergy_1"
    },
    {
        "question": "What are the student ids of students who don't have any allergies?",
        "context": "CREATE TABLE Has_allergy (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)",
        "answer": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "db_id": "allergy_1"
    },
    {
        "question": "How many female students have milk or egg allergies?",
        "context": "CREATE TABLE Student (StuID VARCHAR, sex VARCHAR); CREATE TABLE has_allergy (StuID VARCHAR, allergy VARCHAR)",
        "answer": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "db_id": "allergy_1"
    },
    {
        "question": "How many students have a food allergy?",
        "context": "CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)",
        "answer": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "db_id": "allergy_1"
    },
    {
        "question": "Which allergy has most number of students affected?",
        "context": "CREATE TABLE Has_allergy (Allergy VARCHAR)",
        "answer": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all allergies with number of students affected.",
        "context": "CREATE TABLE Has_allergy (Allergy VARCHAR)",
        "answer": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "db_id": "allergy_1"
    },
    {
        "question": "Show all allergy type with number of students affected.",
        "context": "CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)",
        "answer": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "db_id": "allergy_1"
    },
    {
        "question": "Find the last name and age of the student who has allergy to both milk and cat.",
        "context": "CREATE TABLE Has_allergy (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR)",
        "answer": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "db_id": "allergy_1"
    },
    {
        "question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.",
        "context": "CREATE TABLE Has_allergy (Allergy VARCHAR, StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR, Fname VARCHAR); CREATE TABLE Allergy_type (Allergy VARCHAR, AllergyType VARCHAR)",
        "answer": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy",
        "db_id": "allergy_1"
    },
    {
        "question": "Find the first name and gender of the student who has allergy to milk but not cat.",
        "context": "CREATE TABLE Student (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Has_allergy (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR)",
        "answer": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "db_id": "allergy_1"
    },
    {
        "question": "Find the average age of the students who have allergies with food and animal types.",
        "context": "CREATE TABLE Student (age INTEGER, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)",
        "answer": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
        "db_id": "allergy_1"
    },
    {
        "question": "List the first and last name of the students who do not have any food type allergy.",
        "context": "CREATE TABLE Student (fname VARCHAR, lname VARCHAR, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)",
        "answer": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "db_id": "allergy_1"
    },
    {
        "question": "Find the number of male (sex is 'M') students who have some food type allery.",
        "context": "CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Student (sex VARCHAR, StuID VARCHAR)",
        "answer": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "db_id": "allergy_1"
    },
    {
        "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "context": "CREATE TABLE Has_Allergy (stuid VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, city_code VARCHAR, stuid VARCHAR)",
        "answer": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "db_id": "allergy_1"
    },
    {
        "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
        "context": "CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Student (age VARCHAR, StuID VARCHAR)",
        "answer": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "db_id": "allergy_1"
    },
    {
        "question": "Find the first name and major of the students who are not allegry to soy.",
        "context": "CREATE TABLE Has_allergy (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR)",
        "answer": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "db_id": "allergy_1"
    },
    {
        "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices.",
        "context": "CREATE TABLE invoices (billing_country VARCHAR)",
        "answer": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
        "db_id": "store_1"
    },
    {
        "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
        "context": "CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)",
        "answer": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
        "db_id": "store_1"
    },
    {
        "question": "A list of the top 10 countries by average invoice size. List country name and average invoice size.",
        "context": "CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)",
        "answer": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",
        "db_id": "store_1"
    },
    {
        "question": "Find out 5 customers who most recently purchased something. List customers' first and last name.",
        "context": "CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR, invoice_date VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
        "db_id": "store_1"
    },
    {
        "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.",
        "context": "CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
        "db_id": "store_1"
    },
    {
        "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
        "context": "CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",
        "db_id": "store_1"
    },
    {
        "question": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "context": "CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",
        "db_id": "store_1"
    },
    {
        "question": "List every album's title.",
        "context": "CREATE TABLE albums (title VARCHAR)",
        "answer": "SELECT title FROM albums;",
        "db_id": "store_1"
    },
    {
        "question": "List every album ordered by album title in ascending order.",
        "context": "CREATE TABLE albums (title VARCHAR)",
        "answer": "SELECT title FROM albums ORDER BY title;",
        "db_id": "store_1"
    },
    {
        "question": "List every album whose title starts with A in alphabetical order.",
        "context": "CREATE TABLE albums (title VARCHAR)",
        "answer": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
        "db_id": "store_1"
    },
    {
        "question": "List the customers first and last name of 10 least expensive invoices.",
        "context": "CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
        "db_id": "store_1"
    },
    {
        "question": "List total amount of  invoice from Chicago, IL.",
        "context": "CREATE TABLE invoices (total INTEGER, billing_city VARCHAR, billing_state VARCHAR)",
        "answer": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
        "db_id": "store_1"
    },
    {
        "question": "List the number of invoices from Chicago, IL.",
        "context": "CREATE TABLE invoices (billing_city VARCHAR, billing_state VARCHAR)",
        "answer": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
        "db_id": "store_1"
    },
    {
        "question": "List the number of invoices from the US, grouped by state.",
        "context": "CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)",
        "answer": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;",
        "db_id": "store_1"
    },
    {
        "question": "List the state in the US with the most invoices.",
        "context": "CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)",
        "answer": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
        "db_id": "store_1"
    },
    {
        "question": "List the number of invoices and the invoice total from California.",
        "context": "CREATE TABLE invoices (billing_state VARCHAR, total INTEGER)",
        "answer": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";",
        "db_id": "store_1"
    },
    {
        "question": "List Aerosmith's albums.",
        "context": "CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)",
        "answer": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
        "db_id": "store_1"
    },
    {
        "question": "How many albums does Billy Cobham has?",
        "context": "CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (artist_id VARCHAR)",
        "answer": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
        "db_id": "store_1"
    },
    {
        "question": "Eduardo Martins is a customer at which company?",
        "context": "CREATE TABLE customers (company VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
        "db_id": "store_1"
    },
    {
        "question": "What is Astrid Gruber's email and phone number?",
        "context": "CREATE TABLE customers (email VARCHAR, phone VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
        "db_id": "store_1"
    },
    {
        "question": "How many customers live in Prague city?",
        "context": "CREATE TABLE customers (city VARCHAR)",
        "answer": "SELECT count(*) FROM customers WHERE city = \"Prague\";",
        "db_id": "store_1"
    },
    {
        "question": "How many customers in state of CA?",
        "context": "CREATE TABLE customers (state VARCHAR)",
        "answer": "SELECT count(*) FROM customers WHERE state = \"CA\";",
        "db_id": "store_1"
    },
    {
        "question": "What country does Roberto Almeida live?",
        "context": "CREATE TABLE customers (country VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
        "db_id": "store_1"
    },
    {
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "context": "CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)",
        "answer": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
        "db_id": "store_1"
    },
    {
        "question": "How many customers does Steve Johnson support?",
        "context": "CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)",
        "answer": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";",
        "db_id": "store_1"
    },
    {
        "question": "What is the title, phone and hire date of Nancy Edwards?",
        "context": "CREATE TABLE employees (title VARCHAR, phone VARCHAR, hire_date VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "db_id": "store_1"
    },
    {
        "question": "find the full name of employees who report to Nancy Edwards?",
        "context": "CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, reports_to VARCHAR)",
        "answer": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";",
        "db_id": "store_1"
    },
    {
        "question": "What is the address of employee Nancy Edwards?",
        "context": "CREATE TABLE employees (address VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "db_id": "store_1"
    },
    {
        "question": "Find the full name of employee who supported the most number of customers.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)",
        "answer": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "store_1"
    },
    {
        "question": "How many employees are living in Canada?",
        "context": "CREATE TABLE employees (country VARCHAR)",
        "answer": "SELECT count(*) FROM employees WHERE country = \"Canada\";",
        "db_id": "store_1"
    },
    {
        "question": "What is employee Nancy Edwards's phone number?",
        "context": "CREATE TABLE employees (phone VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "db_id": "store_1"
    },
    {
        "question": "Who is the youngest employee in the company? List employee's first and last name.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, birth_date VARCHAR)",
        "answer": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
        "db_id": "store_1"
    },
    {
        "question": "List top 10 employee work longest in the company. List employee's first and last name.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR)",
        "answer": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
        "db_id": "store_1"
    },
    {
        "question": "Find the number of employees whose title is IT Staff from each city?",
        "context": "CREATE TABLE employees (city VARCHAR, title VARCHAR)",
        "answer": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "db_id": "store_1"
    },
    {
        "question": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE employees (reports_to VARCHAR)",
        "answer": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
        "db_id": "store_1"
    },
    {
        "question": "How many orders does Lucas Mancini has?",
        "context": "CREATE TABLE invoices (customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "db_id": "store_1"
    },
    {
        "question": "What is the total amount of money spent by Lucas Mancini?",
        "context": "CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "db_id": "store_1"
    },
    {
        "question": "List all media types.",
        "context": "CREATE TABLE media_types (name VARCHAR)",
        "answer": "SELECT name FROM media_types;",
        "db_id": "store_1"
    },
    {
        "question": "List all different genre types.",
        "context": "CREATE TABLE genres (name VARCHAR)",
        "answer": "SELECT DISTINCT name FROM genres;",
        "db_id": "store_1"
    },
    {
        "question": "List the name of all playlist.",
        "context": "CREATE TABLE playlists (name VARCHAR)",
        "answer": "SELECT name FROM playlists;",
        "db_id": "store_1"
    },
    {
        "question": "Who is the composer of track Fast As a Shark?",
        "context": "CREATE TABLE tracks (composer VARCHAR, name VARCHAR)",
        "answer": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";",
        "db_id": "store_1"
    },
    {
        "question": "How long does track Fast As a Shark has?",
        "context": "CREATE TABLE tracks (milliseconds VARCHAR, name VARCHAR)",
        "answer": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";",
        "db_id": "store_1"
    },
    {
        "question": "What is the name of tracks whose genre is Rock?",
        "context": "CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)",
        "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
        "db_id": "store_1"
    },
    {
        "question": "What is title of album which track Balls to the Wall belongs to?",
        "context": "CREATE TABLE tracks (genre_id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
        "db_id": "store_1"
    },
    {
        "question": "List name of all tracks in Balls to the Wall.",
        "context": "CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR); CREATE TABLE albums (id VARCHAR, title VARCHAR)",
        "answer": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
        "db_id": "store_1"
    },
    {
        "question": "List title of albums have the number of tracks greater than 10.",
        "context": "CREATE TABLE tracks (album_id VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
        "db_id": "store_1"
    },
    {
        "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
        "context": "CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)",
        "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";",
        "db_id": "store_1"
    },
    {
        "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
        "context": "CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)",
        "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";",
        "db_id": "store_1"
    },
    {
        "question": "List the name of tracks belongs to genre Rock or genre Jazz.",
        "context": "CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)",
        "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
        "db_id": "store_1"
    },
    {
        "question": "List the name of all tracks in the playlists of Movies.",
        "context": "CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";",
        "db_id": "store_1"
    },
    {
        "question": "List the name of playlist which has number of tracks greater than 100.",
        "context": "CREATE TABLE playlist_tracks (playlist_id VARCHAR, track_id VARCHAR); CREATE TABLE playlists (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
        "db_id": "store_1"
    },
    {
        "question": "List all tracks bought by customer Daan Peeters.",
        "context": "CREATE TABLE invoices (id VARCHAR, customer_id VARCHAR); CREATE TABLE invoice_lines (track_id VARCHAR, invoice_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";",
        "db_id": "store_1"
    },
    {
        "question": "How much is the track Fast As a Shark?",
        "context": "CREATE TABLE tracks (unit_price VARCHAR, name VARCHAR)",
        "answer": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";",
        "db_id": "store_1"
    },
    {
        "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "context": "CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "db_id": "store_1"
    },
    {
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "context": "CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "db_id": "store_1"
    },
    {
        "question": "Find number of tracks in each genre?",
        "context": "CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)",
        "answer": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;",
        "db_id": "store_1"
    },
    {
        "question": "How many editors are there?",
        "context": "CREATE TABLE editor (Id VARCHAR)",
        "answer": "SELECT count(*) FROM editor",
        "db_id": "journal_committee"
    },
    {
        "question": "List the names of editors in ascending order of age.",
        "context": "CREATE TABLE editor (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM editor ORDER BY Age ASC",
        "db_id": "journal_committee"
    },
    {
        "question": "What are the names and ages of editors?",
        "context": "CREATE TABLE editor (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name ,  Age FROM editor",
        "db_id": "journal_committee"
    },
    {
        "question": "List the names of editors who are older than 25.",
        "context": "CREATE TABLE editor (Name VARCHAR, Age INTEGER)",
        "answer": "SELECT Name FROM editor WHERE Age  >  25",
        "db_id": "journal_committee"
    },
    {
        "question": "Show the names of editors of age either 24 or 25.",
        "context": "CREATE TABLE editor (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
        "db_id": "journal_committee"
    },
    {
        "question": "What is the name of the youngest editor?",
        "context": "CREATE TABLE editor (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
        "db_id": "journal_committee"
    },
    {
        "question": "What are the different ages of editors? Show each age along with the number of editors of that age.",
        "context": "CREATE TABLE editor (Age VARCHAR)",
        "answer": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age",
        "db_id": "journal_committee"
    },
    {
        "question": "Please show the most common age of editors.",
        "context": "CREATE TABLE editor (Age VARCHAR)",
        "answer": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "journal_committee"
    },
    {
        "question": "Show the distinct themes of journals.",
        "context": "CREATE TABLE journal (Theme VARCHAR)",
        "answer": "SELECT DISTINCT Theme FROM journal",
        "db_id": "journal_committee"
    },
    {
        "question": "Show the names of editors and the theme of journals for which they serve on committees.",
        "context": "CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
        "db_id": "journal_committee"
    },
    {
        "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",
        "context": "CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, age VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC",
        "db_id": "journal_committee"
    },
    {
        "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
        "context": "CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Journal_ID VARCHAR, Sales INTEGER)",
        "answer": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000",
        "db_id": "journal_committee"
    },
    {
        "question": "Show the id, name of each editor and the number of journal committees they are on.",
        "context": "CREATE TABLE editor (editor_id VARCHAR, Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)",
        "answer": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id",
        "db_id": "journal_committee"
    },
    {
        "question": "Show the names of editors that are on at least two journal committees.",
        "context": "CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2",
        "db_id": "journal_committee"
    },
    {
        "question": "List the names of editors that are not on any journal committee.",
        "context": "CREATE TABLE editor (Name VARCHAR, editor_id VARCHAR); CREATE TABLE journal_committee (Name VARCHAR, editor_id VARCHAR)",
        "answer": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "db_id": "journal_committee"
    },
    {
        "question": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.",
        "context": "CREATE TABLE journal_committee (journal_ID VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR, journal_ID VARCHAR)",
        "answer": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID",
        "db_id": "journal_committee"
    },
    {
        "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
        "context": "CREATE TABLE journal_committee (journal_ID VARCHAR, work_type VARCHAR); CREATE TABLE journal (sales INTEGER, journal_ID VARCHAR)",
        "answer": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'",
        "db_id": "journal_committee"
    },
    {
        "question": "How many accounts do we have?",
        "context": "CREATE TABLE Accounts (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Accounts",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Count the number of accounts.",
        "context": "CREATE TABLE accounts (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Accounts",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show ids, customer ids, names for all accounts.",
        "context": "CREATE TABLE Accounts (account_id VARCHAR, customer_id VARCHAR, account_name VARCHAR)",
        "answer": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show other account details for account with name 338.",
        "context": "CREATE TABLE Accounts (other_account_details VARCHAR, account_name VARCHAR)",
        "answer": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the first name, last name, and phone of the customer with account name 162?",
        "context": "CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR)",
        "answer": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)",
        "answer": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show all customer ids and the number of accounts for each customer.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR)",
        "answer": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the customer id and number of accounts with most accounts.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR)",
        "answer": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the customer first, last name and id with least number of accounts.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the number of all customers without an account.",
        "context": "CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)",
        "answer": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the first names and last names of customers without any account.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR)",
        "answer": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show distinct first and last names for all customers with an account.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many customers have an account?",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR)",
        "answer": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many customers do we have?",
        "context": "CREATE TABLE Customers (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Customers",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Count the number of customers.",
        "context": "CREATE TABLE customers (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Customers",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show ids, first names, last names, and phones for all customers.",
        "context": "CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR)",
        "answer": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "context": "CREATE TABLE Customers (customer_phone VARCHAR, customer_email VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)",
        "answer": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the number of customer cards.",
        "context": "CREATE TABLE Customers_cards (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Customers_cards",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "context": "CREATE TABLE Customers_cards (card_id VARCHAR, customer_id VARCHAR, card_type_code VARCHAR, card_number VARCHAR)",
        "answer": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.",
        "context": "CREATE TABLE Customers_cards (date_valid_from VARCHAR, date_valid_to VARCHAR, card_number VARCHAR)",
        "answer": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the first name, last name, and phone of the customer with card 4560596484842.",
        "context": "CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Customers_cards (customer_id VARCHAR, card_number VARCHAR)",
        "answer": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many cards does customer Art Turcotte have?",
        "context": "CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)",
        "answer": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many debit cards do we have?",
        "context": "CREATE TABLE Customers_cards (card_type_code VARCHAR)",
        "answer": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many credit cards does customer Blanche Huels have?",
        "context": "CREATE TABLE Customers_cards (customer_id VARCHAR, card_type_code VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)",
        "answer": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show all customer ids and the number of cards owned by each customer.",
        "context": "CREATE TABLE Customers_cards (customer_id VARCHAR)",
        "answer": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the customer id with most number of cards, and how many does he have?",
        "context": "CREATE TABLE Customers_cards (customer_id VARCHAR)",
        "answer": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show id, first and last names for all customers with at least two cards.",
        "context": "CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the customer id, first and last name with least number of accounts.",
        "context": "CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show all card type codes and the number of cards in each type.",
        "context": "CREATE TABLE Customers_cards (card_type_code VARCHAR)",
        "answer": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the card type code with most number of cards?",
        "context": "CREATE TABLE Customers_cards (card_type_code VARCHAR)",
        "answer": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show card type codes with at least 5 cards.",
        "context": "CREATE TABLE Customers_cards (card_type_code VARCHAR)",
        "answer": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show all card type codes and the number of customers holding cards in each type.",
        "context": "CREATE TABLE Customers_cards (card_type_code VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the customer ids and firstname without a credit card.",
        "context": "CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, card_type_code VARCHAR)",
        "answer": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show all card type codes.",
        "context": "CREATE TABLE Customers_Cards (card_type_code VARCHAR)",
        "answer": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the number of card types.",
        "context": "CREATE TABLE Customers_Cards (card_type_code VARCHAR)",
        "answer": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show all transaction types.",
        "context": "CREATE TABLE Financial_Transactions (transaction_type VARCHAR)",
        "answer": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the number of transaction types.",
        "context": "CREATE TABLE Financial_Transactions (transaction_type VARCHAR)",
        "answer": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the average and total transaction amount?",
        "context": "CREATE TABLE Financial_transactions (transaction_amount INTEGER)",
        "answer": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the card type codes and the number of transactions.",
        "context": "CREATE TABLE Financial_transactions (card_id VARCHAR); CREATE TABLE Customers_cards (card_type_code VARCHAR, card_id VARCHAR)",
        "answer": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the transaction type and the number of transactions.",
        "context": "CREATE TABLE Financial_transactions (transaction_type VARCHAR)",
        "answer": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the transaction type that has processed the greatest total amount in transactions?",
        "context": "CREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)",
        "answer": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the account id and the number of transactions for each account",
        "context": "CREATE TABLE Financial_transactions (account_id VARCHAR)",
        "answer": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many tracks do we have?",
        "context": "CREATE TABLE track (Id VARCHAR)",
        "answer": "SELECT count(*) FROM track",
        "db_id": "race_track"
    },
    {
        "question": "Show the name and location for all tracks.",
        "context": "CREATE TABLE track (name VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT name ,  LOCATION FROM track",
        "db_id": "race_track"
    },
    {
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "context": "CREATE TABLE track (name VARCHAR, seating VARCHAR, year_opened INTEGER)",
        "answer": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
        "db_id": "race_track"
    },
    {
        "question": "What is the name, location and seating for the most recently opened track?",
        "context": "CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, seating VARCHAR, year_opened VARCHAR)",
        "answer": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
        "db_id": "race_track"
    },
    {
        "question": "What is the minimum, maximum, and average seating for all tracks.",
        "context": "CREATE TABLE track (seating INTEGER)",
        "answer": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",
        "db_id": "race_track"
    },
    {
        "question": "Show the name, location, open year for all tracks with a seating higher than the average.",
        "context": "CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, year_opened VARCHAR, seating INTEGER)",
        "answer": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
        "db_id": "race_track"
    },
    {
        "question": "What are distinct locations where tracks are located?",
        "context": "CREATE TABLE track (LOCATION VARCHAR)",
        "answer": "SELECT DISTINCT LOCATION FROM track",
        "db_id": "race_track"
    },
    {
        "question": "How many races are there?",
        "context": "CREATE TABLE race (Id VARCHAR)",
        "answer": "SELECT count(*) FROM race",
        "db_id": "race_track"
    },
    {
        "question": "What are the distinct classes that races can have?",
        "context": "CREATE TABLE race (CLASS VARCHAR)",
        "answer": "SELECT DISTINCT CLASS FROM race",
        "db_id": "race_track"
    },
    {
        "question": "Show name, class, and date for all races.",
        "context": "CREATE TABLE race (name VARCHAR, CLASS VARCHAR, date VARCHAR)",
        "answer": "SELECT name ,  CLASS ,  date FROM race",
        "db_id": "race_track"
    },
    {
        "question": "Show the race class and number of races in each class.",
        "context": "CREATE TABLE race (CLASS VARCHAR)",
        "answer": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS",
        "db_id": "race_track"
    },
    {
        "question": "What is the race class with most number of races.",
        "context": "CREATE TABLE race (CLASS VARCHAR)",
        "answer": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
        "db_id": "race_track"
    },
    {
        "question": "List the race class with at least two races.",
        "context": "CREATE TABLE race (CLASS VARCHAR)",
        "answer": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "db_id": "race_track"
    },
    {
        "question": "What are the names for tracks without a race in class 'GT'.",
        "context": "CREATE TABLE race (track_id VARCHAR, class VARCHAR); CREATE TABLE track (name VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)",
        "answer": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
        "db_id": "race_track"
    },
    {
        "question": "Show all track names that have had no races.",
        "context": "CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (name VARCHAR, track_id VARCHAR)",
        "answer": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
        "db_id": "race_track"
    },
    {
        "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.",
        "context": "CREATE TABLE track (year_opened VARCHAR, seating INTEGER)",
        "answer": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
        "db_id": "race_track"
    },
    {
        "question": "Show the name of track and the number of races in each track.",
        "context": "CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)",
        "answer": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",
        "db_id": "race_track"
    },
    {
        "question": "Show the name of track with most number of races.",
        "context": "CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)",
        "answer": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "race_track"
    },
    {
        "question": "Show the name and date for each race and its track name.",
        "context": "CREATE TABLE race (name VARCHAR, date VARCHAR, track_id VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)",
        "answer": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "db_id": "race_track"
    },
    {
        "question": "Show the name and location of track with 1 race.",
        "context": "CREATE TABLE race (track_id VARCHAR); CREATE TABLE track (name VARCHAR, location VARCHAR, track_id VARCHAR)",
        "answer": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
        "db_id": "race_track"
    },
    {
        "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.",
        "context": "CREATE TABLE track (LOCATION VARCHAR, seating INTEGER)",
        "answer": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000",
        "db_id": "race_track"
    },
    {
        "question": "How many members have the black membership card?",
        "context": "CREATE TABLE member (Membership_card VARCHAR)",
        "answer": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'",
        "db_id": "coffee_shop"
    },
    {
        "question": "Find the number of members living in each address.",
        "context": "CREATE TABLE member (address VARCHAR)",
        "answer": "SELECT count(*) ,  address FROM member GROUP BY address",
        "db_id": "coffee_shop"
    },
    {
        "question": "Give me the names of members whose address is in Harford or Waterbury.",
        "context": "CREATE TABLE member (name VARCHAR, address VARCHAR)",
        "answer": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'",
        "db_id": "coffee_shop"
    },
    {
        "question": "Find the ids and names of members who are under age 30 or with black membership card.",
        "context": "CREATE TABLE member (name VARCHAR, member_id VARCHAR, Membership_card VARCHAR, age VARCHAR)",
        "answer": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30",
        "db_id": "coffee_shop"
    },
    {
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "context": "CREATE TABLE member (Time_of_purchase VARCHAR, age VARCHAR, address VARCHAR)",
        "answer": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
        "db_id": "coffee_shop"
    },
    {
        "question": "Which membership card has more than 5 members?",
        "context": "CREATE TABLE member (Membership_card VARCHAR)",
        "answer": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "db_id": "coffee_shop"
    },
    {
        "question": "Which address has both members younger than 30 and members older than 40?",
        "context": "CREATE TABLE member (address VARCHAR, age INTEGER)",
        "answer": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40",
        "db_id": "coffee_shop"
    },
    {
        "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "context": "CREATE TABLE member (membership_card VARCHAR, address VARCHAR)",
        "answer": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'",
        "db_id": "coffee_shop"
    },
    {
        "question": "How many members are not living in Hartford?",
        "context": "CREATE TABLE member (address VARCHAR)",
        "answer": "SELECT count(*) FROM member WHERE address != 'Hartford'",
        "db_id": "coffee_shop"
    },
    {
        "question": "Which address do not have any member with the black membership card?",
        "context": "CREATE TABLE member (address VARCHAR, Membership_card VARCHAR)",
        "answer": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
        "db_id": "coffee_shop"
    },
    {
        "question": "Show the shop addresses ordered by their opening year.",
        "context": "CREATE TABLE shop (address VARCHAR, open_year VARCHAR)",
        "answer": "SELECT address FROM shop ORDER BY open_year",
        "db_id": "coffee_shop"
    },
    {
        "question": "What are the average score and average staff number of all shops?",
        "context": "CREATE TABLE shop (num_of_staff INTEGER, score INTEGER)",
        "answer": "SELECT avg(num_of_staff) ,  avg(score) FROM shop",
        "db_id": "coffee_shop"
    },
    {
        "question": "Find the id and address of the shops whose score is below the average score.",
        "context": "CREATE TABLE shop (shop_id VARCHAR, address VARCHAR, score INTEGER)",
        "answer": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)",
        "db_id": "coffee_shop"
    },
    {
        "question": "Find the address and staff number of the shops that do not have any happy hour.",
        "context": "CREATE TABLE shop (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR)",
        "answer": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
        "db_id": "coffee_shop"
    },
    {
        "question": "What are the id and address of the shops which have a happy hour in May?",
        "context": "CREATE TABLE shop (address VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (shop_id VARCHAR)",
        "answer": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'",
        "db_id": "coffee_shop"
    },
    {
        "question": "which shop has happy hour most frequently? List its id and number of happy hours.",
        "context": "CREATE TABLE happy_hour (shop_id VARCHAR)",
        "answer": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "coffee_shop"
    },
    {
        "question": "Which month has the most happy hours?",
        "context": "CREATE TABLE happy_hour (MONTH VARCHAR)",
        "answer": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
        "db_id": "coffee_shop"
    },
    {
        "question": "Which months have more than 2 happy hours?",
        "context": "CREATE TABLE happy_hour (MONTH VARCHAR)",
        "answer": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2",
        "db_id": "coffee_shop"
    },
    {
        "question": "How many albums are there?",
        "context": "CREATE TABLE ALBUM (Id VARCHAR)",
        "answer": "SELECT count(*) FROM ALBUM",
        "db_id": "chinook_1"
    },
    {
        "question": "List the names of all music genres.",
        "context": "CREATE TABLE GENRE (Name VARCHAR)",
        "answer": "SELECT Name FROM GENRE",
        "db_id": "chinook_1"
    },
    {
        "question": "Find all the customer information in state NY.",
        "context": "CREATE TABLE CUSTOMER (State VARCHAR)",
        "answer": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
        "db_id": "chinook_1"
    },
    {
        "question": "What are the first names and last names of the employees who live in Calgary city.",
        "context": "CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, City VARCHAR)",
        "answer": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"",
        "db_id": "chinook_1"
    },
    {
        "question": "What are the distinct billing countries of the invoices?",
        "context": "CREATE TABLE INVOICE (BillingCountry VARCHAR)",
        "answer": "SELECT distinct(BillingCountry) FROM INVOICE",
        "db_id": "chinook_1"
    },
    {
        "question": "Find the names of all artists that have \"a\" in their names.",
        "context": "CREATE TABLE ARTIST (Name VARCHAR)",
        "answer": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
        "db_id": "chinook_1"
    },
    {
        "question": "Find the title of all the albums of the artist \"AC/DC\".",
        "context": "CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)",
        "answer": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
        "db_id": "chinook_1"
    },
    {
        "question": "Hom many albums does the artist \"Metallica\" have?",
        "context": "CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)",
        "answer": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "db_id": "chinook_1"
    },
    {
        "question": "Which artist does the album \"Balls to the Wall\" belong to?",
        "context": "CREATE TABLE ALBUM (ArtistId VARCHAR, Title VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)",
        "answer": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
        "db_id": "chinook_1"
    },
    {
        "question": "Which artist has the most albums?",
        "context": "CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)",
        "answer": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "chinook_1"
    },
    {
        "question": "Find the names of all the tracks that contain the word \"you\".",
        "context": "CREATE TABLE TRACK (Name VARCHAR)",
        "answer": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "db_id": "chinook_1"
    },
    {
        "question": "What is the average unit price of all the tracks?",
        "context": "CREATE TABLE TRACK (UnitPrice INTEGER)",
        "answer": "SELECT AVG(UnitPrice) FROM TRACK",
        "db_id": "chinook_1"
    },
    {
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "context": "CREATE TABLE TRACK (Milliseconds INTEGER)",
        "answer": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "db_id": "chinook_1"
    },
    {
        "question": "Show the album names, ids and the number of tracks for each album.",
        "context": "CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR)",
        "answer": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "db_id": "chinook_1"
    },
    {
        "question": "What is the name of the most common genre in all tracks?",
        "context": "CREATE TABLE GENRE (Name VARCHAR, GenreId VARCHAR); CREATE TABLE TRACK (GenreId VARCHAR)",
        "answer": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "chinook_1"
    },
    {
        "question": "What is the least common media type in all tracks?",
        "context": "CREATE TABLE MEDIATYPE (Name VARCHAR, MediaTypeId VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)",
        "answer": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "db_id": "chinook_1"
    },
    {
        "question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
        "context": "CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR, UnitPrice INTEGER)",
        "answer": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "db_id": "chinook_1"
    },
    {
        "question": "How many tracks belong to rock genre?",
        "context": "CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)",
        "answer": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "db_id": "chinook_1"
    },
    {
        "question": "What is the average unit price of tracks that belong to Jazz genre?",
        "context": "CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)",
        "answer": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "db_id": "chinook_1"
    },
    {
        "question": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?",
        "context": "CREATE TABLE CUSTOMER (FirstName VARCHAR, LastName VARCHAR, Email VARCHAR)",
        "answer": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "db_id": "chinook_1"
    },
    {
        "question": "How many customers have email that contains \"gmail.com\"?",
        "context": "CREATE TABLE CUSTOMER (Email VARCHAR)",
        "answer": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "db_id": "chinook_1"
    },
    {
        "question": "What is the first name and last name employee helps the customer with first name Leonie?",
        "context": "CREATE TABLE CUSTOMER (SupportRepId VARCHAR, FirstName VARCHAR); CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, EmployeeId VARCHAR)",
        "answer": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"",
        "db_id": "chinook_1"
    },
    {
        "question": "What city does the employee who helps the customer with postal code 70174 live in?",
        "context": "CREATE TABLE EMPLOYEE (City VARCHAR, EmployeeId VARCHAR); CREATE TABLE CUSTOMER (SupportRepId VARCHAR, PostalCode VARCHAR)",
        "answer": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "db_id": "chinook_1"
    },
    {
        "question": "How many distinct cities does the employees live in?",
        "context": "CREATE TABLE EMPLOYEE (city VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
        "db_id": "chinook_1"
    },
    {
        "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.",
        "context": "CREATE TABLE CUSTOMER (CustomerId VARCHAR, FirstName VARCHAR); CREATE TABLE INVOICE (InvoiceDate VARCHAR, CustomerId VARCHAR)",
        "answer": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
        "db_id": "chinook_1"
    },
    {
        "question": "Find all the customer last names that do not have invoice totals larger than 20.",
        "context": "CREATE TABLE CUSTOMER (LastName VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, CustomerId VARCHAR); CREATE TABLE Invoice (CustomerId VARCHAR, total INTEGER)",
        "answer": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "db_id": "chinook_1"
    },
    {
        "question": "Find the first names of all customers that live in Brazil and have an invoice.",
        "context": "CREATE TABLE CUSTOMER (FirstName VARCHAR, CustomerId VARCHAR, country VARCHAR); CREATE TABLE INVOICE (CustomerId VARCHAR)",
        "answer": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "db_id": "chinook_1"
    },
    {
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "context": "CREATE TABLE INVOICE (CustomerId VARCHAR); CREATE TABLE CUSTOMER (Address VARCHAR, CustomerId VARCHAR, country VARCHAR)",
        "answer": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "db_id": "chinook_1"
    },
    {
        "question": "List the phone numbers of all employees.",
        "context": "CREATE TABLE EMPLOYEE (Phone VARCHAR)",
        "answer": "SELECT Phone FROM EMPLOYEE",
        "db_id": "chinook_1"
    },
    {
        "question": "How many tracks are in the AAC audio file media type?",
        "context": "CREATE TABLE MEDIATYPE (MediaTypeId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)",
        "answer": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "db_id": "chinook_1"
    },
    {
        "question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
        "context": "CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)",
        "answer": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
        "db_id": "chinook_1"
    },
    {
        "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "context": "CREATE TABLE CUSTOMER (FirstName VARCHAR, SupportRepId VARCHAR); CREATE TABLE EMPLOYEE (EmployeeId VARCHAR)",
        "answer": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "db_id": "chinook_1"
    },
    {
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "context": "CREATE TABLE EMPLOYEE (EmployeeId VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, SupportRepId VARCHAR)",
        "answer": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "db_id": "chinook_1"
    },
    {
        "question": "Please list all album titles in alphabetical order.",
        "context": "CREATE TABLE ALBUM (Title VARCHAR)",
        "answer": "SELECT Title FROM ALBUM ORDER BY Title",
        "db_id": "chinook_1"
    },
    {
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "context": "CREATE TABLE ARTIST (Name VARCHAR, ArtistID VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)",
        "answer": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "db_id": "chinook_1"
    },
    {
        "question": "Find the names of artists that do not have any albums.",
        "context": "CREATE TABLE ARTIST (Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)",
        "answer": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "db_id": "chinook_1"
    },
    {
        "question": "What is the average unit price of rock tracks?",
        "context": "CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (UnitPrice INTEGER, GenreId VARCHAR)",
        "answer": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "db_id": "chinook_1"
    },
    {
        "question": "What are the duration of the longest and shortest pop tracks in milliseconds?",
        "context": "CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)",
        "answer": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "db_id": "chinook_1"
    },
    {
        "question": "What are the birth dates of employees living in Edmonton?",
        "context": "CREATE TABLE EMPLOYEE (BirthDate VARCHAR, City VARCHAR)",
        "answer": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
        "db_id": "chinook_1"
    },
    {
        "question": "What are the distinct unit prices of all tracks?",
        "context": "CREATE TABLE TRACK (UnitPrice VARCHAR)",
        "answer": "SELECT distinct(UnitPrice) FROM TRACK",
        "db_id": "chinook_1"
    },
    {
        "question": "How many artists do not have any album?",
        "context": "CREATE TABLE ARTIST (artistid VARCHAR); CREATE TABLE ALBUM (artistid VARCHAR)",
        "answer": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
        "db_id": "chinook_1"
    },
    {
        "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "context": "CREATE TABLE Genre (GenreID VARCHAR, Name VARCHAR); CREATE TABLE Track (AlbumId VARCHAR, GenreID VARCHAR); CREATE TABLE Album (Title VARCHAR, AlbumId VARCHAR)",
        "answer": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
        "db_id": "chinook_1"
    },
    {
        "question": "Find all the phone numbers.",
        "context": "CREATE TABLE available_policies (customer_phone VARCHAR)",
        "answer": "SELECT customer_phone FROM available_policies",
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are the customer phone numbers under the policy \"Life Insurance\"?",
        "context": "CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)",
        "answer": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"",
        "db_id": "insurance_fnol"
    },
    {
        "question": "Which policy type has the most records in the database?",
        "context": "CREATE TABLE available_policies (policy_type_code VARCHAR)",
        "answer": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are all the customer phone numbers under the most popular policy type?",
        "context": "CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)",
        "answer": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the policy type used by more than 4 customers.",
        "context": "CREATE TABLE available_policies (policy_type_code VARCHAR)",
        "answer": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4",
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the total and average amount of settlements.",
        "context": "CREATE TABLE settlements (settlement_amount INTEGER)",
        "answer": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the name of services that have been used for more than 2 times in first notification of loss.",
        "context": "CREATE TABLE services (service_name VARCHAR, service_id VARCHAR); CREATE TABLE first_notification_of_loss (service_id VARCHAR)",
        "answer": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2",
        "db_id": "insurance_fnol"
    },
    {
        "question": "What is the effective date of the claim that has the largest amount of total settlement?",
        "context": "CREATE TABLE settlements (claim_id VARCHAR, settlement_amount INTEGER); CREATE TABLE claims (Effective_Date VARCHAR, claim_id VARCHAR)",
        "answer": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
        "db_id": "insurance_fnol"
    },
    {
        "question": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR)",
        "answer": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "db_id": "insurance_fnol"
    },
    {
        "question": "What is the name of the customer who has the most policies listed?",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR)",
        "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are all the policy types of the customer named \"Dayana Robel\"?",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE available_policies (policy_type_code VARCHAR, policy_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR, policy_id VARCHAR)",
        "answer": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are all the policy types of the customer that has the most policies listed?",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE available_policies (policy_type_code VARCHAR, policy_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR, policy_id VARCHAR)",
        "answer": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
        "db_id": "insurance_fnol"
    },
    {
        "question": "List all the services in the alphabetical order.",
        "context": "CREATE TABLE services (service_name VARCHAR)",
        "answer": "SELECT service_name FROM services ORDER BY service_name",
        "db_id": "insurance_fnol"
    },
    {
        "question": "How many services are there?",
        "context": "CREATE TABLE services (Id VARCHAR)",
        "answer": "SELECT count(*) FROM services",
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the names of users who do not have a first notification of loss record.",
        "context": "CREATE TABLE first_notification_of_loss (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR)",
        "answer": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
        "context": "CREATE TABLE first_notification_of_loss (customer_id VARCHAR, service_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE services (service_id VARCHAR, service_name VARCHAR)",
        "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".",
        "context": "CREATE TABLE first_notification_of_loss (customer_id VARCHAR, service_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE services (service_id VARCHAR, service_name VARCHAR)",
        "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"",
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the IDs of customers whose name contains \"Diana\".",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)",
        "answer": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are the maximum and minimum settlement amount on record?",
        "context": "CREATE TABLE settlements (settlement_amount INTEGER)",
        "answer": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",
        "db_id": "insurance_fnol"
    },
    {
        "question": "List all the customers in increasing order of IDs.",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)",
        "answer": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
        "db_id": "insurance_fnol"
    },
    {
        "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customers_policies (date_opened VARCHAR, date_closed VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "db_id": "insurance_fnol"
    },
    {
        "question": "How many kinds of enzymes are there?",
        "context": "CREATE TABLE enzyme (Id VARCHAR)",
        "answer": "SELECT count(*) FROM enzyme",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "List the name of enzymes in descending lexicographical order.",
        "context": "CREATE TABLE enzyme (name VARCHAR)",
        "answer": "SELECT name FROM enzyme ORDER BY name DESC",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "List the names and the locations that the enzymes can make an effect.",
        "context": "CREATE TABLE enzyme (name VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT name ,  LOCATION FROM enzyme",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
        "context": "CREATE TABLE enzyme (OMIM INTEGER)",
        "answer": "SELECT max(OMIM) FROM enzyme",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "context": "CREATE TABLE enzyme (product VARCHAR, chromosome VARCHAR, porphyria VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "context": "CREATE TABLE enzyme (name VARCHAR, product VARCHAR)",
        "answer": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "context": "CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, FDA_approved VARCHAR)",
        "answer": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "context": "CREATE TABLE medicine (id VARCHAR, name VARCHAR); CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, medicine_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "context": "CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR)",
        "answer": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "context": "CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR, FDA_approved VARCHAR)",
        "answer": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "context": "CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (id VARCHAR, name VARCHAR)",
        "answer": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "context": "CREATE TABLE enzyme (id VARCHAR, name VARCHAR); CREATE TABLE medicine (id VARCHAR, name VARCHAR); CREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR, medicine_id VARCHAR, enzyme_id VARCHAR)",
        "answer": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "What is the most common interaction type between enzymes and medicine? And how many are there?",
        "context": "CREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR)",
        "answer": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "How many medicines have the FDA approval status 'No' ?",
        "context": "CREATE TABLE medicine (FDA_approved VARCHAR)",
        "answer": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "How many enzymes do not have any interactions?",
        "context": "CREATE TABLE medicine_enzyme_interaction (id VARCHAR, enzyme_id VARCHAR); CREATE TABLE enzyme (id VARCHAR, enzyme_id VARCHAR)",
        "answer": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
        "context": "CREATE TABLE medicine (id VARCHAR, trade_name VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR)",
        "answer": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "context": "CREATE TABLE enzyme (name VARCHAR, location VARCHAR, product VARCHAR, id VARCHAR); CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR)",
        "answer": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "context": "CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, id VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR)",
        "answer": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.",
        "context": "CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR, enzyme_id VARCHAR); CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, id VARCHAR); CREATE TABLE enzyme (id VARCHAR, product VARCHAR)",
        "answer": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "How many distinct FDA approval statuses are there for the medicines?",
        "context": "CREATE TABLE medicine (FDA_approved VARCHAR)",
        "answer": "SELECT count(DISTINCT FDA_approved) FROM medicine",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "Which enzyme names have the substring \"ALA\"?",
        "context": "CREATE TABLE enzyme (name VARCHAR)",
        "answer": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "find the number of medicines offered by each trade.",
        "context": "CREATE TABLE medicine (trade_name VARCHAR)",
        "answer": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "db_id": "medicine_enzyme_interaction"
    },
    {
        "question": "List all schools and their nicknames in the order of founded year.",
        "context": "CREATE TABLE university (school VARCHAR, nickname VARCHAR, founded VARCHAR)",
        "answer": "SELECT school ,  nickname FROM university ORDER BY founded",
        "db_id": "university_basketball"
    },
    {
        "question": "List all public schools and their locations.",
        "context": "CREATE TABLE university (school VARCHAR, LOCATION VARCHAR, affiliation VARCHAR)",
        "answer": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "db_id": "university_basketball"
    },
    {
        "question": "When was the school with the largest enrollment founded?",
        "context": "CREATE TABLE university (founded VARCHAR, enrollment VARCHAR)",
        "answer": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "db_id": "university_basketball"
    },
    {
        "question": "Find the founded year of the newest non public school.",
        "context": "CREATE TABLE university (founded VARCHAR, affiliation VARCHAR)",
        "answer": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "db_id": "university_basketball"
    },
    {
        "question": "How many schools are in the basketball match?",
        "context": "CREATE TABLE basketball_match (school_id VARCHAR)",
        "answer": "SELECT count(DISTINCT school_id) FROM basketball_match",
        "db_id": "university_basketball"
    },
    {
        "question": "What is the highest acc percent score in the competition?",
        "context": "CREATE TABLE basketball_match (acc_percent VARCHAR)",
        "answer": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "db_id": "university_basketball"
    },
    {
        "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
        "context": "CREATE TABLE basketball_match (school_id VARCHAR, acc_percent VARCHAR); CREATE TABLE university (Primary_conference VARCHAR, school_id VARCHAR)",
        "answer": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "db_id": "university_basketball"
    },
    {
        "question": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "context": "CREATE TABLE university (school_id VARCHAR, founded VARCHAR); CREATE TABLE basketball_match (team_name VARCHAR, ACC_Regular_Season VARCHAR, school_id VARCHAR)",
        "answer": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "db_id": "university_basketball"
    },
    {
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "context": "CREATE TABLE basketball_match (All_Games VARCHAR, school_id VARCHAR); CREATE TABLE university (location VARCHAR, school_id VARCHAR)",
        "answer": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "db_id": "university_basketball"
    },
    {
        "question": "What are the average enrollment size of the universities that are founded before 1850?",
        "context": "CREATE TABLE university (enrollment INTEGER, founded INTEGER)",
        "answer": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
        "db_id": "university_basketball"
    },
    {
        "question": "Show the enrollment and primary_conference of the oldest college.",
        "context": "CREATE TABLE university (enrollment VARCHAR, primary_conference VARCHAR, founded VARCHAR)",
        "answer": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
        "db_id": "university_basketball"
    },
    {
        "question": "What is the total and minimum enrollment of all schools?",
        "context": "CREATE TABLE university (enrollment INTEGER)",
        "answer": "SELECT sum(enrollment) ,  min(enrollment) FROM university",
        "db_id": "university_basketball"
    },
    {
        "question": "Find the total student enrollment for different affiliation type schools.",
        "context": "CREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)",
        "answer": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",
        "db_id": "university_basketball"
    },
    {
        "question": "How many schools do not participate in the basketball match?",
        "context": "CREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (school_id VARCHAR)",
        "answer": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "db_id": "university_basketball"
    },
    {
        "question": "Find the schools that were either founded after 1850 or public.",
        "context": "CREATE TABLE university (school VARCHAR, founded VARCHAR, affiliation VARCHAR)",
        "answer": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "db_id": "university_basketball"
    },
    {
        "question": "Find how many different affiliation types there are.",
        "context": "CREATE TABLE university (affiliation VARCHAR)",
        "answer": "SELECT count(DISTINCT affiliation) FROM university",
        "db_id": "university_basketball"
    },
    {
        "question": "Find how many school locations have the word 'NY'.",
        "context": "CREATE TABLE university (LOCATION VARCHAR)",
        "answer": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "db_id": "university_basketball"
    },
    {
        "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.",
        "context": "CREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (team_name VARCHAR, school_id VARCHAR); CREATE TABLE university (enrollment INTEGER)",
        "answer": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
        "db_id": "university_basketball"
    },
    {
        "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
        "context": "CREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)",
        "answer": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation",
        "db_id": "university_basketball"
    },
    {
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "context": "CREATE TABLE university (affiliation VARCHAR, Enrollment INTEGER, founded INTEGER)",
        "answer": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "db_id": "university_basketball"
    },
    {
        "question": "What is the maximum enrollment across all schools?",
        "context": "CREATE TABLE university (Enrollment INTEGER)",
        "answer": "SELECT max(Enrollment) FROM university",
        "db_id": "university_basketball"
    },
    {
        "question": "List all information regarding the basketball match.",
        "context": "CREATE TABLE basketball_match (Id VARCHAR)",
        "answer": "SELECT * FROM basketball_match",
        "db_id": "university_basketball"
    },
    {
        "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
        "context": "CREATE TABLE basketball_match (team_name VARCHAR, All_Home VARCHAR)",
        "answer": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "db_id": "university_basketball"
    },
    {
        "question": "the names of models that launched between 2002 and 2004.",
        "context": "CREATE TABLE chip_model (Model_name VARCHAR, Launch_year INTEGER)",
        "answer": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;",
        "db_id": "phone_1"
    },
    {
        "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
        "context": "CREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR)",
        "answer": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;",
        "db_id": "phone_1"
    },
    {
        "question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?",
        "context": "CREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR)",
        "answer": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\";",
        "db_id": "phone_1"
    },
    {
        "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?",
        "context": "CREATE TABLE phone (Company_name VARCHAR)",
        "answer": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";",
        "db_id": "phone_1"
    },
    {
        "question": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?",
        "context": "CREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (RAM_MiB INTEGER, Model_name VARCHAR)",
        "answer": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "db_id": "phone_1"
    },
    {
        "question": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
        "context": "CREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (ROM_MiB INTEGER, Model_name VARCHAR)",
        "answer": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "db_id": "phone_1"
    },
    {
        "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.",
        "context": "CREATE TABLE chip_model (Model_name VARCHAR, Launch_year VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, chip_model VARCHAR)",
        "answer": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;",
        "db_id": "phone_1"
    },
    {
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "context": "CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, Accreditation_type VARCHAR)",
        "answer": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
        "db_id": "phone_1"
    },
    {
        "question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".",
        "context": "CREATE TABLE phone (screen_mode VARCHAR, Hardware_Model_name VARCHAR); CREATE TABLE screen_mode (Char_cells VARCHAR, Pixels VARCHAR, Hardware_colours VARCHAR, Graphics_mode VARCHAR)",
        "answer": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";",
        "db_id": "phone_1"
    },
    {
        "question": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"",
        "context": "CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)",
        "answer": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";",
        "db_id": "phone_1"
    },
    {
        "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.",
        "context": "CREATE TABLE phone (Company_name VARCHAR)",
        "answer": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",
        "db_id": "phone_1"
    },
    {
        "question": "List the name of the company that produced more than one phone model.",
        "context": "CREATE TABLE phone (Company_name VARCHAR)",
        "answer": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;",
        "db_id": "phone_1"
    },
    {
        "question": "List the maximum, minimum and average number of used kb in screen mode.",
        "context": "CREATE TABLE screen_mode (used_kb INTEGER)",
        "answer": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;",
        "db_id": "phone_1"
    },
    {
        "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
        "context": "CREATE TABLE chip_model (Model_name VARCHAR, Launch_year VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, chip_model VARCHAR)",
        "answer": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;",
        "db_id": "phone_1"
    },
    {
        "question": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?",
        "context": "CREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR); CREATE TABLE chip_model (WiFi VARCHAR, Model_name VARCHAR); CREATE TABLE screen_mode (Type VARCHAR, Graphics_mode VARCHAR)",
        "answer": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";",
        "db_id": "phone_1"
    },
    {
        "question": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.",
        "context": "CREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, chip_model VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)",
        "answer": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;",
        "db_id": "phone_1"
    },
    {
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "context": "CREATE TABLE phone (Hardware_Model_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)",
        "answer": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "db_id": "phone_1"
    },
    {
        "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
        "context": "CREATE TABLE phone (Hardware_Model_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)",
        "answer": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";",
        "db_id": "phone_1"
    },
    {
        "question": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.",
        "context": "CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, used_kb INTEGER)",
        "answer": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;",
        "db_id": "phone_1"
    },
    {
        "question": "Find the number of phones for each accreditation type.",
        "context": "CREATE TABLE phone (Accreditation_type VARCHAR)",
        "answer": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",
        "db_id": "phone_1"
    },
    {
        "question": "Find the accreditation level that more than 3 phones use.",
        "context": "CREATE TABLE phone (Accreditation_level VARCHAR)",
        "answer": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3",
        "db_id": "phone_1"
    },
    {
        "question": "Find the details for all chip models.",
        "context": "CREATE TABLE chip_model (Id VARCHAR)",
        "answer": "SELECT * FROM chip_model",
        "db_id": "phone_1"
    },
    {
        "question": "How many models do not have the wifi function?",
        "context": "CREATE TABLE chip_model (wifi VARCHAR)",
        "answer": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "db_id": "phone_1"
    },
    {
        "question": "List all the model names sorted by their launch year.",
        "context": "CREATE TABLE chip_model (model_name VARCHAR, launch_year VARCHAR)",
        "answer": "SELECT model_name FROM chip_model ORDER BY launch_year",
        "db_id": "phone_1"
    },
    {
        "question": "Find the average ram mib size of the chip models that are never used by any phone.",
        "context": "CREATE TABLE chip_model (RAM_MiB INTEGER, model_name VARCHAR, chip_model VARCHAR); CREATE TABLE phone (RAM_MiB INTEGER, model_name VARCHAR, chip_model VARCHAR)",
        "answer": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
        "db_id": "phone_1"
    },
    {
        "question": "Find the names of the chip models that are not used by any phone with full accreditation type.",
        "context": "CREATE TABLE chip_model (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR); CREATE TABLE phone (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR)",
        "answer": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'",
        "db_id": "phone_1"
    },
    {
        "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
        "context": "CREATE TABLE phone (screen_mode VARCHAR, Accreditation_type VARCHAR); CREATE TABLE screen_mode (pixels VARCHAR, Graphics_mode VARCHAR)",
        "answer": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
        "db_id": "phone_1"
    },
    {
        "question": "How many countries are there in total?",
        "context": "CREATE TABLE country (Id VARCHAR)",
        "answer": "SELECT count(*) FROM country",
        "db_id": "match_season"
    },
    {
        "question": "Show the country name and capital of all countries.",
        "context": "CREATE TABLE country (Country_name VARCHAR, Capital VARCHAR)",
        "answer": "SELECT Country_name ,  Capital FROM country",
        "db_id": "match_season"
    },
    {
        "question": "Show all official native languages that contain the word \"English\".",
        "context": "CREATE TABLE country (Official_native_language VARCHAR)",
        "answer": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "db_id": "match_season"
    },
    {
        "question": "Show all distinct positions of matches.",
        "context": "CREATE TABLE match_season (POSITION VARCHAR)",
        "answer": "SELECT DISTINCT POSITION FROM match_season",
        "db_id": "match_season"
    },
    {
        "question": "Show the players from college UCLA.",
        "context": "CREATE TABLE match_season (Player VARCHAR, College VARCHAR)",
        "answer": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
        "db_id": "match_season"
    },
    {
        "question": "Show the distinct position of players from college UCLA or Duke.",
        "context": "CREATE TABLE match_season (POSITION VARCHAR, College VARCHAR)",
        "answer": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "db_id": "match_season"
    },
    {
        "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.",
        "context": "CREATE TABLE match_season (Draft_Pick_Number VARCHAR, Draft_Class VARCHAR, POSITION VARCHAR)",
        "answer": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "db_id": "match_season"
    },
    {
        "question": "How many distinct teams are involved in match seasons?",
        "context": "CREATE TABLE match_season (Team VARCHAR)",
        "answer": "SELECT count(DISTINCT Team) FROM match_season",
        "db_id": "match_season"
    },
    {
        "question": "Show the players and the years played.",
        "context": "CREATE TABLE player (Player VARCHAR, Years_Played VARCHAR)",
        "answer": "SELECT Player ,  Years_Played FROM player",
        "db_id": "match_season"
    },
    {
        "question": "Show all team names.",
        "context": "CREATE TABLE Team (Name VARCHAR)",
        "answer": "SELECT Name FROM Team",
        "db_id": "match_season"
    },
    {
        "question": "Show the season, the player, and the name of the country that player belongs to.",
        "context": "CREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Country VARCHAR); CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR)",
        "answer": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "db_id": "match_season"
    },
    {
        "question": "Which players are from Indonesia?",
        "context": "CREATE TABLE country (Country_id VARCHAR, Country_name VARCHAR); CREATE TABLE match_season (Player VARCHAR, Country VARCHAR)",
        "answer": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"",
        "db_id": "match_season"
    },
    {
        "question": "What are the distinct positions of the players from a country whose capital is Dublin?",
        "context": "CREATE TABLE country (Country_id VARCHAR, Capital VARCHAR); CREATE TABLE match_season (Position VARCHAR, Country VARCHAR)",
        "answer": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
        "db_id": "match_season"
    },
    {
        "question": "What are the official languages of the countries of players from Maryland or Duke college?",
        "context": "CREATE TABLE country (Official_native_language VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, College VARCHAR)",
        "answer": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "db_id": "match_season"
    },
    {
        "question": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "context": "CREATE TABLE country (Official_native_language VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, Position VARCHAR)",
        "answer": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "db_id": "match_season"
    },
    {
        "question": "Show the season, the player, and the name of the team that players belong to.",
        "context": "CREATE TABLE team (Name VARCHAR, Team_id VARCHAR); CREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Team VARCHAR)",
        "answer": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "db_id": "match_season"
    },
    {
        "question": "Show the positions of the players from the team with name \"Ryley Goldner\".",
        "context": "CREATE TABLE match_season (Position VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)",
        "answer": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"",
        "db_id": "match_season"
    },
    {
        "question": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".",
        "context": "CREATE TABLE match_season (College VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)",
        "answer": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "db_id": "match_season"
    },
    {
        "question": "Show the players and years played for players from team \"Columbus Crew\".",
        "context": "CREATE TABLE player (Player VARCHAR, Years_Played VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)",
        "answer": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "db_id": "match_season"
    },
    {
        "question": "Show the position of players and the corresponding number of players.",
        "context": "CREATE TABLE match_season (POSITION VARCHAR)",
        "answer": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
        "db_id": "match_season"
    },
    {
        "question": "Show the country names and the corresponding number of players.",
        "context": "CREATE TABLE match_season (Country VARCHAR); CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR)",
        "answer": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "db_id": "match_season"
    },
    {
        "question": "Return all players sorted by college in ascending alphabetical order.",
        "context": "CREATE TABLE match_season (player VARCHAR, College VARCHAR)",
        "answer": "SELECT player FROM match_season ORDER BY College ASC",
        "db_id": "match_season"
    },
    {
        "question": "Show the most common position of players in match seasons.",
        "context": "CREATE TABLE match_season (POSITION VARCHAR)",
        "answer": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
        "db_id": "match_season"
    },
    {
        "question": "Show the top 3 most common colleges of players in match seasons.",
        "context": "CREATE TABLE match_season (College VARCHAR)",
        "answer": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "db_id": "match_season"
    },
    {
        "question": "Show the name of colleges that have at least two players.",
        "context": "CREATE TABLE match_season (College VARCHAR)",
        "answer": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
        "db_id": "match_season"
    },
    {
        "question": "Show the name of colleges that have at least two players in descending alphabetical order.",
        "context": "CREATE TABLE match_season (College VARCHAR)",
        "answer": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "db_id": "match_season"
    },
    {
        "question": "What are the names of teams that do no have match season record?",
        "context": "CREATE TABLE match_season (Name VARCHAR, Team_id VARCHAR, Team VARCHAR); CREATE TABLE team (Name VARCHAR, Team_id VARCHAR, Team VARCHAR)",
        "answer": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "db_id": "match_season"
    },
    {
        "question": "What are the names of countries that have both players with position forward and players with position defender?",
        "context": "CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, Position VARCHAR)",
        "answer": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "db_id": "match_season"
    },
    {
        "question": "Which college have both players with position midfielder and players with position defender?",
        "context": "CREATE TABLE match_season (College VARCHAR, POSITION VARCHAR)",
        "answer": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
        "db_id": "match_season"
    },
    {
        "question": "How many climbers are there?",
        "context": "CREATE TABLE climber (Id VARCHAR)",
        "answer": "SELECT count(*) FROM climber",
        "db_id": "climbing"
    },
    {
        "question": "List the names of climbers in descending order of points.",
        "context": "CREATE TABLE climber (Name VARCHAR, Points VARCHAR)",
        "answer": "SELECT Name FROM climber ORDER BY Points DESC",
        "db_id": "climbing"
    },
    {
        "question": "List the names of climbers whose country is not Switzerland.",
        "context": "CREATE TABLE climber (Name VARCHAR, Country VARCHAR)",
        "answer": "SELECT Name FROM climber WHERE Country != \"Switzerland\"",
        "db_id": "climbing"
    },
    {
        "question": "What is the maximum point for climbers whose country is United Kingdom?",
        "context": "CREATE TABLE climber (Points INTEGER, Country VARCHAR)",
        "answer": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
        "db_id": "climbing"
    },
    {
        "question": "How many distinct countries are the climbers from?",
        "context": "CREATE TABLE climber (Country VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT Country) FROM climber",
        "db_id": "climbing"
    },
    {
        "question": "What are the names of mountains in ascending alphabetical order?",
        "context": "CREATE TABLE mountain (Name VARCHAR)",
        "answer": "SELECT Name FROM mountain ORDER BY Name ASC",
        "db_id": "climbing"
    },
    {
        "question": "What are the countries of mountains with height bigger than 5000?",
        "context": "CREATE TABLE mountain (Country VARCHAR, Height INTEGER)",
        "answer": "SELECT Country FROM mountain WHERE Height  >  5000",
        "db_id": "climbing"
    },
    {
        "question": "What is the name of the highest mountain?",
        "context": "CREATE TABLE mountain (Name VARCHAR, Height VARCHAR)",
        "answer": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
        "db_id": "climbing"
    },
    {
        "question": "List the distinct ranges of the mountains with the top 3 prominence.",
        "context": "CREATE TABLE mountain (Range VARCHAR, Prominence VARCHAR)",
        "answer": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
        "db_id": "climbing"
    },
    {
        "question": "Show names of climbers and the names of mountains they climb.",
        "context": "CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)",
        "answer": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
        "db_id": "climbing"
    },
    {
        "question": "Show the names of climbers and the heights of mountains they climb.",
        "context": "CREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)",
        "answer": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
        "db_id": "climbing"
    },
    {
        "question": "Show the height of the mountain climbed by the climber with the maximum points.",
        "context": "CREATE TABLE climber (Mountain_ID VARCHAR, Points VARCHAR); CREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR)",
        "answer": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1",
        "db_id": "climbing"
    },
    {
        "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
        "context": "CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Mountain_ID VARCHAR, Country VARCHAR)",
        "answer": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "db_id": "climbing"
    },
    {
        "question": "Show the times used by climbers to climb mountains in Country Uganda.",
        "context": "CREATE TABLE mountain (Mountain_ID VARCHAR, Country VARCHAR); CREATE TABLE climber (Time VARCHAR, Mountain_ID VARCHAR)",
        "answer": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
        "db_id": "climbing"
    },
    {
        "question": "Please show the countries and the number of climbers from each country.",
        "context": "CREATE TABLE climber (Country VARCHAR)",
        "answer": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",
        "db_id": "climbing"
    },
    {
        "question": "List the countries that have more than one mountain.",
        "context": "CREATE TABLE mountain (Country VARCHAR)",
        "answer": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1",
        "db_id": "climbing"
    },
    {
        "question": "List the names of mountains that do not have any climber.",
        "context": "CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)",
        "answer": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "db_id": "climbing"
    },
    {
        "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
        "context": "CREATE TABLE mountain (Country VARCHAR, Height INTEGER)",
        "answer": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
        "db_id": "climbing"
    },
    {
        "question": "Show the range that has the most number of mountains.",
        "context": "CREATE TABLE mountain (Range VARCHAR)",
        "answer": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "climbing"
    },
    {
        "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
        "context": "CREATE TABLE mountain (Name VARCHAR, Height VARCHAR, Prominence VARCHAR)",
        "answer": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000",
        "db_id": "climbing"
    },
    {
        "question": "How many body builders are there?",
        "context": "CREATE TABLE body_builder (Id VARCHAR)",
        "answer": "SELECT count(*) FROM body_builder",
        "db_id": "body_builder"
    },
    {
        "question": "List the total scores of body builders in ascending order.",
        "context": "CREATE TABLE body_builder (Total VARCHAR)",
        "answer": "SELECT Total FROM body_builder ORDER BY Total ASC",
        "db_id": "body_builder"
    },
    {
        "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
        "context": "CREATE TABLE body_builder (Snatch VARCHAR, Clean_Jerk VARCHAR)",
        "answer": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "db_id": "body_builder"
    },
    {
        "question": "What is the average snatch score of body builders?",
        "context": "CREATE TABLE body_builder (Snatch INTEGER)",
        "answer": "SELECT avg(Snatch) FROM body_builder",
        "db_id": "body_builder"
    },
    {
        "question": "What are the clean and jerk score of the body builder with the highest total score?",
        "context": "CREATE TABLE body_builder (Clean_Jerk VARCHAR, Total VARCHAR)",
        "answer": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "db_id": "body_builder"
    },
    {
        "question": "What are the birthdays of people in ascending order of height?",
        "context": "CREATE TABLE People (Birth_Date VARCHAR, Height VARCHAR)",
        "answer": "SELECT Birth_Date FROM People ORDER BY Height ASC",
        "db_id": "body_builder"
    },
    {
        "question": "What are the names of body builders?",
        "context": "CREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "db_id": "body_builder"
    },
    {
        "question": "What are the names of body builders whose total score is higher than 300?",
        "context": "CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE body_builder (People_ID VARCHAR, Total INTEGER)",
        "answer": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300",
        "db_id": "body_builder"
    },
    {
        "question": "What is the name of the body builder with the greatest body weight?",
        "context": "CREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR)",
        "answer": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "db_id": "body_builder"
    },
    {
        "question": "What are the birth date and birth place of the body builder with the highest total points?",
        "context": "CREATE TABLE body_builder (People_ID VARCHAR, Total VARCHAR); CREATE TABLE people (Birth_Date VARCHAR, Birth_Place VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1",
        "db_id": "body_builder"
    },
    {
        "question": "What are the heights of body builders with total score smaller than 315?",
        "context": "CREATE TABLE people (Height VARCHAR, People_ID VARCHAR); CREATE TABLE body_builder (People_ID VARCHAR, Total INTEGER)",
        "answer": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315",
        "db_id": "body_builder"
    },
    {
        "question": "What is the average total score of body builders with height bigger than 200?",
        "context": "CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE body_builder (Total INTEGER, People_ID VARCHAR)",
        "answer": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200",
        "db_id": "body_builder"
    },
    {
        "question": "What are the names of body builders in descending order of total scores?",
        "context": "CREATE TABLE body_builder (People_ID VARCHAR, Total VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC",
        "db_id": "body_builder"
    },
    {
        "question": "List each birth place along with the number of people from there.",
        "context": "CREATE TABLE people (Birth_Place VARCHAR)",
        "answer": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place",
        "db_id": "body_builder"
    },
    {
        "question": "What is the most common birth place of people?",
        "context": "CREATE TABLE people (Birth_Place VARCHAR)",
        "answer": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "body_builder"
    },
    {
        "question": "What are the birth places that are shared by at least two people?",
        "context": "CREATE TABLE people (Birth_Place VARCHAR)",
        "answer": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2",
        "db_id": "body_builder"
    },
    {
        "question": "List the height and weight of people in descending order of height.",
        "context": "CREATE TABLE people (Height VARCHAR, Weight VARCHAR)",
        "answer": "SELECT Height ,  Weight FROM people ORDER BY Height DESC",
        "db_id": "body_builder"
    },
    {
        "question": "Show all information about each body builder.",
        "context": "CREATE TABLE body_builder (Id VARCHAR)",
        "answer": "SELECT * FROM body_builder",
        "db_id": "body_builder"
    },
    {
        "question": "List the names and origins of people who are not body builders.",
        "context": "CREATE TABLE people (Name VARCHAR, birth_place VARCHAR, people_id VARCHAR); CREATE TABLE body_builder (people_id VARCHAR); CREATE TABLE people (Name VARCHAR, birth_place VARCHAR)",
        "answer": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",
        "db_id": "body_builder"
    },
    {
        "question": "How many distinct birth places are there?",
        "context": "CREATE TABLE people (Birth_Place VARCHAR)",
        "answer": "SELECT count(DISTINCT Birth_Place) FROM people",
        "db_id": "body_builder"
    },
    {
        "question": "How many persons are not body builders?",
        "context": "CREATE TABLE body_builder (people_id VARCHAR, People_ID VARCHAR); CREATE TABLE people (people_id VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)",
        "db_id": "body_builder"
    },
    {
        "question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.",
        "context": "CREATE TABLE people (weight VARCHAR, people_id VARCHAR, height VARCHAR); CREATE TABLE body_builder (people_id VARCHAR, snatch VARCHAR)",
        "answer": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;",
        "db_id": "body_builder"
    },
    {
        "question": "What are the total scores of the body builders whose birthday contains the string \"January\" ?",
        "context": "CREATE TABLE people (people_id VARCHAR, Birth_Date VARCHAR); CREATE TABLE body_builder (total VARCHAR, people_id VARCHAR)",
        "answer": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";",
        "db_id": "body_builder"
    },
    {
        "question": "What is the minimum snatch score?",
        "context": "CREATE TABLE body_builder (snatch INTEGER)",
        "answer": "SELECT min(snatch) FROM body_builder",
        "db_id": "body_builder"
    },
    {
        "question": "How many elections are there?",
        "context": "CREATE TABLE election (Id VARCHAR)",
        "answer": "SELECT count(*) FROM election",
        "db_id": "election_representative"
    },
    {
        "question": "List the votes of elections in descending order.",
        "context": "CREATE TABLE election (Votes VARCHAR)",
        "answer": "SELECT Votes FROM election ORDER BY Votes DESC",
        "db_id": "election_representative"
    },
    {
        "question": "List the dates and vote percents of elections.",
        "context": "CREATE TABLE election (Date VARCHAR, Vote_Percent VARCHAR)",
        "answer": "SELECT Date ,  Vote_Percent FROM election",
        "db_id": "election_representative"
    },
    {
        "question": "What are the minimum and maximum vote percents of elections?",
        "context": "CREATE TABLE election (Vote_Percent INTEGER)",
        "answer": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",
        "db_id": "election_representative"
    },
    {
        "question": "What are the names and parties of representatives?",
        "context": "CREATE TABLE representative (Name VARCHAR, Party VARCHAR)",
        "answer": "SELECT Name ,  Party FROM representative",
        "db_id": "election_representative"
    },
    {
        "question": "What are the names of representatives whose party is not \"Republican\"?",
        "context": "CREATE TABLE Representative (Name VARCHAR, Party VARCHAR)",
        "answer": "SELECT Name FROM Representative WHERE Party != \"Republican\"",
        "db_id": "election_representative"
    },
    {
        "question": "What are the life spans of representatives from New York state or Indiana state?",
        "context": "CREATE TABLE representative (Lifespan VARCHAR, State VARCHAR)",
        "answer": "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"",
        "db_id": "election_representative"
    },
    {
        "question": "What are the names of representatives and the dates of elections they participated in.",
        "context": "CREATE TABLE election (Date VARCHAR, Representative_ID VARCHAR); CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID",
        "db_id": "election_representative"
    },
    {
        "question": "What are the names of representatives with more than 10000 votes in election?",
        "context": "CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000",
        "db_id": "election_representative"
    },
    {
        "question": "What are the names of representatives in descending order of votes?",
        "context": "CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC",
        "db_id": "election_representative"
    },
    {
        "question": "What is the party of the representative that has the smallest number of votes.",
        "context": "CREATE TABLE representative (Party VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)",
        "answer": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1",
        "db_id": "election_representative"
    },
    {
        "question": "What are the lifespans of representatives in descending order of vote percent?",
        "context": "CREATE TABLE election (Representative_ID VARCHAR); CREATE TABLE representative (Lifespan VARCHAR, Representative_ID VARCHAR)",
        "answer": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC",
        "db_id": "election_representative"
    },
    {
        "question": "What is the average number of votes of representatives from party \"Republican\"?",
        "context": "CREATE TABLE election (Votes INTEGER, Representative_ID VARCHAR); CREATE TABLE representative (Representative_ID VARCHAR, Party VARCHAR)",
        "answer": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"",
        "db_id": "election_representative"
    },
    {
        "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.",
        "context": "CREATE TABLE representative (Party VARCHAR)",
        "answer": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party",
        "db_id": "election_representative"
    },
    {
        "question": "What is the party that has the largest number of representatives?",
        "context": "CREATE TABLE representative (Party VARCHAR)",
        "answer": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "election_representative"
    },
    {
        "question": "What parties have at least three representatives?",
        "context": "CREATE TABLE representative (Party VARCHAR)",
        "answer": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3",
        "db_id": "election_representative"
    },
    {
        "question": "What states have at least two representatives?",
        "context": "CREATE TABLE representative (State VARCHAR)",
        "answer": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
        "db_id": "election_representative"
    },
    {
        "question": "List the names of representatives that have not participated in elections listed here.",
        "context": "CREATE TABLE election (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR)",
        "answer": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
        "db_id": "election_representative"
    },
    {
        "question": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.",
        "context": "CREATE TABLE representative (Party VARCHAR, State VARCHAR)",
        "answer": "SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\"",
        "db_id": "election_representative"
    },
    {
        "question": "How many distinct parties are there for representatives?",
        "context": "CREATE TABLE representative (Party VARCHAR)",
        "answer": "SELECT count(DISTINCT Party) FROM representative",
        "db_id": "election_representative"
    },
    {
        "question": "How many apartment bookings are there in total?",
        "context": "CREATE TABLE Apartment_Bookings (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Apartment_Bookings",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the start dates and end dates of all the apartment bookings.",
        "context": "CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, booking_end_date VARCHAR)",
        "answer": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show all distinct building descriptions.",
        "context": "CREATE TABLE Apartment_Buildings (building_description VARCHAR)",
        "answer": "SELECT DISTINCT building_description FROM Apartment_Buildings",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the short names of the buildings managed by \"Emma\".",
        "context": "CREATE TABLE Apartment_Buildings (building_short_name VARCHAR, building_manager VARCHAR)",
        "answer": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the addresses and phones of all the buildings managed by \"Brenden\".",
        "context": "CREATE TABLE Apartment_Buildings (building_address VARCHAR, building_phone VARCHAR, building_manager VARCHAR)",
        "answer": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "What are the building full names that contain the word \"court\"?",
        "context": "CREATE TABLE Apartment_Buildings (building_full_name VARCHAR)",
        "answer": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "context": "CREATE TABLE Apartments (bathroom_count INTEGER)",
        "answer": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
        "db_id": "apartment_rentals"
    },
    {
        "question": "What is the average number of bedrooms of all apartments?",
        "context": "CREATE TABLE Apartments (bedroom_count INTEGER)",
        "answer": "SELECT avg(bedroom_count) FROM Apartments",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Return the apartment number and the number of rooms for each apartment.",
        "context": "CREATE TABLE Apartments (apt_number VARCHAR, room_count VARCHAR)",
        "answer": "SELECT apt_number ,  room_count FROM Apartments",
        "db_id": "apartment_rentals"
    },
    {
        "question": "What is the average number of rooms of apartments with type code \"Studio\"?",
        "context": "CREATE TABLE Apartments (room_count INTEGER, apt_type_code VARCHAR)",
        "answer": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Return the apartment numbers of the apartments with type code \"Flat\".",
        "context": "CREATE TABLE Apartments (apt_number VARCHAR, apt_type_code VARCHAR)",
        "answer": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Return the first names and last names of all guests",
        "context": "CREATE TABLE Guests (guest_first_name VARCHAR, guest_last_name VARCHAR)",
        "answer": "SELECT guest_first_name ,  guest_last_name FROM Guests",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Return the date of birth for all the guests with gender code \"Male\".",
        "context": "CREATE TABLE Guests (date_of_birth VARCHAR, gender_code VARCHAR)",
        "answer": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.",
        "context": "CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR)",
        "answer": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
        "db_id": "apartment_rentals"
    },
    {
        "question": "What are the booking start and end dates of the apartments with type code \"Duplex\"?",
        "context": "CREATE TABLE Apartments (apt_id VARCHAR, apt_type_code VARCHAR); CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR)",
        "answer": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
        "context": "CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR, bedroom_count INTEGER)",
        "answer": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
        "db_id": "apartment_rentals"
    },
    {
        "question": "What is the booking status code of the apartment with apartment number \"Suite 634\"?",
        "context": "CREATE TABLE Apartments (apt_id VARCHAR, apt_number VARCHAR); CREATE TABLE Apartment_Bookings (booking_status_code VARCHAR, apt_id VARCHAR)",
        "answer": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".",
        "context": "CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR); CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR)",
        "answer": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the average room count of the apartments that have booking status code \"Provisional\".",
        "context": "CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR)",
        "answer": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the guest first names, start dates, and end dates of all the apartment bookings.",
        "context": "CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, guest_id VARCHAR); CREATE TABLE Guests (guest_first_name VARCHAR, guest_id VARCHAR)",
        "answer": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".",
        "context": "CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, guest_id VARCHAR); CREATE TABLE Guests (guest_id VARCHAR, gender_code VARCHAR)",
        "answer": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".",
        "context": "CREATE TABLE Apartment_Bookings (guest_id VARCHAR, booking_status_code VARCHAR); CREATE TABLE Guests (guest_first_name VARCHAR, guest_last_name VARCHAR, guest_id VARCHAR)",
        "answer": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the facility codes of apartments with more than 4 bedrooms.",
        "context": "CREATE TABLE Apartment_Facilities (facility_code VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR, bedroom_count INTEGER)",
        "answer": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the total number of rooms of all apartments with facility code \"Gym\".",
        "context": "CREATE TABLE Apartments (room_count INTEGER, apt_id VARCHAR); CREATE TABLE Apartment_Facilities (apt_id VARCHAR, facility_code VARCHAR)",
        "answer": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "context": "CREATE TABLE Apartment_Buildings (building_id VARCHAR, building_short_name VARCHAR); CREATE TABLE Apartments (room_count INTEGER, building_id VARCHAR)",
        "answer": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "context": "CREATE TABLE Apartment_Buildings (building_address VARCHAR, building_id VARCHAR); CREATE TABLE Apartments (building_id VARCHAR, bathroom_count INTEGER)",
        "answer": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".",
        "context": "CREATE TABLE Apartment_Buildings (building_id VARCHAR, building_manager VARCHAR); CREATE TABLE Apartments (apt_type_code VARCHAR, apt_number VARCHAR, building_id VARCHAR)",
        "answer": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the booking status code and the corresponding number of bookings.",
        "context": "CREATE TABLE Apartment_Bookings (booking_status_code VARCHAR)",
        "answer": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "context": "CREATE TABLE Apartments (apt_number VARCHAR, room_count VARCHAR)",
        "answer": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Return the apartment number with the largest number of bedrooms.",
        "context": "CREATE TABLE Apartments (apt_number VARCHAR, bedroom_count VARCHAR)",
        "answer": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.",
        "context": "CREATE TABLE Apartments (apt_type_code VARCHAR)",
        "answer": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
        "context": "CREATE TABLE Apartments (apt_type_code VARCHAR, room_count INTEGER)",
        "answer": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.",
        "context": "CREATE TABLE Apartments (apt_type_code VARCHAR, bathroom_count VARCHAR, bedroom_count VARCHAR, room_count INTEGER)",
        "answer": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the most common apartment type code.",
        "context": "CREATE TABLE Apartments (apt_type_code VARCHAR)",
        "answer": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the most common apartment type code among apartments with more than 1 bathroom.",
        "context": "CREATE TABLE Apartments (apt_type_code VARCHAR, bathroom_count INTEGER)",
        "answer": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
        "context": "CREATE TABLE Apartments (apt_type_code VARCHAR, room_count INTEGER)",
        "answer": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.",
        "context": "CREATE TABLE Guests (gender_code VARCHAR)",
        "answer": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
        "db_id": "apartment_rentals"
    },
    {
        "question": "How many apartments do not have any facility?",
        "context": "CREATE TABLE Apartment_Facilities (apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR)",
        "answer": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"",
        "context": "CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR); CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR)",
        "answer": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "db_id": "apartment_rentals"
    },
    {
        "question": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.",
        "context": "CREATE TABLE View_Unit_Status (apt_id VARCHAR, available_yn VARCHAR); CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR)",
        "answer": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1",
        "db_id": "apartment_rentals"
    },
    {
        "question": "How many games are held after season 2007?",
        "context": "CREATE TABLE game (season INTEGER)",
        "answer": "SELECT count(*) FROM game WHERE season  >  2007",
        "db_id": "game_injury"
    },
    {
        "question": "List the dates of games by the home team name in descending order.",
        "context": "CREATE TABLE game (Date VARCHAR, home_team VARCHAR)",
        "answer": "SELECT Date FROM game ORDER BY home_team DESC",
        "db_id": "game_injury"
    },
    {
        "question": "List the season, home team, away team of all the games.",
        "context": "CREATE TABLE game (season VARCHAR, home_team VARCHAR, away_team VARCHAR)",
        "answer": "SELECT season ,  home_team ,  away_team FROM game",
        "db_id": "game_injury"
    },
    {
        "question": "What are the maximum, minimum and average home games each stadium held?",
        "context": "CREATE TABLE stadium (home_games INTEGER)",
        "answer": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium",
        "db_id": "game_injury"
    },
    {
        "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?",
        "context": "CREATE TABLE stadium (average_attendance VARCHAR, capacity_percentage INTEGER)",
        "answer": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100",
        "db_id": "game_injury"
    },
    {
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "context": "CREATE TABLE injury_accident (player VARCHAR, number_of_matches VARCHAR, SOURCE VARCHAR, injury VARCHAR)",
        "answer": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
        "db_id": "game_injury"
    },
    {
        "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "context": "CREATE TABLE injury_accident (game_id VARCHAR, player VARCHAR); CREATE TABLE game (season VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'",
        "db_id": "game_injury"
    },
    {
        "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "context": "CREATE TABLE game (id VARCHAR, score VARCHAR, date VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR)",
        "answer": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "db_id": "game_injury"
    },
    {
        "question": "What are the id and name of the stadium where the most injury accidents happened?",
        "context": "CREATE TABLE stadium (id VARCHAR, name VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "game_injury"
    },
    {
        "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "context": "CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR, injury VARCHAR); CREATE TABLE game (season VARCHAR, stadium_id VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'",
        "db_id": "game_injury"
    },
    {
        "question": "How many different kinds of information sources are there for injury accidents?",
        "context": "CREATE TABLE injury_accident (SOURCE VARCHAR)",
        "answer": "SELECT count(DISTINCT SOURCE) FROM injury_accident",
        "db_id": "game_injury"
    },
    {
        "question": "How many games are free of injury accidents?",
        "context": "CREATE TABLE injury_accident (id VARCHAR, game_id VARCHAR); CREATE TABLE game (id VARCHAR, game_id VARCHAR)",
        "answer": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "db_id": "game_injury"
    },
    {
        "question": "How many distinct kinds of injuries happened after season 2010?",
        "context": "CREATE TABLE injury_accident (injury VARCHAR, game_id VARCHAR); CREATE TABLE game (id VARCHAR, season INTEGER)",
        "answer": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010",
        "db_id": "game_injury"
    },
    {
        "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
        "context": "CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR, player VARCHAR)",
        "answer": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
        "db_id": "game_injury"
    },
    {
        "question": "Show the name, average attendance, total attendance for stadiums where no accidents happened.",
        "context": "CREATE TABLE stadium (name VARCHAR, average_attendance VARCHAR, total_attendance VARCHAR, id VARCHAR); CREATE TABLE stadium (name VARCHAR, average_attendance VARCHAR, total_attendance VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR)",
        "answer": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id",
        "db_id": "game_injury"
    },
    {
        "question": "Which stadium name contains the substring \"Bank\"?",
        "context": "CREATE TABLE stadium (name VARCHAR)",
        "answer": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"",
        "db_id": "game_injury"
    },
    {
        "question": "How many games has each stadium held?",
        "context": "CREATE TABLE stadium (id VARCHAR); CREATE TABLE game (stadium_id VARCHAR)",
        "answer": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id",
        "db_id": "game_injury"
    },
    {
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "context": "CREATE TABLE game (date VARCHAR, id VARCHAR, season VARCHAR); CREATE TABLE injury_accident (player VARCHAR, game_id VARCHAR)",
        "answer": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "db_id": "game_injury"
    },
    {
        "question": "List all country and league names.",
        "context": "CREATE TABLE League (name VARCHAR, country_id VARCHAR); CREATE TABLE Country (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",
        "db_id": "soccer_1"
    },
    {
        "question": "How many leagues are there in England?",
        "context": "CREATE TABLE League (country_id VARCHAR); CREATE TABLE Country (id VARCHAR, name VARCHAR)",
        "answer": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
        "db_id": "soccer_1"
    },
    {
        "question": "What is the average weight of all players?",
        "context": "CREATE TABLE Player (weight INTEGER)",
        "answer": "SELECT avg(weight) FROM Player",
        "db_id": "soccer_1"
    },
    {
        "question": "What is the maximum and minimum height of all players?",
        "context": "CREATE TABLE Player (weight INTEGER)",
        "answer": "SELECT max(weight) ,  min(weight) FROM Player",
        "db_id": "soccer_1"
    },
    {
        "question": "List all player names who have an overall rating higher than the average.",
        "context": "CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (overall_rating INTEGER); CREATE TABLE Player_Attributes (player_api_id VARCHAR, overall_rating INTEGER)",
        "answer": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )",
        "db_id": "soccer_1"
    },
    {
        "question": "What are the names of players who have the best dribbling?",
        "context": "CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, dribbling VARCHAR); CREATE TABLE Player_Attributes (overall_rating INTEGER)",
        "answer": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)",
        "db_id": "soccer_1"
    },
    {
        "question": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.",
        "context": "CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, crossing VARCHAR, preferred_foot VARCHAR)",
        "answer": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"",
        "db_id": "soccer_1"
    },
    {
        "question": "List the names of all left-footed players who have overall rating between 85 and 90.",
        "context": "CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, overall_rating VARCHAR, preferred_foot VARCHAR)",
        "answer": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90",
        "db_id": "soccer_1"
    },
    {
        "question": "What is the average rating for right-footed players and left-footed players?",
        "context": "CREATE TABLE Player_Attributes (preferred_foot VARCHAR, overall_rating INTEGER)",
        "answer": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
        "db_id": "soccer_1"
    },
    {
        "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "context": "CREATE TABLE Player_Attributes (preferred_foot VARCHAR, overall_rating INTEGER)",
        "answer": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
        "db_id": "soccer_1"
    },
    {
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "context": "CREATE TABLE Player_Attributes (player_api_id VARCHAR, height VARCHAR, overall_rating INTEGER); CREATE TABLE Player (player_api_id VARCHAR, height VARCHAR, overall_rating INTEGER)",
        "answer": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "db_id": "soccer_1"
    },
    {
        "question": "List all of the ids for left-footed players with a height between 180cm and 190cm.",
        "context": "CREATE TABLE Player_Attributes (player_api_id VARCHAR, preferred_foot VARCHAR, height VARCHAR); CREATE TABLE Player (player_api_id VARCHAR, preferred_foot VARCHAR, height VARCHAR)",
        "answer": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"",
        "db_id": "soccer_1"
    },
    {
        "question": "Who are the top 3 players in terms of overall rating?",
        "context": "CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
        "db_id": "soccer_1"
    },
    {
        "question": "List the names and birthdays of the top five players in terms of potential.",
        "context": "CREATE TABLE Player_Attributes (player_api_id VARCHAR); CREATE TABLE Player (player_name VARCHAR, birthday VARCHAR, player_api_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5",
        "db_id": "soccer_1"
    },
    {
        "question": "How many performances are there?",
        "context": "CREATE TABLE performance (Id VARCHAR)",
        "answer": "SELECT count(*) FROM performance",
        "db_id": "performance_attendance"
    },
    {
        "question": "List the hosts of performances in ascending order of attendance.",
        "context": "CREATE TABLE performance (HOST VARCHAR, Attendance VARCHAR)",
        "answer": "SELECT HOST FROM performance ORDER BY Attendance ASC",
        "db_id": "performance_attendance"
    },
    {
        "question": "What are the dates and locations of performances?",
        "context": "CREATE TABLE performance (Date VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT Date ,  LOCATION FROM performance",
        "db_id": "performance_attendance"
    },
    {
        "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"",
        "context": "CREATE TABLE performance (Attendance VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\"",
        "db_id": "performance_attendance"
    },
    {
        "question": "What is the average number of attendees for performances?",
        "context": "CREATE TABLE performance (Attendance INTEGER)",
        "answer": "SELECT avg(Attendance) FROM performance",
        "db_id": "performance_attendance"
    },
    {
        "question": "What is the date of the performance with the highest number of attendees?",
        "context": "CREATE TABLE performance (Date VARCHAR, Attendance VARCHAR)",
        "answer": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1",
        "db_id": "performance_attendance"
    },
    {
        "question": "Show different locations and the number of performances at each location.",
        "context": "CREATE TABLE performance (LOCATION VARCHAR)",
        "answer": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION",
        "db_id": "performance_attendance"
    },
    {
        "question": "Show the most common location of performances.",
        "context": "CREATE TABLE performance (LOCATION VARCHAR)",
        "answer": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "performance_attendance"
    },
    {
        "question": "Show the locations that have at least two performances.",
        "context": "CREATE TABLE performance (LOCATION VARCHAR)",
        "answer": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2",
        "db_id": "performance_attendance"
    },
    {
        "question": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.",
        "context": "CREATE TABLE performance (LOCATION VARCHAR, Attendance INTEGER)",
        "answer": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000",
        "db_id": "performance_attendance"
    },
    {
        "question": "Show the names of members and the location of the performances they attended.",
        "context": "CREATE TABLE performance (Location VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID",
        "db_id": "performance_attendance"
    },
    {
        "question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.",
        "context": "CREATE TABLE performance (Location VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",
        "db_id": "performance_attendance"
    },
    {
        "question": "Show the dates of performances with attending members whose roles are \"Violin\".",
        "context": "CREATE TABLE performance (Date VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Member_ID VARCHAR, Role VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)",
        "answer": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\"",
        "db_id": "performance_attendance"
    },
    {
        "question": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.",
        "context": "CREATE TABLE performance (Date VARCHAR, Performance_ID VARCHAR, Attendance VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC",
        "db_id": "performance_attendance"
    },
    {
        "question": "List the names of members who did not attend any performance.",
        "context": "CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Name VARCHAR, Member_ID VARCHAR)",
        "answer": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)",
        "db_id": "performance_attendance"
    },
    {
        "question": "Find the buildings which have rooms with capacity more than 50.",
        "context": "CREATE TABLE classroom (building VARCHAR, capacity INTEGER)",
        "answer": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
        "db_id": "college_2"
    },
    {
        "question": "Count the number of rooms that are not in the Lamberton building.",
        "context": "CREATE TABLE classroom (building VARCHAR)",
        "answer": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'",
        "db_id": "college_2"
    },
    {
        "question": "What is the name and building of the departments whose budget is more than the average budget?",
        "context": "CREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget INTEGER)",
        "answer": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "db_id": "college_2"
    },
    {
        "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
        "context": "CREATE TABLE classroom (building VARCHAR, room_number VARCHAR, capacity INTEGER)",
        "answer": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "db_id": "college_2"
    },
    {
        "question": "Find the name and building of the department with the highest budget.",
        "context": "CREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget VARCHAR)",
        "answer": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "What is the name of the student who has the highest total credits in the History department.",
        "context": "CREATE TABLE student (name VARCHAR, dept_name VARCHAR, tot_cred VARCHAR)",
        "answer": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "How many rooms does the Lamberton building have?",
        "context": "CREATE TABLE classroom (building VARCHAR)",
        "answer": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
        "db_id": "college_2"
    },
    {
        "question": "How many students have advisors?",
        "context": "CREATE TABLE advisor (s_id VARCHAR)",
        "answer": "SELECT count(DISTINCT s_id) FROM advisor",
        "db_id": "college_2"
    },
    {
        "question": "How many departments offer courses?",
        "context": "CREATE TABLE course (dept_name VARCHAR)",
        "answer": "SELECT count(DISTINCT dept_name) FROM course",
        "db_id": "college_2"
    },
    {
        "question": "How many different courses offered by Physics department?",
        "context": "CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR)",
        "answer": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "db_id": "college_2"
    },
    {
        "question": "Find the title of courses that have two prerequisites?",
        "context": "CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR)",
        "answer": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2",
        "db_id": "college_2"
    },
    {
        "question": "Find the title, credit, and department name of courses that have more than one prerequisites?",
        "context": "CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (title VARCHAR, credits VARCHAR, dept_name VARCHAR, course_id VARCHAR)",
        "answer": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "db_id": "college_2"
    },
    {
        "question": "How many courses that do not have prerequisite?",
        "context": "CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (course_id VARCHAR)",
        "answer": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the courses that do not have any prerequisite?",
        "context": "CREATE TABLE prereq (title VARCHAR, course_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR)",
        "answer": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "db_id": "college_2"
    },
    {
        "question": "How many different instructors have taught some course?",
        "context": "CREATE TABLE teaches (id VARCHAR)",
        "answer": "SELECT COUNT (DISTINCT id) FROM teaches",
        "db_id": "college_2"
    },
    {
        "question": "Find the total budgets of the Marketing or Finance department.",
        "context": "CREATE TABLE department (budget INTEGER, dept_name VARCHAR)",
        "answer": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
        "db_id": "college_2"
    },
    {
        "question": "Find the department name of the instructor whose name contains 'Soisalon'.",
        "context": "CREATE TABLE instructor (dept_name VARCHAR, name VARCHAR)",
        "answer": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
        "db_id": "college_2"
    },
    {
        "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
        "context": "CREATE TABLE classroom (building VARCHAR, capacity VARCHAR)",
        "answer": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "db_id": "college_2"
    },
    {
        "question": "Find the name and budget of departments whose budgets are more than the average budget.",
        "context": "CREATE TABLE department (dept_name VARCHAR, budget INTEGER)",
        "answer": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "db_id": "college_2"
    },
    {
        "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
        "context": "CREATE TABLE instructor (name VARCHAR, dept_name VARCHAR, salary VARCHAR)",
        "answer": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "Find the title of course that is provided by both Statistics and Psychology departments.",
        "context": "CREATE TABLE course (title VARCHAR, dept_name VARCHAR)",
        "answer": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "db_id": "college_2"
    },
    {
        "question": "Find the title of course that is provided by Statistics but not Psychology departments.",
        "context": "CREATE TABLE course (title VARCHAR, dept_name VARCHAR)",
        "answer": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "db_id": "college_2"
    },
    {
        "question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.",
        "context": "CREATE TABLE teaches (id VARCHAR, semester VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of students who took any class in the years of 2009 and 2010.",
        "context": "CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE takes (id VARCHAR)",
        "answer": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
        "db_id": "college_2"
    },
    {
        "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
        "context": "CREATE TABLE course (dept_name VARCHAR)",
        "answer": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the department that offers the highest total credits?",
        "context": "CREATE TABLE course (dept_name VARCHAR, credits INTEGER)",
        "answer": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "List the names of all courses ordered by their titles and credits.",
        "context": "CREATE TABLE course (title VARCHAR, credits VARCHAR)",
        "answer": "SELECT title FROM course ORDER BY title ,  credits",
        "db_id": "college_2"
    },
    {
        "question": "Which department has the lowest budget?",
        "context": "CREATE TABLE department (dept_name VARCHAR, budget VARCHAR)",
        "answer": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "List the names and buildings of all departments sorted by the budget from large to small.",
        "context": "CREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget VARCHAR)",
        "answer": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
        "db_id": "college_2"
    },
    {
        "question": "Who is the instructor with the highest salary?",
        "context": "CREATE TABLE instructor (name VARCHAR, salary VARCHAR)",
        "answer": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "List the information of all instructors ordered by their salary in ascending order.",
        "context": "CREATE TABLE instructor (salary VARCHAR)",
        "answer": "SELECT * FROM instructor ORDER BY salary",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the students and their department names sorted by their total credits in ascending order.",
        "context": "CREATE TABLE student (name VARCHAR, dept_name VARCHAR, tot_cred VARCHAR)",
        "answer": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
        "db_id": "college_2"
    },
    {
        "question": "list in alphabetic order all course names and their instructors' names in year 2008.",
        "context": "CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE teaches (course_id VARCHAR, id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of instructors who are advising more than one student.",
        "context": "CREATE TABLE advisor (i_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the students who have more than one advisor?",
        "context": "CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE advisor (s_id VARCHAR)",
        "answer": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
        "db_id": "college_2"
    },
    {
        "question": "Find the number of rooms with more than 50 capacity for each building.",
        "context": "CREATE TABLE classroom (building VARCHAR, capacity INTEGER)",
        "answer": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
        "db_id": "college_2"
    },
    {
        "question": "Find the maximum and average capacity among rooms in each building.",
        "context": "CREATE TABLE classroom (building VARCHAR, capacity INTEGER)",
        "answer": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
        "db_id": "college_2"
    },
    {
        "question": "Find the title of the course that is offered by more than one department.",
        "context": "CREATE TABLE course (title VARCHAR)",
        "answer": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
        "db_id": "college_2"
    },
    {
        "question": "Find the total credits of courses provided by different department.",
        "context": "CREATE TABLE course (dept_name VARCHAR, credits INTEGER)",
        "answer": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "db_id": "college_2"
    },
    {
        "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.",
        "context": "CREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)",
        "answer": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",
        "db_id": "college_2"
    },
    {
        "question": "Find the number of courses provided in each semester and year.",
        "context": "CREATE TABLE SECTION (semester VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "db_id": "college_2"
    },
    {
        "question": "Find the year which offers the largest number of courses.",
        "context": "CREATE TABLE SECTION (YEAR VARCHAR)",
        "answer": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "Find the year and semester when offers the largest number of courses.",
        "context": "CREATE TABLE SECTION (semester VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of department has the highest amount of students?",
        "context": "CREATE TABLE student (dept_name VARCHAR)",
        "answer": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "Find the total number of students in each department.",
        "context": "CREATE TABLE student (dept_name VARCHAR)",
        "answer": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "db_id": "college_2"
    },
    {
        "question": "Find the semester and year which has the least number of student taking any class.",
        "context": "CREATE TABLE takes (semester VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "What is the id of the instructor who advises of all students from History department?",
        "context": "CREATE TABLE advisor (s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)",
        "answer": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "db_id": "college_2"
    },
    {
        "question": "Find the name and salary of the instructors who are advisors of any student from History department?",
        "context": "CREATE TABLE instructor (name VARCHAR, salary VARCHAR, id VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)",
        "answer": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "db_id": "college_2"
    },
    {
        "question": "Find the id of the courses that do not have any prerequisite?",
        "context": "CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (course_id VARCHAR)",
        "answer": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "db_id": "college_2"
    },
    {
        "question": "What is the title of the prerequisite class of International Finance course?",
        "context": "CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)",
        "answer": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "db_id": "college_2"
    },
    {
        "question": "Find the title of course whose prerequisite is course Differential Geometry.",
        "context": "CREATE TABLE prereq (course_id VARCHAR, prereq_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)",
        "answer": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
        "db_id": "college_2"
    },
    {
        "question": "Find the names of students who have taken any course in the fall semester of year 2003.",
        "context": "CREATE TABLE student (name VARCHAR, id VARCHAR, semester VARCHAR, YEAR VARCHAR); CREATE TABLE takes (name VARCHAR, id VARCHAR, semester VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
        "db_id": "college_2"
    },
    {
        "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
        "context": "CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE SECTION (course_id VARCHAR)",
        "answer": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the instructors who taught C Programming course before.",
        "context": "CREATE TABLE teaches (id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
        "db_id": "college_2"
    },
    {
        "question": "Find the name and salary of instructors who are advisors of the students from the Math department.",
        "context": "CREATE TABLE instructor (name VARCHAR, salary VARCHAR, id VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)",
        "answer": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",
        "context": "CREATE TABLE student (id VARCHAR, dept_name VARCHAR, tot_cred VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "db_id": "college_2"
    },
    {
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "context": "CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)",
        "answer": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.",
        "context": "CREATE TABLE student (id VARCHAR, tot_cred VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of instructors who didn't teach any courses?",
        "context": "CREATE TABLE teaches (name VARCHAR, id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)",
        "answer": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "db_id": "college_2"
    },
    {
        "question": "Find the id of instructors who didn't teach any courses?",
        "context": "CREATE TABLE teaches (id VARCHAR); CREATE TABLE instructor (id VARCHAR)",
        "answer": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "db_id": "college_2"
    },
    {
        "question": "Find the names of instructors who didn't each any courses in any Spring semester.",
        "context": "CREATE TABLE teaches (name VARCHAR, id VARCHAR, semester VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR, semester VARCHAR)",
        "answer": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the department which has the highest average salary of professors.",
        "context": "CREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)",
        "answer": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.",
        "context": "CREATE TABLE department (dept_name VARCHAR, budget VARCHAR); CREATE TABLE instructor (salary INTEGER, dept_name VARCHAR)",
        "answer": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
        "db_id": "college_2"
    },
    {
        "question": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?",
        "context": "CREATE TABLE SECTION (course_id VARCHAR, building VARCHAR, room_number VARCHAR); CREATE TABLE course (title VARCHAR, credits VARCHAR, course_id VARCHAR); CREATE TABLE classroom (capacity INTEGER, building VARCHAR, room_number VARCHAR); CREATE TABLE classroom (capacity INTEGER)",
        "answer": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of students who didn't take any course from Biology department.",
        "context": "CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR); CREATE TABLE takes (id VARCHAR, course_id VARCHAR)",
        "answer": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "db_id": "college_2"
    },
    {
        "question": "Find the total number of students and total number of instructors for each department.",
        "context": "CREATE TABLE department (dept_name VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR); CREATE TABLE instructor (dept_name VARCHAR, id VARCHAR)",
        "answer": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
        "context": "CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE takes (id VARCHAR, course_id VARCHAR)",
        "answer": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "db_id": "college_2"
    },
    {
        "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.",
        "context": "CREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)",
        "answer": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
        "db_id": "college_2"
    },
    {
        "question": "Find the name of students who took some course offered by Statistics department.",
        "context": "CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE takes (course_id VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR)",
        "answer": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "db_id": "college_2"
    },
    {
        "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
        "context": "CREATE TABLE SECTION (building VARCHAR, room_number VARCHAR, semester VARCHAR, year VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR, title VARCHAR)",
        "answer": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "db_id": "college_2"
    },
    {
        "question": "Find the names of all instructors in computer science department",
        "context": "CREATE TABLE instructor (name VARCHAR, dept_name VARCHAR)",
        "answer": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
        "db_id": "college_2"
    },
    {
        "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
        "context": "CREATE TABLE instructor (name VARCHAR, dept_name VARCHAR, salary VARCHAR)",
        "answer": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "db_id": "college_2"
    },
    {
        "question": "Find the names of all instructors who have taught some course and the course_id.",
        "context": "CREATE TABLE instructor (ID VARCHAR); CREATE TABLE teaches (ID VARCHAR)",
        "answer": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
        "db_id": "college_2"
    },
    {
        "question": "Find the names of all instructors in the Art department who have taught some course and the course_id.",
        "context": "CREATE TABLE instructor (ID VARCHAR, dept_name VARCHAR); CREATE TABLE teaches (ID VARCHAR)",
        "answer": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'",
        "db_id": "college_2"
    },
    {
        "question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.",
        "context": "CREATE TABLE instructor (name VARCHAR)",
        "answer": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
        "db_id": "college_2"
    },
    {
        "question": "List in alphabetic order the names of all distinct instructors.",
        "context": "CREATE TABLE instructor (name VARCHAR)",
        "answer": "SELECT DISTINCT name FROM  instructor ORDER BY name",
        "db_id": "college_2"
    },
    {
        "question": "Find courses that ran in Fall 2009 or in Spring 2010.",
        "context": "CREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "db_id": "college_2"
    },
    {
        "question": "Find courses that ran in Fall 2009 and in Spring 2010.",
        "context": "CREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "db_id": "college_2"
    },
    {
        "question": "Find courses that ran in Fall 2009 but not in Spring 2010.",
        "context": "CREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "db_id": "college_2"
    },
    {
        "question": "Find the salaries of all distinct instructors that are less than the largest salary.",
        "context": "CREATE TABLE instructor (salary INTEGER)",
        "answer": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "db_id": "college_2"
    },
    {
        "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.",
        "context": "CREATE TABLE teaches (ID VARCHAR, semester VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "db_id": "college_2"
    },
    {
        "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.",
        "context": "CREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)",
        "answer": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
        "db_id": "college_2"
    },
    {
        "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.",
        "context": "CREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)",
        "answer": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "db_id": "college_2"
    },
    {
        "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.",
        "context": "CREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)",
        "answer": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "db_id": "college_2"
    },
    {
        "question": "How many debates are there?",
        "context": "CREATE TABLE debate (Id VARCHAR)",
        "answer": "SELECT count(*) FROM debate",
        "db_id": "debate"
    },
    {
        "question": "List the venues of debates in ascending order of the number of audience.",
        "context": "CREATE TABLE debate (Venue VARCHAR, Num_of_Audience VARCHAR)",
        "answer": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
        "db_id": "debate"
    },
    {
        "question": "What are the date and venue of each debate?",
        "context": "CREATE TABLE debate (Date VARCHAR, Venue VARCHAR)",
        "answer": "SELECT Date ,  Venue FROM debate",
        "db_id": "debate"
    },
    {
        "question": "List the dates of debates with number of audience bigger than 150",
        "context": "CREATE TABLE debate (Date VARCHAR, Num_of_Audience INTEGER)",
        "answer": "SELECT Date FROM debate WHERE Num_of_Audience  >  150",
        "db_id": "debate"
    },
    {
        "question": "Show the names of people aged either 35 or 36.",
        "context": "CREATE TABLE people (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36",
        "db_id": "debate"
    },
    {
        "question": "What is the party of the youngest people?",
        "context": "CREATE TABLE people (Party VARCHAR, Age VARCHAR)",
        "answer": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
        "db_id": "debate"
    },
    {
        "question": "Show different parties of people along with the number of people in each party.",
        "context": "CREATE TABLE people (Party VARCHAR)",
        "answer": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party",
        "db_id": "debate"
    },
    {
        "question": "Show the party that has the most people.",
        "context": "CREATE TABLE people (Party VARCHAR)",
        "answer": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "debate"
    },
    {
        "question": "Show the distinct venues of debates",
        "context": "CREATE TABLE debate (Venue VARCHAR)",
        "answer": "SELECT DISTINCT Venue FROM debate",
        "db_id": "debate"
    },
    {
        "question": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
        "context": "CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Date VARCHAR, Venue VARCHAR, Debate_ID VARCHAR); CREATE TABLE debate_people (Debate_ID VARCHAR, Affirmative VARCHAR)",
        "answer": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID",
        "db_id": "debate"
    },
    {
        "question": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.",
        "context": "CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Date VARCHAR, Venue VARCHAR, Debate_ID VARCHAR); CREATE TABLE debate_people (Debate_ID VARCHAR, Negative VARCHAR)",
        "answer": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC",
        "db_id": "debate"
    },
    {
        "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "context": "CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Debate_ID VARCHAR, Num_of_Audience INTEGER); CREATE TABLE debate_people (Debate_ID VARCHAR, Affirmative VARCHAR)",
        "answer": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200",
        "db_id": "debate"
    },
    {
        "question": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "context": "CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate_people (Affirmative VARCHAR)",
        "answer": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
        "db_id": "debate"
    },
    {
        "question": "Show the names of people who have been on the negative side of debates at least twice.",
        "context": "CREATE TABLE debate_people (Negative VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "db_id": "debate"
    },
    {
        "question": "List the names of people that have not been on the affirmative side of debates.",
        "context": "CREATE TABLE debate_people (Name VARCHAR, People_id VARCHAR, Affirmative VARCHAR); CREATE TABLE people (Name VARCHAR, People_id VARCHAR, Affirmative VARCHAR)",
        "answer": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
        "db_id": "debate"
    },
    {
        "question": "List the names of all the customers in alphabetical order.",
        "context": "CREATE TABLE customers (customer_details VARCHAR)",
        "answer": "SELECT customer_details FROM customers ORDER BY customer_details",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find all the policy type codes associated with the customer \"Dayana Robel\"",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_details VARCHAR); CREATE TABLE policies (customer_id VARCHAR)",
        "answer": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Which type of policy is most frequently used? Give me the policy type code.",
        "context": "CREATE TABLE policies (policy_type_code VARCHAR)",
        "answer": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find all the policy types that are used by more than 2 customers.",
        "context": "CREATE TABLE policies (policy_type_code VARCHAR)",
        "answer": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the total and average amount paid in claim headers.",
        "context": "CREATE TABLE claim_headers (amount_piad INTEGER)",
        "answer": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the total amount claimed in the most recently created document.",
        "context": "CREATE TABLE claim_headers (amount_claimed INTEGER, claim_header_id VARCHAR); CREATE TABLE claims_documents (claim_id VARCHAR, created_date VARCHAR); CREATE TABLE claims_documents (created_date VARCHAR)",
        "answer": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "What is the name of the customer who has made the largest amount of claim in a single claim?",
        "context": "CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (amount_claimed INTEGER); CREATE TABLE policies (policy_id VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (policy_id VARCHAR, amount_claimed INTEGER)",
        "answer": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "What is the name of the customer who has made the minimum amount of payment in one claim?",
        "context": "CREATE TABLE claim_headers (amount_piad INTEGER); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (policy_id VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (policy_id VARCHAR, amount_piad INTEGER)",
        "answer": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the names of customers who have no policies associated.",
        "context": "CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_details VARCHAR); CREATE TABLE policies (customer_id VARCHAR)",
        "answer": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "How many claim processing stages are there in total?",
        "context": "CREATE TABLE claims_processing_stages (Id VARCHAR)",
        "answer": "SELECT count(*) FROM claims_processing_stages",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "What is the name of the claim processing stage that most of the claims are on?",
        "context": "CREATE TABLE claims_processing (claim_stage_id VARCHAR); CREATE TABLE claims_processing_stages (claim_status_name VARCHAR, claim_stage_id VARCHAR)",
        "answer": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the names of customers whose name contains \"Diana\".",
        "context": "CREATE TABLE customers (customer_details VARCHAR)",
        "answer": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the names of the customers who have an deputy policy.",
        "context": "CREATE TABLE policies (customer_id VARCHAR, policy_type_code VARCHAR); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "context": "CREATE TABLE policies (customer_id VARCHAR, policy_type_code VARCHAR); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the names of all the customers and staff members.",
        "context": "CREATE TABLE staff (customer_details VARCHAR, staff_details VARCHAR); CREATE TABLE customers (customer_details VARCHAR, staff_details VARCHAR)",
        "answer": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the number of records of each policy type and its type code.",
        "context": "CREATE TABLE policies (policy_type_code VARCHAR)",
        "answer": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the name of the customer that has been involved in the most policies.",
        "context": "CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (customer_id VARCHAR)",
        "answer": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "What is the description of the claim status \"Open\"?",
        "context": "CREATE TABLE claims_processing_stages (claim_status_description VARCHAR, claim_status_name VARCHAR)",
        "answer": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "How many distinct claim outcome codes are there?",
        "context": "CREATE TABLE claims_processing (claim_outcome_code VARCHAR)",
        "answer": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Which customer is associated with the latest policy?",
        "context": "CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (start_date INTEGER); CREATE TABLE policies (customer_id VARCHAR, start_date INTEGER)",
        "answer": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
        "context": "CREATE TABLE Accounts (account_id VARCHAR, date_account_opened VARCHAR, account_name VARCHAR, other_account_details VARCHAR)",
        "answer": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
        "context": "CREATE TABLE Accounts (account_id VARCHAR, date_account_opened VARCHAR, account_name VARCHAR, other_account_details VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR)",
        "answer": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
        "context": "CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, other_account_details VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the first name and last name for the customer with account name 900.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the unique first names, last names, and phone numbers for all customers with any account.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, phone_number VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show customer ids who don't have an account.",
        "context": "CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)",
        "answer": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many accounts does each customer have? List the number and customer id.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR)",
        "answer": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What is the customer id, first and last name with most number of accounts.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show id, first name and last name for all customers and the number of accounts.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show first name and id for all customers with at least 2 accounts.",
        "context": "CREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)",
        "answer": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the number of customers.",
        "context": "CREATE TABLE CUSTOMERS (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Customers",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the number of customers for each gender.",
        "context": "CREATE TABLE Customers (gender VARCHAR)",
        "answer": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many transactions do we have?",
        "context": "CREATE TABLE Financial_transactions (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Financial_transactions",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many transaction does each account have? Show the number and account id.",
        "context": "CREATE TABLE Financial_transactions (account_id VARCHAR)",
        "answer": "SELECT count(*) ,  account_id FROM Financial_transactions",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many transaction does account with name 337 have?",
        "context": "CREATE TABLE Accounts (account_id VARCHAR, account_name VARCHAR); CREATE TABLE Financial_transactions (account_id VARCHAR)",
        "answer": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What is the average, minimum, maximum, and total transaction amount?",
        "context": "CREATE TABLE Financial_transactions (transaction_amount INTEGER)",
        "answer": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show ids for all transactions whose amounts are greater than the average.",
        "context": "CREATE TABLE Financial_transactions (transaction_id VARCHAR, transaction_amount INTEGER)",
        "answer": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the transaction types and the total amount of transactions.",
        "context": "CREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)",
        "answer": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the account name, id and the number of transactions for each account.",
        "context": "CREATE TABLE Financial_transactions (account_id VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, account_id VARCHAR)",
        "answer": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the account id with most number of transactions.",
        "context": "CREATE TABLE Financial_transactions (account_id VARCHAR)",
        "answer": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the account id and name with at least 4 transactions.",
        "context": "CREATE TABLE Financial_transactions (account_id VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, account_id VARCHAR)",
        "answer": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show all product sizes.",
        "context": "CREATE TABLE Products (product_size VARCHAR)",
        "answer": "SELECT DISTINCT product_size FROM Products",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show all product colors.",
        "context": "CREATE TABLE Products (product_color VARCHAR)",
        "answer": "SELECT DISTINCT product_color FROM Products",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the invoice number and the number of transactions for each invoice.",
        "context": "CREATE TABLE Financial_transactions (invoice_number VARCHAR)",
        "answer": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
        "context": "CREATE TABLE Invoices (invoice_number VARCHAR, invoice_date VARCHAR); CREATE TABLE Financial_transactions (invoice_number VARCHAR)",
        "answer": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many invoices do we have?",
        "context": "CREATE TABLE Invoices (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Invoices",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show invoice dates and order id and details for all invoices.",
        "context": "CREATE TABLE Invoices (invoice_date VARCHAR, order_id VARCHAR); CREATE TABLE Orders (order_details VARCHAR, order_id VARCHAR)",
        "answer": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the order ids and the number of invoices for each order.",
        "context": "CREATE TABLE Invoices (order_id VARCHAR)",
        "answer": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What is the order id and order details for the order more than two invoices.",
        "context": "CREATE TABLE Orders (order_id VARCHAR, order_details VARCHAR); CREATE TABLE Invoices (order_id VARCHAR)",
        "answer": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What is the customer last name, id and phone number with most number of orders?",
        "context": "CREATE TABLE Orders (customer_id VARCHAR); CREATE TABLE Customers (customer_last_name VARCHAR, phone_number VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show all product names without an order.",
        "context": "CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE Order_items (product_id VARCHAR); CREATE TABLE Products (product_name VARCHAR)",
        "answer": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show all product names and the total quantity ordered for each product name.",
        "context": "CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE Order_items (product_quantity INTEGER, product_id VARCHAR)",
        "answer": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the order ids and the number of items in each order.",
        "context": "CREATE TABLE Order_items (order_id VARCHAR)",
        "answer": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the product ids and the number of unique orders containing each product.",
        "context": "CREATE TABLE Order_items (product_id VARCHAR, order_id VARCHAR)",
        "answer": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show all product names and the number of customers having an order on each product.",
        "context": "CREATE TABLE Order_items (product_id VARCHAR, order_id VARCHAR); CREATE TABLE Orders (order_id VARCHAR); CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR)",
        "answer": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show order ids and the number of products in each order.",
        "context": "CREATE TABLE Order_items (order_id VARCHAR, product_id VARCHAR)",
        "answer": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show order ids and the total quantity in each order.",
        "context": "CREATE TABLE Order_items (order_id VARCHAR, product_quantity INTEGER)",
        "answer": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many products were not included in any order?",
        "context": "CREATE TABLE products (product_id VARCHAR); CREATE TABLE Order_items (product_id VARCHAR)",
        "answer": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many churches opened before 1850 are there?",
        "context": "CREATE TABLE Church (Open_Date INTEGER)",
        "answer": "SELECT count(*) FROM Church WHERE Open_Date  <  1850",
        "db_id": "wedding"
    },
    {
        "question": "Show the name, open date, and organizer for all churches.",
        "context": "CREATE TABLE Church (name VARCHAR, open_date VARCHAR, organized_by VARCHAR)",
        "answer": "SELECT name ,  open_date ,  organized_by FROM Church",
        "db_id": "wedding"
    },
    {
        "question": "List all church names in descending order of opening date.",
        "context": "CREATE TABLE church (name VARCHAR, open_date VARCHAR)",
        "answer": "SELECT name FROM church ORDER BY open_date DESC",
        "db_id": "wedding"
    },
    {
        "question": "Show the opening year in whcih at least two churches opened.",
        "context": "CREATE TABLE church (open_date VARCHAR)",
        "answer": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2",
        "db_id": "wedding"
    },
    {
        "question": "Show the organizer and name for churches that opened between 1830 and 1840.",
        "context": "CREATE TABLE church (organized_by VARCHAR, name VARCHAR, open_date INTEGER)",
        "answer": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840",
        "db_id": "wedding"
    },
    {
        "question": "Show all opening years and the number of churches that opened in that year.",
        "context": "CREATE TABLE church (open_date VARCHAR)",
        "answer": "SELECT open_date ,  count(*) FROM church GROUP BY open_date",
        "db_id": "wedding"
    },
    {
        "question": "Show the name and opening year for three churches that opened most recently.",
        "context": "CREATE TABLE church (name VARCHAR, open_date VARCHAR)",
        "answer": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3",
        "db_id": "wedding"
    },
    {
        "question": "How many female people are older than 30 in our record?",
        "context": "CREATE TABLE people (is_male VARCHAR, age VARCHAR)",
        "answer": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30",
        "db_id": "wedding"
    },
    {
        "question": "Show the country where people older than 30 and younger than 25 are from.",
        "context": "CREATE TABLE people (country VARCHAR, age INTEGER)",
        "answer": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
        "db_id": "wedding"
    },
    {
        "question": "Show the minimum, maximum, and average age for all people.",
        "context": "CREATE TABLE people (age INTEGER)",
        "answer": "SELECT min(age) ,  max(age) ,  avg(age) FROM people",
        "db_id": "wedding"
    },
    {
        "question": "Show the name and country for all people whose age is smaller than the average.",
        "context": "CREATE TABLE people (name VARCHAR, country VARCHAR, age INTEGER)",
        "answer": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)",
        "db_id": "wedding"
    },
    {
        "question": "Show the pair of male and female names in all weddings after year 2014",
        "context": "CREATE TABLE wedding (male_id VARCHAR, female_id VARCHAR, year INTEGER); CREATE TABLE people (name VARCHAR, people_id VARCHAR)",
        "answer": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014",
        "db_id": "wedding"
    },
    {
        "question": "Show the name and age for all male people who don't have a wedding.",
        "context": "CREATE TABLE wedding (name VARCHAR, age VARCHAR, is_male VARCHAR, people_id VARCHAR, male_id VARCHAR); CREATE TABLE people (name VARCHAR, age VARCHAR, is_male VARCHAR, people_id VARCHAR, male_id VARCHAR)",
        "answer": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
        "db_id": "wedding"
    },
    {
        "question": "Show all church names except for those that had a wedding in year 2015.",
        "context": "CREATE TABLE church (name VARCHAR); CREATE TABLE wedding (church_id VARCHAR, year VARCHAR); CREATE TABLE church (name VARCHAR, church_id VARCHAR)",
        "answer": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015",
        "db_id": "wedding"
    },
    {
        "question": "Show all church names that have hosted least two weddings.",
        "context": "CREATE TABLE wedding (church_id VARCHAR); CREATE TABLE church (name VARCHAR, church_id VARCHAR)",
        "answer": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2",
        "db_id": "wedding"
    },
    {
        "question": "Show the names for all females from Canada having a wedding in year 2016.",
        "context": "CREATE TABLE people (name VARCHAR, people_id VARCHAR, country VARCHAR, is_male VARCHAR); CREATE TABLE wedding (female_id VARCHAR, year VARCHAR)",
        "answer": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'",
        "db_id": "wedding"
    },
    {
        "question": "How many weddings are there in year 2016?",
        "context": "CREATE TABLE wedding (YEAR VARCHAR)",
        "answer": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
        "db_id": "wedding"
    },
    {
        "question": "Show the church names for the weddings of all people older than 30.",
        "context": "CREATE TABLE church (name VARCHAR, church_id VARCHAR); CREATE TABLE people (people_id VARCHAR, age VARCHAR); CREATE TABLE wedding (male_id VARCHAR, female_id VARCHAR, church_id VARCHAR)",
        "answer": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30",
        "db_id": "wedding"
    },
    {
        "question": "Show all countries and the number of people from each country.",
        "context": "CREATE TABLE people (country VARCHAR)",
        "answer": "SELECT country ,  count(*) FROM people GROUP BY country",
        "db_id": "wedding"
    },
    {
        "question": "How many churches have a wedding in year 2016?",
        "context": "CREATE TABLE wedding (church_id VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016",
        "db_id": "wedding"
    },
    {
        "question": "How many artists do we have?",
        "context": "CREATE TABLE artist (Id VARCHAR)",
        "answer": "SELECT count(*) FROM artist",
        "db_id": "theme_gallery"
    },
    {
        "question": "Show all artist name, age, and country ordered by the yeared they joined.",
        "context": "CREATE TABLE artist (name VARCHAR, age VARCHAR, country VARCHAR, Year_Join VARCHAR)",
        "answer": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "db_id": "theme_gallery"
    },
    {
        "question": "What are all distinct country for artists?",
        "context": "CREATE TABLE artist (country VARCHAR)",
        "answer": "SELECT DISTINCT country FROM artist",
        "db_id": "theme_gallery"
    },
    {
        "question": "Show all artist names and the year joined who are not from United States.",
        "context": "CREATE TABLE artist (name VARCHAR, year_join VARCHAR, country VARCHAR)",
        "answer": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
        "db_id": "theme_gallery"
    },
    {
        "question": "How many artists are above age 46 and joined after 1990?",
        "context": "CREATE TABLE artist (age VARCHAR, year_join VARCHAR)",
        "answer": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
        "db_id": "theme_gallery"
    },
    {
        "question": "What is the average and minimum age of all artists from United States.",
        "context": "CREATE TABLE artist (age INTEGER, country VARCHAR)",
        "answer": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
        "db_id": "theme_gallery"
    },
    {
        "question": "What is the name of the artist who joined latest?",
        "context": "CREATE TABLE artist (name VARCHAR, year_join VARCHAR)",
        "answer": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
        "db_id": "theme_gallery"
    },
    {
        "question": "How many exhibition are there in year 2005 or after?",
        "context": "CREATE TABLE exhibition (YEAR VARCHAR)",
        "answer": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "db_id": "theme_gallery"
    },
    {
        "question": "Show theme and year for all exhibitions with ticket prices lower than 15.",
        "context": "CREATE TABLE exhibition (theme VARCHAR, YEAR VARCHAR, ticket_price INTEGER)",
        "answer": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15",
        "db_id": "theme_gallery"
    },
    {
        "question": "Show all artist names and the number of exhibitions for each artist.",
        "context": "CREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (artist_id VARCHAR)",
        "answer": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
        "db_id": "theme_gallery"
    },
    {
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "context": "CREATE TABLE exhibition (artist_id VARCHAR); CREATE TABLE artist (name VARCHAR, country VARCHAR, artist_id VARCHAR)",
        "answer": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "theme_gallery"
    },
    {
        "question": "Show names for artists without any exhibition.",
        "context": "CREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (name VARCHAR, artist_id VARCHAR)",
        "answer": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
        "db_id": "theme_gallery"
    },
    {
        "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
        "context": "CREATE TABLE exhibition (ticket_price INTEGER); CREATE TABLE exhibition (theme VARCHAR, artist_id VARCHAR, ticket_price INTEGER); CREATE TABLE artist (name VARCHAR, artist_id VARCHAR)",
        "answer": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",
        "db_id": "theme_gallery"
    },
    {
        "question": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.",
        "context": "CREATE TABLE exhibition (ticket_price INTEGER, YEAR INTEGER)",
        "answer": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009",
        "db_id": "theme_gallery"
    },
    {
        "question": "Show theme and year for all exhibitions in an descending order of ticket price.",
        "context": "CREATE TABLE exhibition (theme VARCHAR, YEAR VARCHAR, ticket_price VARCHAR)",
        "answer": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC",
        "db_id": "theme_gallery"
    },
    {
        "question": "What is the theme, date, and attendance for the exhibition in year 2004?",
        "context": "CREATE TABLE exhibition_record (date VARCHAR, attendance VARCHAR, exhibition_id VARCHAR); CREATE TABLE exhibition (theme VARCHAR, exhibition_id VARCHAR, year VARCHAR)",
        "answer": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004",
        "db_id": "theme_gallery"
    },
    {
        "question": "Show all artist names who didn't have an exhibition in 2004.",
        "context": "CREATE TABLE exhibition (artist_id VARCHAR, year VARCHAR); CREATE TABLE artist (name VARCHAR); CREATE TABLE artist (name VARCHAR, artist_id VARCHAR)",
        "answer": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "db_id": "theme_gallery"
    },
    {
        "question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
        "context": "CREATE TABLE exhibition (theme VARCHAR, exhibition_id VARCHAR); CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance INTEGER)",
        "answer": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "db_id": "theme_gallery"
    },
    {
        "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?",
        "context": "CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance VARCHAR); CREATE TABLE exhibition (exhibition_id VARCHAR, ticket_price VARCHAR)",
        "answer": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10",
        "db_id": "theme_gallery"
    },
    {
        "question": "Show all artist names with an average exhibition attendance over 200.",
        "context": "CREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (exhibition_id VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance INTEGER)",
        "answer": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200",
        "db_id": "theme_gallery"
    },
    {
        "question": "Find the id of the item whose title is \"orange\".",
        "context": "CREATE TABLE item (i_id VARCHAR, title VARCHAR)",
        "answer": "SELECT i_id FROM item WHERE title  =  \"orange\"",
        "db_id": "epinions_1"
    },
    {
        "question": "List all information in the item table.",
        "context": "CREATE TABLE item (Id VARCHAR)",
        "answer": "SELECT * FROM item",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the number of reviews.",
        "context": "CREATE TABLE review (Id VARCHAR)",
        "answer": "SELECT count(*) FROM review",
        "db_id": "epinions_1"
    },
    {
        "question": "How many users are there?",
        "context": "CREATE TABLE useracct (Id VARCHAR)",
        "answer": "SELECT count(*) FROM useracct",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the average and maximum rating of all reviews.",
        "context": "CREATE TABLE review (rating INTEGER)",
        "answer": "SELECT avg(rating) ,  max(rating) FROM review",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the highest rank of all reviews.",
        "context": "CREATE TABLE review (rank INTEGER)",
        "answer": "SELECT min(rank) FROM review",
        "db_id": "epinions_1"
    },
    {
        "question": "How many different users wrote some reviews?",
        "context": "CREATE TABLE review (u_id VARCHAR)",
        "answer": "SELECT count(DISTINCT u_id) FROM review",
        "db_id": "epinions_1"
    },
    {
        "question": "How many different items were reviewed by some users?",
        "context": "CREATE TABLE review (i_id VARCHAR)",
        "answer": "SELECT count(DISTINCT i_id) FROM review",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the number of items that did not receive any review.",
        "context": "CREATE TABLE review (i_id VARCHAR); CREATE TABLE item (i_id VARCHAR)",
        "answer": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the names of users who did not leave any review.",
        "context": "CREATE TABLE review (name VARCHAR, u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)",
        "answer": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the names of goods that receive a rating of 10.",
        "context": "CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating VARCHAR)",
        "answer": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the titles of items whose rating is higher than the average review rating of all items.",
        "context": "CREATE TABLE review (rating INTEGER); CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)",
        "answer": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the titles of items that received any rating below 5.",
        "context": "CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)",
        "answer": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the titles of items that received both a rating higher than 8 and a rating below 5.",
        "context": "CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)",
        "answer": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
        "context": "CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rank INTEGER, rating INTEGER)",
        "answer": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the name of the item with the lowest average rating.",
        "context": "CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)",
        "answer": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1",
        "db_id": "epinions_1"
    },
    {
        "question": "List the titles of all items in alphabetic order .",
        "context": "CREATE TABLE item (title VARCHAR)",
        "answer": "SELECT title FROM item ORDER BY title",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the name of the user who gives the most reviews.",
        "context": "CREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE review (u_id VARCHAR)",
        "answer": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the name and id of the item with the highest average rating.",
        "context": "CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)",
        "answer": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the name and id of the good with the highest average rank.",
        "context": "CREATE TABLE review (i_id VARCHAR, rank INTEGER); CREATE TABLE item (title VARCHAR, i_id VARCHAR)",
        "answer": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
        "db_id": "epinions_1"
    },
    {
        "question": "For each user, return the name and the average rating of reviews given by them.",
        "context": "CREATE TABLE review (rating INTEGER, u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)",
        "answer": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "db_id": "epinions_1"
    },
    {
        "question": "For each user, find their name and the number of reviews written by them.",
        "context": "CREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE review (u_id VARCHAR)",
        "answer": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the name of the user who gave the highest rating.",
        "context": "CREATE TABLE review (u_id VARCHAR, rating VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)",
        "answer": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the name of the source user with the highest average trust score.",
        "context": "CREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE trust (source_u_id VARCHAR)",
        "answer": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1",
        "db_id": "epinions_1"
    },
    {
        "question": "Find each target user's name and average trust score.",
        "context": "CREATE TABLE trust (target_u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)",
        "answer": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the name of the target user with the lowest trust score.",
        "context": "CREATE TABLE trust (target_u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)",
        "answer": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the names of the items that did not receive any review.",
        "context": "CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (title VARCHAR, i_id VARCHAR)",
        "answer": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "db_id": "epinions_1"
    },
    {
        "question": "Find the number of users who did not write any review.",
        "context": "CREATE TABLE review (u_id VARCHAR); CREATE TABLE useracct (u_id VARCHAR)",
        "answer": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "db_id": "epinions_1"
    },
    {
        "question": "How many players are there?",
        "context": "CREATE TABLE player (Id VARCHAR)",
        "answer": "SELECT count(*) FROM player",
        "db_id": "riding_club"
    },
    {
        "question": "List the names of players in ascending order of votes.",
        "context": "CREATE TABLE player (Player_name VARCHAR, Votes VARCHAR)",
        "answer": "SELECT Player_name FROM player ORDER BY Votes ASC",
        "db_id": "riding_club"
    },
    {
        "question": "What are the gender and occupation of players?",
        "context": "CREATE TABLE player (Gender VARCHAR, Occupation VARCHAR)",
        "answer": "SELECT Gender ,  Occupation FROM player",
        "db_id": "riding_club"
    },
    {
        "question": "List the name and residence for players whose occupation is not \"Researcher\".",
        "context": "CREATE TABLE player (Player_name VARCHAR, residence VARCHAR, Occupation VARCHAR)",
        "answer": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
        "db_id": "riding_club"
    },
    {
        "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
        "context": "CREATE TABLE player (Sponsor_name VARCHAR, Residence VARCHAR)",
        "answer": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"",
        "db_id": "riding_club"
    },
    {
        "question": "What is the name of the player with the largest number of votes?",
        "context": "CREATE TABLE player (Player_name VARCHAR, Votes VARCHAR)",
        "answer": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1",
        "db_id": "riding_club"
    },
    {
        "question": "Show different occupations along with the number of players in each occupation.",
        "context": "CREATE TABLE player (Occupation VARCHAR)",
        "answer": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation",
        "db_id": "riding_club"
    },
    {
        "question": "Please show the most common occupation of players.",
        "context": "CREATE TABLE player (Occupation VARCHAR)",
        "answer": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "riding_club"
    },
    {
        "question": "Show the residences that have at least two players.",
        "context": "CREATE TABLE player (Residence VARCHAR)",
        "answer": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2",
        "db_id": "riding_club"
    },
    {
        "question": "Show the names of players and names of their coaches.",
        "context": "CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE coach (coach_name VARCHAR, Coach_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR)",
        "answer": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID",
        "db_id": "riding_club"
    },
    {
        "question": "Show the names of players coached by the rank 1 coach.",
        "context": "CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE coach (Coach_ID VARCHAR, Rank VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR)",
        "answer": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1",
        "db_id": "riding_club"
    },
    {
        "question": "Show the names and genders of players with a coach starting after 2011.",
        "context": "CREATE TABLE player (Player_name VARCHAR, gender VARCHAR, Player_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR, Starting_year INTEGER); CREATE TABLE coach (Coach_ID VARCHAR)",
        "answer": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011",
        "db_id": "riding_club"
    },
    {
        "question": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "context": "CREATE TABLE coach (coach_name VARCHAR, Coach_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR); CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR, Votes VARCHAR)",
        "answer": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC",
        "db_id": "riding_club"
    },
    {
        "question": "List the names of players that do not have coaches.",
        "context": "CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE player_coach (Player_name VARCHAR, Player_ID VARCHAR)",
        "answer": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)",
        "db_id": "riding_club"
    },
    {
        "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".",
        "context": "CREATE TABLE player (Residence VARCHAR, gender VARCHAR)",
        "answer": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"",
        "db_id": "riding_club"
    },
    {
        "question": "How many coaches does each club has? List the club id, name and the number of coaches.",
        "context": "CREATE TABLE club (club_id VARCHAR, club_name VARCHAR); CREATE TABLE coach (club_id VARCHAR)",
        "answer": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
        "db_id": "riding_club"
    },
    {
        "question": "How many gold medals has the club with the most coaches won?",
        "context": "CREATE TABLE match_result (club_id VARCHAR, gold VARCHAR); CREATE TABLE coach (club_id VARCHAR)",
        "answer": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "riding_club"
    },
    {
        "question": "How many gymnasts are there?",
        "context": "CREATE TABLE gymnast (Id VARCHAR)",
        "answer": "SELECT count(*) FROM gymnast",
        "db_id": "gymnast"
    },
    {
        "question": "List the total points of gymnasts in descending order.",
        "context": "CREATE TABLE gymnast (Total_Points VARCHAR)",
        "answer": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
        "db_id": "gymnast"
    },
    {
        "question": "List the total points of gymnasts in descending order of floor exercise points.",
        "context": "CREATE TABLE gymnast (Total_Points VARCHAR, Floor_Exercise_Points VARCHAR)",
        "answer": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
        "db_id": "gymnast"
    },
    {
        "question": "What is the average horizontal bar points for all gymnasts?",
        "context": "CREATE TABLE gymnast (Horizontal_Bar_Points INTEGER)",
        "answer": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
        "db_id": "gymnast"
    },
    {
        "question": "What are the names of people in ascending alphabetical order?",
        "context": "CREATE TABLE People (Name VARCHAR)",
        "answer": "SELECT Name FROM People ORDER BY Name ASC",
        "db_id": "gymnast"
    },
    {
        "question": "What are the names of gymnasts?",
        "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "db_id": "gymnast"
    },
    {
        "question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?",
        "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Hometown VARCHAR)",
        "answer": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"",
        "db_id": "gymnast"
    },
    {
        "question": "What is the age of the tallest person?",
        "context": "CREATE TABLE people (Age VARCHAR, Height VARCHAR)",
        "answer": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
        "db_id": "gymnast"
    },
    {
        "question": "List the names of the top 5 oldest people.",
        "context": "CREATE TABLE People (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5",
        "db_id": "gymnast"
    },
    {
        "question": "What is the total point count of the youngest gymnast?",
        "context": "CREATE TABLE people (People_ID VARCHAR, Age VARCHAR); CREATE TABLE gymnast (Total_Points VARCHAR, Gymnast_ID VARCHAR)",
        "answer": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "db_id": "gymnast"
    },
    {
        "question": "What is the average age of all gymnasts?",
        "context": "CREATE TABLE people (Age INTEGER, People_ID VARCHAR); CREATE TABLE gymnast (Gymnast_ID VARCHAR)",
        "answer": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "db_id": "gymnast"
    },
    {
        "question": "What are the distinct hometowns of gymnasts with total points more than 57.5?",
        "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR, Total_Points INTEGER); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5",
        "db_id": "gymnast"
    },
    {
        "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
        "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
        "db_id": "gymnast"
    },
    {
        "question": "What is the most common hometown of gymnasts?",
        "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "gymnast"
    },
    {
        "question": "What are the hometowns that are shared by at least two gymnasts?",
        "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2",
        "db_id": "gymnast"
    },
    {
        "question": "List the names of gymnasts in ascending order by their heights.",
        "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Height VARCHAR)",
        "answer": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC",
        "db_id": "gymnast"
    },
    {
        "question": "List the distinct hometowns that are not associated with any gymnast.",
        "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR)",
        "answer": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "db_id": "gymnast"
    },
    {
        "question": "Show the hometowns shared by people older than 23 and younger than 20.",
        "context": "CREATE TABLE people (Hometown VARCHAR, Age INTEGER)",
        "answer": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20",
        "db_id": "gymnast"
    },
    {
        "question": "How many distinct hometowns did these people have?",
        "context": "CREATE TABLE people (Hometown VARCHAR)",
        "answer": "SELECT count(DISTINCT Hometown) FROM people",
        "db_id": "gymnast"
    },
    {
        "question": "Show the ages of gymnasts in descending order of total points.",
        "context": "CREATE TABLE people (Age VARCHAR, People_ID VARCHAR); CREATE TABLE gymnast (Gymnast_ID VARCHAR, Total_Points VARCHAR)",
        "answer": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC",
        "db_id": "gymnast"
    },
    {
        "question": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.",
        "context": "CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR)",
        "answer": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'",
        "db_id": "small_bank_1"
    },
    {
        "question": "What is the total checking balance in all accounts?",
        "context": "CREATE TABLE checking (balance INTEGER)",
        "answer": "SELECT sum(balance) FROM checking",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the average checking balance.",
        "context": "CREATE TABLE checking (balance INTEGER)",
        "answer": "SELECT avg(balance) FROM checking",
        "db_id": "small_bank_1"
    },
    {
        "question": "How many accounts have a savings balance above the average savings balance?",
        "context": "CREATE TABLE savings (balance INTEGER)",
        "answer": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
        "context": "CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE checking (balance INTEGER); CREATE TABLE checking (custid VARCHAR, balance INTEGER)",
        "answer": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "db_id": "small_bank_1"
    },
    {
        "question": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?",
        "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (custid VARCHAR, name VARCHAR)",
        "answer": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the checking balance and saving balance in the Brown\u2019s account.",
        "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR)",
        "answer": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
        "context": "CREATE TABLE checking (custid VARCHAR, balance INTEGER); CREATE TABLE savings (custid VARCHAR, balance INTEGER); CREATE TABLE savings (balance INTEGER); CREATE TABLE checking (balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)",
        "answer": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "context": "CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER)",
        "answer": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "db_id": "small_bank_1"
    },
    {
        "question": "List all customers\u2019 names in the alphabetical order.",
        "context": "CREATE TABLE accounts (name VARCHAR)",
        "answer": "SELECT name FROM accounts ORDER BY name",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name of account that has the lowest total checking and saving balance.",
        "context": "CREATE TABLE checking (custid VARCHAR, balance VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)",
        "answer": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.",
        "context": "CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)",
        "answer": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name and checking balance of the account with the lowest savings balance.",
        "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)",
        "answer": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the number of checking accounts for each account name.",
        "context": "CREATE TABLE checking (custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)",
        "answer": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the total saving balance for each account name.",
        "context": "CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)",
        "answer": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name of accounts whose checking balance is below the average checking balance.",
        "context": "CREATE TABLE accounts (name VARCHAR, custid VARCHAR); CREATE TABLE checking (balance INTEGER); CREATE TABLE checking (custid VARCHAR, balance INTEGER)",
        "answer": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the saving balance of the account with the highest checking balance.",
        "context": "CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE checking (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (custid VARCHAR)",
        "answer": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
        "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR)",
        "answer": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)",
        "answer": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name, checking balance and saving balance of all accounts in the bank.",
        "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)",
        "answer": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)",
        "answer": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
        "context": "CREATE TABLE savings (custid VARCHAR, balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR); CREATE TABLE checking (custid VARCHAR, balance INTEGER)",
        "answer": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "context": "CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)",
        "answer": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "context": "CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)",
        "answer": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "db_id": "small_bank_1"
    },
    {
        "question": "How many main stream browsers whose market share is at least 5 exist?",
        "context": "CREATE TABLE browser (market_share VARCHAR)",
        "answer": "SELECT count(*) FROM browser WHERE market_share  >=  5",
        "db_id": "browser_web"
    },
    {
        "question": "List the name of browsers in descending order by market share.",
        "context": "CREATE TABLE browser (name VARCHAR, market_share VARCHAR)",
        "answer": "SELECT name FROM browser ORDER BY market_share DESC",
        "db_id": "browser_web"
    },
    {
        "question": "List the ids, names and market shares of all browsers.",
        "context": "CREATE TABLE browser (id VARCHAR, name VARCHAR, market_share VARCHAR)",
        "answer": "SELECT id ,  name ,  market_share FROM browser",
        "db_id": "browser_web"
    },
    {
        "question": "What is the maximum, minimum and average market share of the listed browsers?",
        "context": "CREATE TABLE browser (market_share INTEGER)",
        "answer": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser",
        "db_id": "browser_web"
    },
    {
        "question": "What is the id and market share of the browser Safari?",
        "context": "CREATE TABLE browser (id VARCHAR, market_share VARCHAR, name VARCHAR)",
        "answer": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",
        "db_id": "browser_web"
    },
    {
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "context": "CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR, CONNECTION VARCHAR)",
        "answer": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "db_id": "browser_web"
    },
    {
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "context": "CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR, accelerator_id VARCHAR, compatible_since_year VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998",
        "db_id": "browser_web"
    },
    {
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "context": "CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, Name VARCHAR)",
        "answer": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "db_id": "browser_web"
    },
    {
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "context": "CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR)",
        "answer": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "browser_web"
    },
    {
        "question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?",
        "context": "CREATE TABLE accelerator_compatible_browser (compatible_since_year VARCHAR, browser_id VARCHAR, accelerator_id VARCHAR); CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR)",
        "answer": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'",
        "db_id": "browser_web"
    },
    {
        "question": "How many different kinds of clients are supported by the web clients accelerators?",
        "context": "CREATE TABLE web_client_accelerator (client VARCHAR)",
        "answer": "SELECT count(DISTINCT client) FROM web_client_accelerator",
        "db_id": "browser_web"
    },
    {
        "question": "How many accelerators are not compatible with the browsers listed ?",
        "context": "CREATE TABLE accelerator_compatible_browser (id VARCHAR, accelerator_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, accelerator_id VARCHAR)",
        "answer": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );",
        "db_id": "browser_web"
    },
    {
        "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "context": "CREATE TABLE web_client_accelerator (name VARCHAR, id VARCHAR); CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE browser (id VARCHAR, market_share INTEGER)",
        "answer": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;",
        "db_id": "browser_web"
    },
    {
        "question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "context": "CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'",
        "db_id": "browser_web"
    },
    {
        "question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
        "context": "CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR); CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR, id VARCHAR)",
        "answer": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'",
        "db_id": "browser_web"
    },
    {
        "question": "Which accelerator name contains substring \"Opera\"?",
        "context": "CREATE TABLE web_client_accelerator (name VARCHAR)",
        "answer": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "db_id": "browser_web"
    },
    {
        "question": "Find the number of web accelerators used for each Operating system.",
        "context": "CREATE TABLE web_client_accelerator (Operating_system VARCHAR)",
        "answer": "SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system",
        "db_id": "browser_web"
    },
    {
        "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "context": "CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR, accelerator_id VARCHAR, compatible_since_year VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, id VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC",
        "db_id": "browser_web"
    },
    {
        "question": "How many wrestlers are there?",
        "context": "CREATE TABLE wrestler (Id VARCHAR)",
        "answer": "SELECT count(*) FROM wrestler",
        "db_id": "wrestler"
    },
    {
        "question": "List the names of wrestlers in descending order of days held.",
        "context": "CREATE TABLE wrestler (Name VARCHAR, Days_held VARCHAR)",
        "answer": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
        "db_id": "wrestler"
    },
    {
        "question": "What is the name of the wrestler with the fewest days held?",
        "context": "CREATE TABLE wrestler (Name VARCHAR, Days_held VARCHAR)",
        "answer": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "db_id": "wrestler"
    },
    {
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "context": "CREATE TABLE wrestler (Reign VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "db_id": "wrestler"
    },
    {
        "question": "What are the names and location of the wrestlers?",
        "context": "CREATE TABLE wrestler (Name VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT Name ,  LOCATION FROM wrestler",
        "db_id": "wrestler"
    },
    {
        "question": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?",
        "context": "CREATE TABLE Elimination (Elimination_Move VARCHAR, Team VARCHAR)",
        "answer": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"",
        "db_id": "wrestler"
    },
    {
        "question": "What are the names of wrestlers and the elimination moves?",
        "context": "CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE elimination (Elimination_Move VARCHAR, Wrestler_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
        "db_id": "wrestler"
    },
    {
        "question": "List the names of wrestlers and the teams in elimination in descending order of days held.",
        "context": "CREATE TABLE elimination (Team VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR, Days_held VARCHAR)",
        "answer": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC",
        "db_id": "wrestler"
    },
    {
        "question": "List the time of elimination of the wrestlers with largest days held.",
        "context": "CREATE TABLE wrestler (Wrestler_ID VARCHAR, Days_held VARCHAR); CREATE TABLE elimination (Time VARCHAR, Wrestler_ID VARCHAR)",
        "answer": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "db_id": "wrestler"
    },
    {
        "question": "Show times of elimination of wrestlers with days held more than 50.",
        "context": "CREATE TABLE wrestler (Wrestler_ID VARCHAR, Days_held INTEGER); CREATE TABLE elimination (Time VARCHAR, Wrestler_ID VARCHAR)",
        "answer": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50",
        "db_id": "wrestler"
    },
    {
        "question": "Show different teams in eliminations and the number of eliminations from each team.",
        "context": "CREATE TABLE elimination (Team VARCHAR)",
        "answer": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "db_id": "wrestler"
    },
    {
        "question": "Show teams that have suffered more than three eliminations.",
        "context": "CREATE TABLE elimination (Team VARCHAR)",
        "answer": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3",
        "db_id": "wrestler"
    },
    {
        "question": "Show the reign and days held of wrestlers.",
        "context": "CREATE TABLE wrestler (Reign VARCHAR, Days_held VARCHAR)",
        "answer": "SELECT Reign ,  Days_held FROM wrestler",
        "db_id": "wrestler"
    },
    {
        "question": "What are the names of wrestlers days held less than 100?",
        "context": "CREATE TABLE wrestler (Name VARCHAR, Days_held INTEGER)",
        "answer": "SELECT Name FROM wrestler WHERE Days_held  <  100",
        "db_id": "wrestler"
    },
    {
        "question": "Please show the most common reigns of wrestlers.",
        "context": "CREATE TABLE wrestler (Reign VARCHAR)",
        "answer": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "wrestler"
    },
    {
        "question": "List the locations that are shared by more than two wrestlers.",
        "context": "CREATE TABLE wrestler (LOCATION VARCHAR)",
        "answer": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2",
        "db_id": "wrestler"
    },
    {
        "question": "List the names of wrestlers that have not been eliminated.",
        "context": "CREATE TABLE elimination (Name VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR)",
        "answer": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)",
        "db_id": "wrestler"
    },
    {
        "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "context": "CREATE TABLE Elimination (Team VARCHAR, Eliminated_By VARCHAR)",
        "answer": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "db_id": "wrestler"
    },
    {
        "question": "What is the number of distinct teams that suffer elimination?",
        "context": "CREATE TABLE elimination (team VARCHAR)",
        "answer": "SELECT COUNT (DISTINCT team) FROM elimination",
        "db_id": "wrestler"
    },
    {
        "question": "Show the times of elimination by \"Punk\" or \"Orton\".",
        "context": "CREATE TABLE elimination (TIME VARCHAR, Eliminated_By VARCHAR)",
        "answer": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"",
        "db_id": "wrestler"
    },
    {
        "question": "How many schools are there?",
        "context": "CREATE TABLE school (Id VARCHAR)",
        "answer": "SELECT count(*) FROM school",
        "db_id": "school_finance"
    },
    {
        "question": "Show all school names in alphabetical order.",
        "context": "CREATE TABLE school (school_name VARCHAR)",
        "answer": "SELECT school_name FROM school ORDER BY school_name",
        "db_id": "school_finance"
    },
    {
        "question": "List the name, location, mascot for all schools.",
        "context": "CREATE TABLE school (school_name VARCHAR, LOCATION VARCHAR, mascot VARCHAR)",
        "answer": "SELECT school_name ,  LOCATION ,  mascot FROM school",
        "db_id": "school_finance"
    },
    {
        "question": "What are the total and average enrollment of all schools?",
        "context": "CREATE TABLE school (enrollment INTEGER)",
        "answer": "SELECT sum(enrollment) ,  avg(enrollment) FROM school",
        "db_id": "school_finance"
    },
    {
        "question": "What are the mascots for schools with enrollments above the average?",
        "context": "CREATE TABLE school (mascot VARCHAR, enrollment INTEGER)",
        "answer": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)",
        "db_id": "school_finance"
    },
    {
        "question": "List the name of the school with the smallest enrollment.",
        "context": "CREATE TABLE school (school_name VARCHAR, enrollment VARCHAR)",
        "answer": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1",
        "db_id": "school_finance"
    },
    {
        "question": "Show the average, maximum, minimum enrollment of all schools.",
        "context": "CREATE TABLE school (enrollment INTEGER)",
        "answer": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school",
        "db_id": "school_finance"
    },
    {
        "question": "Show each county along with the number of schools and total enrollment in each county.",
        "context": "CREATE TABLE school (county VARCHAR, enrollment INTEGER)",
        "answer": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county",
        "db_id": "school_finance"
    },
    {
        "question": "How many donors have endowment for school named \"Glenn\"?",
        "context": "CREATE TABLE school (school_id VARCHAR, school_name VARCHAR); CREATE TABLE endowment (donator_name VARCHAR, school_id VARCHAR)",
        "answer": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"",
        "db_id": "school_finance"
    },
    {
        "question": "List each donator name and the amount of endowment in descending order of the amount of endowment.",
        "context": "CREATE TABLE endowment (donator_name VARCHAR, amount INTEGER)",
        "answer": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "db_id": "school_finance"
    },
    {
        "question": "List the names of the schools without any endowment.",
        "context": "CREATE TABLE endowment (school_name VARCHAR, school_id VARCHAR); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)",
        "answer": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)",
        "db_id": "school_finance"
    },
    {
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "context": "CREATE TABLE school (school_name VARCHAR, school_id VARCHAR); CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)",
        "answer": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "db_id": "school_finance"
    },
    {
        "question": "Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"",
        "context": "CREATE TABLE school (school_id VARCHAR, school_name VARCHAR); CREATE TABLE endowment (donator_name VARCHAR, school_id VARCHAR)",
        "answer": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'",
        "db_id": "school_finance"
    },
    {
        "question": "Show the names of all the donors except those whose donation amount less than 9.",
        "context": "CREATE TABLE endowment (donator_name VARCHAR, amount INTEGER)",
        "answer": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9",
        "db_id": "school_finance"
    },
    {
        "question": "List the amount and donor name for the largest amount of donation.",
        "context": "CREATE TABLE endowment (amount VARCHAR, donator_name VARCHAR)",
        "answer": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "db_id": "school_finance"
    },
    {
        "question": "How many budgets are above 3000 in year 2001 or before?",
        "context": "CREATE TABLE budget (budgeted VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "db_id": "school_finance"
    },
    {
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "context": "CREATE TABLE budget (budgeted VARCHAR, invested VARCHAR, school_id VARCHAR, year VARCHAR); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)",
        "answer": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "db_id": "school_finance"
    },
    {
        "question": "Show all donor names.",
        "context": "CREATE TABLE endowment (donator_name VARCHAR)",
        "answer": "SELECT DISTINCT donator_name FROM endowment",
        "db_id": "school_finance"
    },
    {
        "question": "How many budget record has a budget amount smaller than the invested amount?",
        "context": "CREATE TABLE budget (budgeted INTEGER, invested VARCHAR)",
        "answer": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
        "db_id": "school_finance"
    },
    {
        "question": "What is the total budget amount for school \"Glenn\" in all years?",
        "context": "CREATE TABLE budget (budgeted INTEGER, school_id VARCHAR); CREATE TABLE school (school_id VARCHAR, school_name VARCHAR)",
        "answer": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'",
        "db_id": "school_finance"
    },
    {
        "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "context": "CREATE TABLE endowment (school_id VARCHAR, amount INTEGER); CREATE TABLE budget (school_id VARCHAR, budgeted INTEGER); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)",
        "answer": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
        "db_id": "school_finance"
    },
    {
        "question": "Find the names of schools that have more than one donator with donation amount above 8.5.",
        "context": "CREATE TABLE school (School_name VARCHAR, school_id VARCHAR); CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)",
        "answer": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1",
        "db_id": "school_finance"
    },
    {
        "question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.",
        "context": "CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)",
        "answer": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)",
        "db_id": "school_finance"
    },
    {
        "question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.",
        "context": "CREATE TABLE school (School_name VARCHAR, Mascot VARCHAR, IHSAA_Football_Class VARCHAR, school_id VARCHAR); CREATE TABLE budget (school_id VARCHAR, total_budget_percent_invested VARCHAR, total_budget_percent_budgeted VARCHAR)",
        "answer": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted",
        "db_id": "school_finance"
    },
    {
        "question": "How many buildings are there?",
        "context": "CREATE TABLE building (Id VARCHAR)",
        "answer": "SELECT count(*) FROM building",
        "db_id": "protein_institute"
    },
    {
        "question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.",
        "context": "CREATE TABLE building (name VARCHAR, street_address VARCHAR, floors VARCHAR)",
        "answer": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors",
        "db_id": "protein_institute"
    },
    {
        "question": "What is the name of the tallest building?",
        "context": "CREATE TABLE building (name VARCHAR, height_feet VARCHAR)",
        "answer": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1",
        "db_id": "protein_institute"
    },
    {
        "question": "What are the average, maximum, and minimum number of floors for all buildings?",
        "context": "CREATE TABLE building (floors INTEGER)",
        "answer": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building",
        "db_id": "protein_institute"
    },
    {
        "question": "Show the number of buildings with a height above the average or a number of floors above the average.",
        "context": "CREATE TABLE building (height_feet INTEGER, floors INTEGER)",
        "answer": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)",
        "db_id": "protein_institute"
    },
    {
        "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
        "context": "CREATE TABLE building (name VARCHAR, height_feet VARCHAR, floors VARCHAR)",
        "answer": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20",
        "db_id": "protein_institute"
    },
    {
        "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
        "context": "CREATE TABLE institution (institution VARCHAR, LOCATION VARCHAR, founded VARCHAR, TYPE VARCHAR)",
        "answer": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'",
        "db_id": "protein_institute"
    },
    {
        "question": "Show institution types, along with the number of institutions and total enrollment for each type.",
        "context": "CREATE TABLE institution (TYPE VARCHAR, enrollment INTEGER)",
        "answer": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE",
        "db_id": "protein_institute"
    },
    {
        "question": "Show the institution type with the largest number of institutions.",
        "context": "CREATE TABLE institution (TYPE VARCHAR)",
        "answer": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "db_id": "protein_institute"
    },
    {
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "context": "CREATE TABLE institution (TYPE VARCHAR, founded VARCHAR, enrollment VARCHAR)",
        "answer": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000",
        "db_id": "protein_institute"
    },
    {
        "question": "Show the name of buildings that do not have any institution.",
        "context": "CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE institution (name VARCHAR, building_id VARCHAR)",
        "answer": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)",
        "db_id": "protein_institute"
    },
    {
        "question": "Show the names of buildings except for those having an institution founded in 2003.",
        "context": "CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE building (name VARCHAR); CREATE TABLE institution (building_id VARCHAR, founded VARCHAR)",
        "answer": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003",
        "db_id": "protein_institute"
    },
    {
        "question": "For each building, show the name of the building and the number of institutions in it.",
        "context": "CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE institution (building_id VARCHAR)",
        "answer": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id",
        "db_id": "protein_institute"
    },
    {
        "question": "Show the names and heights of buildings with at least two institutions founded after 1880.",
        "context": "CREATE TABLE building (name VARCHAR, height_feet VARCHAR, building_id VARCHAR); CREATE TABLE institution (building_id VARCHAR, founded INTEGER)",
        "answer": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2",
        "db_id": "protein_institute"
    },
    {
        "question": "Show all the distinct institution types.",
        "context": "CREATE TABLE institution (TYPE VARCHAR)",
        "answer": "SELECT DISTINCT TYPE FROM institution",
        "db_id": "protein_institute"
    },
    {
        "question": "Show institution names along with the number of proteins for each institution.",
        "context": "CREATE TABLE institution (institution VARCHAR, institution_id VARCHAR); CREATE TABLE protein (institution_id VARCHAR)",
        "answer": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id",
        "db_id": "protein_institute"
    },
    {
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "context": "CREATE TABLE institution (institution_id VARCHAR, founded VARCHAR, type VARCHAR); CREATE TABLE protein (institution_id VARCHAR)",
        "answer": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "db_id": "protein_institute"
    },
    {
        "question": "Show the protein name and the institution name.",
        "context": "CREATE TABLE institution (institution VARCHAR, institution_id VARCHAR); CREATE TABLE protein (protein_name VARCHAR, institution_id VARCHAR)",
        "answer": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "db_id": "protein_institute"
    },
    {
        "question": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "context": "CREATE TABLE institution (institution_id VARCHAR, building_id VARCHAR); CREATE TABLE building (building_id VARCHAR, floors VARCHAR); CREATE TABLE protein (institution_id VARCHAR)",
        "answer": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "db_id": "protein_institute"
    },
    {
        "question": "How many institutions do not have an associated protein in our record?",
        "context": "CREATE TABLE protein (institution_id VARCHAR); CREATE TABLE institution (institution_id VARCHAR)",
        "answer": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)",
        "db_id": "protein_institute"
    },
    {
        "question": "Show all the locations where no cinema has capacity over 800.",
        "context": "CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)",
        "answer": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800",
        "db_id": "cinema"
    },
    {
        "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
        "context": "CREATE TABLE cinema (LOCATION VARCHAR, openning_year VARCHAR)",
        "answer": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011",
        "db_id": "cinema"
    },
    {
        "question": "How many cinema do we have?",
        "context": "CREATE TABLE cinema (Id VARCHAR)",
        "answer": "SELECT count(*) FROM cinema",
        "db_id": "cinema"
    },
    {
        "question": "Show name, opening year, and capacity for each cinema.",
        "context": "CREATE TABLE cinema (name VARCHAR, openning_year VARCHAR, capacity VARCHAR)",
        "answer": "SELECT name ,  openning_year ,  capacity FROM cinema",
        "db_id": "cinema"
    },
    {
        "question": "Show the cinema name and location for cinemas with capacity above average.",
        "context": "CREATE TABLE cinema (name VARCHAR, LOCATION VARCHAR, capacity INTEGER)",
        "answer": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)",
        "db_id": "cinema"
    },
    {
        "question": "What are all the locations with a cinema?",
        "context": "CREATE TABLE cinema (LOCATION VARCHAR)",
        "answer": "SELECT DISTINCT LOCATION FROM cinema",
        "db_id": "cinema"
    },
    {
        "question": "Show all the cinema names and opening years in descending order of opening year.",
        "context": "CREATE TABLE cinema (name VARCHAR, openning_year VARCHAR)",
        "answer": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC",
        "db_id": "cinema"
    },
    {
        "question": "What are the name and location of the cinema with the largest capacity?",
        "context": "CREATE TABLE cinema (name VARCHAR, LOCATION VARCHAR, capacity VARCHAR)",
        "answer": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
        "db_id": "cinema"
    },
    {
        "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
        "context": "CREATE TABLE cinema (capacity INTEGER, openning_year VARCHAR)",
        "answer": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",
        "db_id": "cinema"
    },
    {
        "question": "Show each location and the number of cinemas there.",
        "context": "CREATE TABLE cinema (LOCATION VARCHAR)",
        "answer": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION",
        "db_id": "cinema"
    },
    {
        "question": "What is the location with the most cinemas opened in year 2010 or later?",
        "context": "CREATE TABLE cinema (LOCATION VARCHAR, openning_year VARCHAR)",
        "answer": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cinema"
    },
    {
        "question": "Show all the locations with at least two cinemas with capacity above 300.",
        "context": "CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)",
        "answer": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
        "db_id": "cinema"
    },
    {
        "question": "Show the title and director for all films.",
        "context": "CREATE TABLE film (title VARCHAR, directed_by VARCHAR)",
        "answer": "SELECT title ,  directed_by FROM film",
        "db_id": "cinema"
    },
    {
        "question": "Show all directors.",
        "context": "CREATE TABLE film (directed_by VARCHAR)",
        "answer": "SELECT DISTINCT directed_by FROM film",
        "db_id": "cinema"
    },
    {
        "question": "List all directors along with the number of films directed by each director.",
        "context": "CREATE TABLE film (directed_by VARCHAR)",
        "answer": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
        "db_id": "cinema"
    },
    {
        "question": "What is total number of show times per dat for each cinema?",
        "context": "CREATE TABLE schedule (show_times_per_day INTEGER, cinema_id VARCHAR); CREATE TABLE cinema (name VARCHAR, cinema_id VARCHAR)",
        "answer": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
        "db_id": "cinema"
    },
    {
        "question": "What are the title and maximum price of each film?",
        "context": "CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE schedule (price INTEGER, film_id VARCHAR)",
        "answer": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
        "db_id": "cinema"
    },
    {
        "question": "Show cinema name, film title, date, and price for each record in schedule.",
        "context": "CREATE TABLE schedule (date VARCHAR, price VARCHAR, film_id VARCHAR, cinema_id VARCHAR); CREATE TABLE cinema (name VARCHAR, cinema_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR)",
        "answer": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id",
        "db_id": "cinema"
    },
    {
        "question": "What are the title and director of the films without any schedule?",
        "context": "CREATE TABLE schedule (title VARCHAR, directed_by VARCHAR, film_id VARCHAR); CREATE TABLE film (title VARCHAR, directed_by VARCHAR, film_id VARCHAR)",
        "answer": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
        "db_id": "cinema"
    },
    {
        "question": "Show director with the largest number of show times in total.",
        "context": "CREATE TABLE schedule (film_id VARCHAR, show_times_per_day INTEGER); CREATE TABLE film (directed_by VARCHAR, film_id VARCHAR)",
        "answer": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
        "db_id": "cinema"
    },
    {
        "question": "Find the locations that have more than one movie theater with capacity above 300.",
        "context": "CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)",
        "answer": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "db_id": "cinema"
    },
    {
        "question": "How many films have the word 'Dummy' in their titles?",
        "context": "CREATE TABLE film (title VARCHAR)",
        "answer": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
        "db_id": "cinema"
    },
    {
        "question": "Are the customers holding coupons with amount 500 bad or good?",
        "context": "CREATE TABLE discount_coupons (coupon_id VARCHAR, coupon_amount VARCHAR); CREATE TABLE customers (good_or_bad_customer VARCHAR, coupon_id VARCHAR)",
        "answer": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500",
        "db_id": "products_for_hire"
    },
    {
        "question": "How many bookings did each customer make? List the customer id, first name, and the count.",
        "context": "CREATE TABLE bookings (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR)",
        "answer": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "db_id": "products_for_hire"
    },
    {
        "question": "What is the maximum total amount paid by a customer? List the customer id and amount.",
        "context": "CREATE TABLE Payments (customer_id VARCHAR, amount_paid INTEGER)",
        "answer": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "context": "CREATE TABLE Payments (booking_id VARCHAR); CREATE TABLE Bookings (booking_id VARCHAR, amount_of_refund VARCHAR)",
        "answer": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "products_for_hire"
    },
    {
        "question": "What is the id of the product that is booked for 3 times?",
        "context": "CREATE TABLE products_booked (product_id VARCHAR)",
        "answer": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3",
        "db_id": "products_for_hire"
    },
    {
        "question": "What is the product description of the product booked with an amount of 102.76?",
        "context": "CREATE TABLE products_for_hire (product_description VARCHAR, product_id VARCHAR); CREATE TABLE products_booked (product_id VARCHAR, booked_amount VARCHAR)",
        "answer": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76",
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "context": "CREATE TABLE bookings (booking_start_date VARCHAR, booking_end_date VARCHAR, booking_id VARCHAR); CREATE TABLE products_booked (product_id VARCHAR, booking_id VARCHAR); CREATE TABLE Products_for_hire (product_id VARCHAR, product_name VARCHAR)",
        "answer": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the names of products whose availability equals to 1?",
        "context": "CREATE TABLE view_product_availability (product_id VARCHAR, available_yn VARCHAR); CREATE TABLE products_for_hire (product_name VARCHAR, product_id VARCHAR)",
        "answer": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1",
        "db_id": "products_for_hire"
    },
    {
        "question": "How many different product types are there?",
        "context": "CREATE TABLE products_for_hire (product_type_code VARCHAR)",
        "answer": "SELECT count(DISTINCT product_type_code) FROM products_for_hire",
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "context": "CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, gender_mf VARCHAR, good_or_bad_customer VARCHAR)",
        "answer": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name",
        "db_id": "products_for_hire"
    },
    {
        "question": "What is the average amount due for all the payments?",
        "context": "CREATE TABLE payments (amount_due INTEGER)",
        "answer": "SELECT avg(amount_due) FROM payments",
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the maximum, minimum, and average booked count for the products booked?",
        "context": "CREATE TABLE products_booked (booked_count INTEGER)",
        "answer": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked",
        "db_id": "products_for_hire"
    },
    {
        "question": "What are all the distinct payment types?",
        "context": "CREATE TABLE payments (payment_type_code VARCHAR)",
        "answer": "SELECT DISTINCT payment_type_code FROM payments",
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the daily hire costs for the products with substring 'Book' in its name?",
        "context": "CREATE TABLE Products_for_hire (daily_hire_cost VARCHAR, product_name VARCHAR)",
        "answer": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
        "db_id": "products_for_hire"
    },
    {
        "question": "How many products are never booked with amount higher than 200?",
        "context": "CREATE TABLE products_booked (product_id VARCHAR, booked_amount INTEGER); CREATE TABLE Products_for_hire (product_id VARCHAR, booked_amount INTEGER)",
        "answer": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )",
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "context": "CREATE TABLE Discount_Coupons (coupon_amount VARCHAR, coupon_id VARCHAR); CREATE TABLE customers (coupon_id VARCHAR, good_or_bad_customer VARCHAR)",
        "answer": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'",
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "context": "CREATE TABLE payments (payment_date VARCHAR, amount_paid VARCHAR, payment_type_code VARCHAR)",
        "answer": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'",
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "context": "CREATE TABLE products_for_hire (product_name VARCHAR, product_description VARCHAR, product_type_code VARCHAR, daily_hire_cost VARCHAR)",
        "answer": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20",
        "db_id": "products_for_hire"
    },
    {
        "question": "How many phones are there?",
        "context": "CREATE TABLE phone (Id VARCHAR)",
        "answer": "SELECT count(*) FROM phone",
        "db_id": "phone_market"
    },
    {
        "question": "List the names of phones in ascending order of price.",
        "context": "CREATE TABLE phone (Name VARCHAR, Price VARCHAR)",
        "answer": "SELECT Name FROM phone ORDER BY Price ASC",
        "db_id": "phone_market"
    },
    {
        "question": "What are the memories and carriers of phones?",
        "context": "CREATE TABLE phone (Memory_in_G VARCHAR, Carrier VARCHAR)",
        "answer": "SELECT Memory_in_G ,  Carrier FROM phone",
        "db_id": "phone_market"
    },
    {
        "question": "List the distinct carriers of phones with memories bigger than 32.",
        "context": "CREATE TABLE phone (Carrier VARCHAR, Memory_in_G INTEGER)",
        "answer": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32",
        "db_id": "phone_market"
    },
    {
        "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
        "context": "CREATE TABLE phone (Name VARCHAR, Carrier VARCHAR)",
        "answer": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
        "db_id": "phone_market"
    },
    {
        "question": "What is the carrier of the most expensive phone?",
        "context": "CREATE TABLE phone (Carrier VARCHAR, Price VARCHAR)",
        "answer": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
        "db_id": "phone_market"
    },
    {
        "question": "Show different carriers of phones together with the number of phones with each carrier.",
        "context": "CREATE TABLE phone (Carrier VARCHAR)",
        "answer": "SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier",
        "db_id": "phone_market"
    },
    {
        "question": "Show the most frequently used carrier of the phones.",
        "context": "CREATE TABLE phone (Carrier VARCHAR)",
        "answer": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "phone_market"
    },
    {
        "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
        "context": "CREATE TABLE phone (Carrier VARCHAR, Memory_in_G INTEGER)",
        "answer": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
        "db_id": "phone_market"
    },
    {
        "question": "Show the names of phones and the districts of markets they are on.",
        "context": "CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE market (District VARCHAR, Market_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)",
        "answer": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "db_id": "phone_market"
    },
    {
        "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
        "context": "CREATE TABLE market (District VARCHAR, Market_ID VARCHAR, Ranking VARCHAR); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)",
        "answer": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking",
        "db_id": "phone_market"
    },
    {
        "question": "Show the names of phones that are on market with number of shops greater than 50.",
        "context": "CREATE TABLE market (Market_ID VARCHAR, Num_of_shops INTEGER); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)",
        "answer": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50",
        "db_id": "phone_market"
    },
    {
        "question": "For each phone, show its names and total number of stocks.",
        "context": "CREATE TABLE phone_market (Num_of_stock INTEGER, Phone_ID VARCHAR); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name",
        "db_id": "phone_market"
    },
    {
        "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
        "context": "CREATE TABLE phone_market (Phone_ID VARCHAR, Num_of_stock INTEGER); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC",
        "db_id": "phone_market"
    },
    {
        "question": "List the names of phones that are not on any market.",
        "context": "CREATE TABLE phone (Name VARCHAR, Phone_id VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Name VARCHAR, Phone_id VARCHAR, Phone_ID VARCHAR)",
        "answer": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)",
        "db_id": "phone_market"
    },
    {
        "question": "How many gas companies are there?",
        "context": "CREATE TABLE company (Id VARCHAR)",
        "answer": "SELECT count(*) FROM company",
        "db_id": "gas_company"
    },
    {
        "question": "List the company name and rank for all companies in the decreasing order of their sales.",
        "context": "CREATE TABLE company (company VARCHAR, rank VARCHAR, Sales_billion VARCHAR)",
        "answer": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC",
        "db_id": "gas_company"
    },
    {
        "question": "Show the company name and the main industry for all companies whose headquarters are not from USA.",
        "context": "CREATE TABLE company (company VARCHAR, main_industry VARCHAR, headquarters VARCHAR)",
        "answer": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",
        "db_id": "gas_company"
    },
    {
        "question": "Show all company names and headquarters in the descending order of market value.",
        "context": "CREATE TABLE company (company VARCHAR, headquarters VARCHAR, market_value VARCHAR)",
        "answer": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
        "db_id": "gas_company"
    },
    {
        "question": "Show minimum, maximum, and average market value for all companies.",
        "context": "CREATE TABLE company (market_value INTEGER)",
        "answer": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
        "db_id": "gas_company"
    },
    {
        "question": "Show all main industry for all companies.",
        "context": "CREATE TABLE company (main_industry VARCHAR)",
        "answer": "SELECT DISTINCT main_industry FROM company",
        "db_id": "gas_company"
    },
    {
        "question": "List all headquarters and the number of companies in each headquarter.",
        "context": "CREATE TABLE company (headquarters VARCHAR)",
        "answer": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters",
        "db_id": "gas_company"
    },
    {
        "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
        "context": "CREATE TABLE company (Headquarters VARCHAR)",
        "answer": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters",
        "db_id": "gas_company"
    },
    {
        "question": "Show all main industry and total market value in each industry.",
        "context": "CREATE TABLE company (main_industry VARCHAR, market_value INTEGER)",
        "answer": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry",
        "db_id": "gas_company"
    },
    {
        "question": "List the main industry with highest total market value and its number of companies.",
        "context": "CREATE TABLE company (main_industry VARCHAR, market_value INTEGER)",
        "answer": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "db_id": "gas_company"
    },
    {
        "question": "Show headquarters with at least two companies in the banking industry.",
        "context": "CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)",
        "answer": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
        "db_id": "gas_company"
    },
    {
        "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.",
        "context": "CREATE TABLE gas_station (station_id VARCHAR, LOCATION VARCHAR, manager_name VARCHAR, open_year VARCHAR)",
        "answer": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year",
        "db_id": "gas_company"
    },
    {
        "question": "How many gas station are opened between 2000 and 2005?",
        "context": "CREATE TABLE gas_station (open_year INTEGER)",
        "answer": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
        "db_id": "gas_company"
    },
    {
        "question": "Show all locations and the number of gas stations in each location ordered by the count.",
        "context": "CREATE TABLE gas_station (LOCATION VARCHAR)",
        "answer": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
        "db_id": "gas_company"
    },
    {
        "question": "Show all headquarters with both a company in banking industry and a company in Oil and gas.",
        "context": "CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)",
        "answer": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
        "db_id": "gas_company"
    },
    {
        "question": "Show all headquarters without a company in banking industry.",
        "context": "CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)",
        "answer": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
        "db_id": "gas_company"
    },
    {
        "question": "Show the company name with the number of gas station.",
        "context": "CREATE TABLE station_company (company_id VARCHAR); CREATE TABLE company (company VARCHAR, company_id VARCHAR)",
        "answer": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "db_id": "gas_company"
    },
    {
        "question": "Show company name and main industry without a gas station.",
        "context": "CREATE TABLE station_company (company VARCHAR, main_industry VARCHAR, company_id VARCHAR); CREATE TABLE company (company VARCHAR, main_industry VARCHAR, company_id VARCHAR)",
        "answer": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "db_id": "gas_company"
    },
    {
        "question": "Show the manager name for gas stations belonging to the ExxonMobil company.",
        "context": "CREATE TABLE gas_station (manager_name VARCHAR, station_id VARCHAR); CREATE TABLE station_company (company_id VARCHAR, station_id VARCHAR); CREATE TABLE company (company_id VARCHAR, company VARCHAR)",
        "answer": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'",
        "db_id": "gas_company"
    },
    {
        "question": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "context": "CREATE TABLE gas_station (location VARCHAR, station_id VARCHAR); CREATE TABLE company (company_id VARCHAR, market_value INTEGER); CREATE TABLE station_company (company_id VARCHAR, station_id VARCHAR)",
        "answer": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100",
        "db_id": "gas_company"
    },
    {
        "question": "Show the manager name with most number of gas stations opened after 2000.",
        "context": "CREATE TABLE gas_station (manager_name VARCHAR, open_year INTEGER)",
        "answer": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "gas_company"
    },
    {
        "question": "order all gas station locations by the opening year.",
        "context": "CREATE TABLE gas_station (LOCATION VARCHAR, open_year VARCHAR)",
        "answer": "SELECT LOCATION FROM gas_station ORDER BY open_year",
        "db_id": "gas_company"
    },
    {
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "context": "CREATE TABLE company (rank VARCHAR, company VARCHAR, market_value VARCHAR, main_industry VARCHAR, sales_billion VARCHAR, profits_billion VARCHAR)",
        "answer": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "db_id": "gas_company"
    },
    {
        "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "context": "CREATE TABLE gas_station (location VARCHAR, Representative_Name VARCHAR, station_id VARCHAR); CREATE TABLE station_company (company_id VARCHAR, station_id VARCHAR); CREATE TABLE company (company_id VARCHAR, Assets_billion VARCHAR)",
        "answer": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "db_id": "gas_company"
    },
    {
        "question": "How many regions do we have?",
        "context": "CREATE TABLE region (Id VARCHAR)",
        "answer": "SELECT count(*) FROM region",
        "db_id": "party_people"
    },
    {
        "question": "Show all distinct region names ordered by their labels.",
        "context": "CREATE TABLE region (region_name VARCHAR, Label VARCHAR)",
        "answer": "SELECT DISTINCT region_name FROM region ORDER BY Label",
        "db_id": "party_people"
    },
    {
        "question": "How many parties do we have?",
        "context": "CREATE TABLE party (party_name VARCHAR)",
        "answer": "SELECT count(DISTINCT party_name) FROM party",
        "db_id": "party_people"
    },
    {
        "question": "Show the ministers and the time they took and left office, listed by the time they left office.",
        "context": "CREATE TABLE party (minister VARCHAR, took_office VARCHAR, left_office VARCHAR)",
        "answer": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office",
        "db_id": "party_people"
    },
    {
        "question": "Show the minister who took office after 1961 or before 1959.",
        "context": "CREATE TABLE party (minister VARCHAR, took_office VARCHAR)",
        "answer": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959",
        "db_id": "party_people"
    },
    {
        "question": "Show all ministers who do not belong to Progress Party.",
        "context": "CREATE TABLE party (minister VARCHAR, party_name VARCHAR)",
        "answer": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
        "db_id": "party_people"
    },
    {
        "question": "Show all ministers and parties they belong to in descending order of the time they took office.",
        "context": "CREATE TABLE party (minister VARCHAR, party_name VARCHAR, took_office VARCHAR)",
        "answer": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC",
        "db_id": "party_people"
    },
    {
        "question": "Return the minister who left office at the latest time.",
        "context": "CREATE TABLE party (minister VARCHAR, left_office VARCHAR)",
        "answer": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1",
        "db_id": "party_people"
    },
    {
        "question": "List member names and their party names.",
        "context": "CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (member_name VARCHAR, party_id VARCHAR)",
        "answer": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id",
        "db_id": "party_people"
    },
    {
        "question": "Show all party names and the number of members in each party.",
        "context": "CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (party_id VARCHAR)",
        "answer": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "db_id": "party_people"
    },
    {
        "question": "What is the name of party with most number of members?",
        "context": "CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (party_id VARCHAR)",
        "answer": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "party_people"
    },
    {
        "question": "Show all party names and their region names.",
        "context": "CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE party (party_name VARCHAR, region_id VARCHAR)",
        "answer": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id",
        "db_id": "party_people"
    },
    {
        "question": "Show names of parties that does not have any members.",
        "context": "CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (party_name VARCHAR, party_id VARCHAR)",
        "answer": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)",
        "db_id": "party_people"
    },
    {
        "question": "Show the member names which are in both the party with id 3 and the party with id 1.",
        "context": "CREATE TABLE member (member_name VARCHAR, party_id VARCHAR)",
        "answer": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1",
        "db_id": "party_people"
    },
    {
        "question": "Show member names that are not in the Progress Party.",
        "context": "CREATE TABLE party (party_id VARCHAR, Party_name VARCHAR); CREATE TABLE Member (member_name VARCHAR, party_id VARCHAR)",
        "answer": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"",
        "db_id": "party_people"
    },
    {
        "question": "How many party events do we have?",
        "context": "CREATE TABLE party_events (Id VARCHAR)",
        "answer": "SELECT count(*) FROM party_events",
        "db_id": "party_people"
    },
    {
        "question": "Show party names and the number of events for each party.",
        "context": "CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE party_events (party_id VARCHAR)",
        "answer": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
        "db_id": "party_people"
    },
    {
        "question": "Show all member names who are not in charge of any event.",
        "context": "CREATE TABLE member (member_name VARCHAR); CREATE TABLE party_events (member_in_charge_id VARCHAR); CREATE TABLE member (member_name VARCHAR, member_id VARCHAR)",
        "answer": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id",
        "db_id": "party_people"
    },
    {
        "question": "What are the names of parties with at least 2 events?",
        "context": "CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE party_events (party_id VARCHAR)",
        "answer": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2",
        "db_id": "party_people"
    },
    {
        "question": "What is the name of member in charge of greatest number of events?",
        "context": "CREATE TABLE party_events (member_in_charge_id VARCHAR); CREATE TABLE member (member_name VARCHAR, member_id VARCHAR)",
        "answer": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "party_people"
    },
    {
        "question": "find the event names that have more than 2 records.",
        "context": "CREATE TABLE party_events (event_name VARCHAR)",
        "answer": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
        "db_id": "party_people"
    },
    {
        "question": "How many Annual Meeting events happened in the United Kingdom region?",
        "context": "CREATE TABLE party_events (party_id VARCHAR, Event_Name VARCHAR); CREATE TABLE region (region_id VARCHAR, region_name VARCHAR); CREATE TABLE party (region_id VARCHAR, party_id VARCHAR)",
        "answer": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
        "db_id": "party_people"
    },
    {
        "question": "How many pilots are there?",
        "context": "CREATE TABLE pilot (Id VARCHAR)",
        "answer": "SELECT count(*) FROM pilot",
        "db_id": "pilot_record"
    },
    {
        "question": "List the names of pilots in ascending order of rank.",
        "context": "CREATE TABLE pilot (Pilot_name VARCHAR, Rank VARCHAR)",
        "answer": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
        "db_id": "pilot_record"
    },
    {
        "question": "What are the positions and teams of pilots?",
        "context": "CREATE TABLE pilot (POSITION VARCHAR, Team VARCHAR)",
        "answer": "SELECT POSITION ,  Team FROM pilot",
        "db_id": "pilot_record"
    },
    {
        "question": "List the distinct positions of pilots older than 30.",
        "context": "CREATE TABLE pilot (POSITION VARCHAR, Age INTEGER)",
        "answer": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30",
        "db_id": "pilot_record"
    },
    {
        "question": "Show the names of pilots from team \"Bradley\" or \"Fordham\".",
        "context": "CREATE TABLE pilot (Pilot_name VARCHAR, Team VARCHAR)",
        "answer": "SELECT Pilot_name FROM pilot WHERE Team  =  \"Bradley\" OR Team  =  \"Fordham\"",
        "db_id": "pilot_record"
    },
    {
        "question": "What is the joined year of the pilot of the highest rank?",
        "context": "CREATE TABLE pilot (Join_Year VARCHAR, Rank VARCHAR)",
        "answer": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
        "db_id": "pilot_record"
    },
    {
        "question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
        "context": "CREATE TABLE pilot (Nationality VARCHAR)",
        "answer": "SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality",
        "db_id": "pilot_record"
    },
    {
        "question": "Show the most common nationality of pilots.",
        "context": "CREATE TABLE pilot (Nationality VARCHAR)",
        "answer": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "pilot_record"
    },
    {
        "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "context": "CREATE TABLE pilot (POSITION VARCHAR, Join_Year INTEGER)",
        "answer": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005",
        "db_id": "pilot_record"
    },
    {
        "question": "Show the names of pilots and models of aircrafts they have flied with.",
        "context": "CREATE TABLE pilot_record (Aircraft_ID VARCHAR, Pilot_ID VARCHAR); CREATE TABLE pilot (Pilot_name VARCHAR, Pilot_ID VARCHAR); CREATE TABLE aircraft (Model VARCHAR, Aircraft_ID VARCHAR)",
        "answer": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID",
        "db_id": "pilot_record"
    },
    {
        "question": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.",
        "context": "CREATE TABLE pilot (Pilot_name VARCHAR, Pilot_ID VARCHAR, Rank VARCHAR); CREATE TABLE pilot_record (Aircraft_ID VARCHAR, Pilot_ID VARCHAR); CREATE TABLE aircraft (Fleet_Series VARCHAR, Aircraft_ID VARCHAR)",
        "answer": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank",
        "db_id": "pilot_record"
    },
    {
        "question": "Show the fleet series of the aircrafts flied by pilots younger than 34",
        "context": "CREATE TABLE pilot_record (Aircraft_ID VARCHAR, Pilot_ID VARCHAR); CREATE TABLE pilot (Pilot_ID VARCHAR, Age INTEGER); CREATE TABLE aircraft (Fleet_Series VARCHAR, Aircraft_ID VARCHAR)",
        "answer": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34",
        "db_id": "pilot_record"
    },
    {
        "question": "Show the names of pilots and the number of records they have.",
        "context": "CREATE TABLE pilot (Pilot_name VARCHAR, pilot_ID VARCHAR); CREATE TABLE pilot_record (pilot_ID VARCHAR)",
        "answer": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "db_id": "pilot_record"
    },
    {
        "question": "Show names of pilots that have more than one record.",
        "context": "CREATE TABLE pilot (Pilot_name VARCHAR, pilot_ID VARCHAR); CREATE TABLE pilot_record (pilot_ID VARCHAR)",
        "answer": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",
        "db_id": "pilot_record"
    },
    {
        "question": "List the names of pilots that do not have any record.",
        "context": "CREATE TABLE pilot_record (Pilot_name VARCHAR, Pilot_ID VARCHAR); CREATE TABLE pilot (Pilot_name VARCHAR, Pilot_ID VARCHAR)",
        "answer": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)",
        "db_id": "pilot_record"
    },
    {
        "question": "What document status codes do we have?",
        "context": "CREATE TABLE Ref_Document_Status (document_status_code VARCHAR)",
        "answer": "SELECT document_status_code FROM Ref_Document_Status;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What is the description of document status code 'working'?",
        "context": "CREATE TABLE Ref_Document_Status (document_status_description VARCHAR, document_status_code VARCHAR)",
        "answer": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What document type codes do we have?",
        "context": "CREATE TABLE Ref_Document_Types (document_type_code VARCHAR)",
        "answer": "SELECT document_type_code FROM Ref_Document_Types;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What is the description of document type 'Paper'?",
        "context": "CREATE TABLE Ref_Document_Types (document_type_description VARCHAR, document_type_code VARCHAR)",
        "answer": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What are the shipping agent names?",
        "context": "CREATE TABLE Ref_Shipping_Agents (shipping_agent_name VARCHAR)",
        "answer": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What is the shipping agent code of shipping agent UPS?",
        "context": "CREATE TABLE Ref_Shipping_Agents (shipping_agent_code VARCHAR, shipping_agent_name VARCHAR)",
        "answer": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What are all role codes?",
        "context": "CREATE TABLE ROLES (role_code VARCHAR)",
        "answer": "SELECT role_code FROM ROLES;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What is the description of role code ED?",
        "context": "CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR)",
        "answer": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "How many employees do we have?",
        "context": "CREATE TABLE Employees (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Employees;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What is the role of the employee named Koby?",
        "context": "CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR); CREATE TABLE Employees (role_code VARCHAR, employee_name VARCHAR)",
        "answer": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "List all document ids and receipt dates of documents.",
        "context": "CREATE TABLE Documents (document_id VARCHAR, receipt_date VARCHAR)",
        "answer": "SELECT document_id ,  receipt_date FROM Documents;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "How many employees does each role have? List role description, id and number of employees.",
        "context": "CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR); CREATE TABLE Employees (role_code VARCHAR)",
        "answer": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "List roles that have more than one employee. List the role description and number of employees.",
        "context": "CREATE TABLE ROLES (Id VARCHAR); CREATE TABLE Employees (Id VARCHAR)",
        "answer": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What is the document status description of the document with id 1?",
        "context": "CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Document_Status (Id VARCHAR)",
        "answer": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "How many documents have the status code done?",
        "context": "CREATE TABLE Documents (document_status_code VARCHAR)",
        "answer": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "List the document type code for the document with the id 2.",
        "context": "CREATE TABLE Documents (document_type_code VARCHAR, document_id VARCHAR)",
        "answer": "SELECT document_type_code FROM Documents WHERE document_id = 2;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "List the document ids for any documents with the status code done and the type code paper.",
        "context": "CREATE TABLE Documents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR)",
        "answer": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What is the name of the shipping agent of the document with id 2?",
        "context": "CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Shipping_Agents (Id VARCHAR)",
        "answer": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "How many documents were shipped by USPS?",
        "context": "CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Shipping_Agents (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "context": "CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Shipping_Agents (Id VARCHAR)",
        "answer": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What is the receipt date of the document with id 3?",
        "context": "CREATE TABLE Documents (receipt_date VARCHAR, document_id VARCHAR)",
        "answer": "SELECT receipt_date FROM Documents WHERE document_id = 3;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What address was the document with id 4 mailed to?",
        "context": "CREATE TABLE Addresses (document_id VARCHAR); CREATE TABLE Documents_Mailed (document_id VARCHAR)",
        "answer": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What is the mail date of the document with id 7?",
        "context": "CREATE TABLE Documents_Mailed (mailing_date VARCHAR, document_id VARCHAR)",
        "answer": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "context": "CREATE TABLE Ref_Shipping_Agents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR)",
        "answer": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "context": "CREATE TABLE Ref_Shipping_Agents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR)",
        "answer": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "What is draft detail of the document with id 7?",
        "context": "CREATE TABLE Document_Drafts (draft_details VARCHAR, document_id VARCHAR)",
        "answer": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "How many draft copies does the document with id 2 have?",
        "context": "CREATE TABLE Draft_Copies (document_id VARCHAR)",
        "answer": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "Which document has the most draft copies? List its document id and number of draft copies.",
        "context": "CREATE TABLE Draft_Copies (document_id VARCHAR, copy_number VARCHAR)",
        "answer": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.",
        "context": "CREATE TABLE Draft_Copies (document_id VARCHAR)",
        "answer": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "List all employees in the circulation history of the document with id 1. List the employee's name.",
        "context": "CREATE TABLE Circulation_History (Id VARCHAR); CREATE TABLE Employees (Id VARCHAR)",
        "answer": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "context": "CREATE TABLE Circulation_History (employee_name VARCHAR); CREATE TABLE Employees (employee_name VARCHAR)",
        "answer": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
        "context": "CREATE TABLE Circulation_History (Id VARCHAR); CREATE TABLE Employees (Id VARCHAR)",
        "answer": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
        "context": "CREATE TABLE Circulation_History (document_id VARCHAR, employee_id VARCHAR)",
        "answer": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;",
        "db_id": "cre_Doc_Control_Systems"
    },
    {
        "question": "List all department names ordered by their starting date.",
        "context": "CREATE TABLE department (dname VARCHAR, mgr_start_date VARCHAR)",
        "answer": "SELECT dname FROM department ORDER BY mgr_start_date",
        "db_id": "company_1"
    },
    {
        "question": "find all dependent names who have a spouse relation with some employee.",
        "context": "CREATE TABLE dependent (Dependent_name VARCHAR, relationship VARCHAR)",
        "answer": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'",
        "db_id": "company_1"
    },
    {
        "question": "how many female dependents are there?",
        "context": "CREATE TABLE dependent (sex VARCHAR)",
        "answer": "SELECT count(*) FROM dependent WHERE sex  =  'F'",
        "db_id": "company_1"
    },
    {
        "question": "Find the names of departments that are located in Houston.",
        "context": "CREATE TABLE dept_locations (dnumber VARCHAR, dlocation VARCHAR); CREATE TABLE department (dname VARCHAR, dnumber VARCHAR)",
        "answer": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'",
        "db_id": "company_1"
    },
    {
        "question": "Return the first names and last names of employees who earn more than 30000 in salary.",
        "context": "CREATE TABLE employee (fname VARCHAR, lname VARCHAR, salary INTEGER)",
        "answer": "SELECT fname ,  lname FROM employee WHERE salary  >  30000",
        "db_id": "company_1"
    },
    {
        "question": "Find the number of employees of each gender whose salary is lower than 50000.",
        "context": "CREATE TABLE employee (sex VARCHAR, salary INTEGER)",
        "answer": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex",
        "db_id": "company_1"
    },
    {
        "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
        "context": "CREATE TABLE employee (fname VARCHAR, lname VARCHAR, address VARCHAR, Bdate VARCHAR)",
        "answer": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate",
        "db_id": "company_1"
    },
    {
        "question": "what are the event details of the services that have the type code 'Marriage'?",
        "context": "CREATE TABLE EVENTS (event_details VARCHAR, Service_ID VARCHAR); CREATE TABLE Services (Service_ID VARCHAR, Service_Type_Code VARCHAR)",
        "answer": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "What are the ids and details of events that have more than one participants?",
        "context": "CREATE TABLE EVENTS (event_id VARCHAR, event_details VARCHAR, Event_ID VARCHAR); CREATE TABLE Participants_in_Events (Event_ID VARCHAR)",
        "answer": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "How many events have each participants attended? List the participant id, type and the number.",
        "context": "CREATE TABLE Participants (Participant_ID VARCHAR, Participant_Type_Code VARCHAR); CREATE TABLE Participants_in_Events (Participant_ID VARCHAR)",
        "answer": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "What are all the the participant ids, type code and details?",
        "context": "CREATE TABLE Participants (Participant_ID VARCHAR, Participant_Type_Code VARCHAR, Participant_Details VARCHAR)",
        "answer": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "How many participants belong to the type 'Organizer'?",
        "context": "CREATE TABLE participants (participant_type_code VARCHAR)",
        "answer": "SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "List the type of the services in alphabetical order.",
        "context": "CREATE TABLE services (service_type_code VARCHAR)",
        "answer": "SELECT service_type_code FROM services ORDER BY service_type_code",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "List the service id and details for the events.",
        "context": "CREATE TABLE EVENTS (service_id VARCHAR, event_details VARCHAR)",
        "answer": "SELECT service_id ,  event_details FROM EVENTS",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "How many events had participants whose details had the substring 'Dr.'",
        "context": "CREATE TABLE participants (Participant_ID VARCHAR, participant_details VARCHAR); CREATE TABLE Participants_in_Events (Participant_ID VARCHAR)",
        "answer": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "What is the most common participant type?",
        "context": "CREATE TABLE participants (participant_type_code VARCHAR)",
        "answer": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "Which service id and type has the least number of participants?",
        "context": "CREATE TABLE Participants_in_Events (Participant_ID VARCHAR, Event_ID VARCHAR); CREATE TABLE services (Service_Type_Code VARCHAR, service_id VARCHAR); CREATE TABLE EVENTS (service_id VARCHAR, Event_ID VARCHAR); CREATE TABLE participants (Participant_ID VARCHAR)",
        "answer": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "What is the id of the event with the most participants?",
        "context": "CREATE TABLE Participants_in_Events (Event_ID VARCHAR)",
        "answer": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "context": "CREATE TABLE Participants (Participant_ID VARCHAR); CREATE TABLE EVENTS (event_id VARCHAR, Participant_Details VARCHAR); CREATE TABLE Participants_in_Events (event_id VARCHAR, Participant_ID VARCHAR)",
        "answer": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "Which services type had both successful and failure event details?",
        "context": "CREATE TABLE EVENTS (service_id VARCHAR, event_details VARCHAR); CREATE TABLE services (service_type_code VARCHAR, service_id VARCHAR)",
        "answer": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "How many events did not have any participants?",
        "context": "CREATE TABLE EVENTS (event_id VARCHAR); CREATE TABLE Participants_in_Events (event_id VARCHAR)",
        "answer": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "What are all the distinct participant ids who attended any events?",
        "context": "CREATE TABLE participants_in_Events (participant_id VARCHAR)",
        "answer": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "What is the name of the race held most recently?",
        "context": "CREATE TABLE races (name VARCHAR, date VARCHAR)",
        "answer": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "db_id": "formula_1"
    },
    {
        "question": "What is the name and date of the most recent race?",
        "context": "CREATE TABLE races (name VARCHAR, date VARCHAR)",
        "answer": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "db_id": "formula_1"
    },
    {
        "question": "Find the names of all races held in 2017.",
        "context": "CREATE TABLE races (name VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT name FROM races WHERE YEAR = 2017",
        "db_id": "formula_1"
    },
    {
        "question": "Find the distinct names of all races held between 2014 and 2017?",
        "context": "CREATE TABLE races (name VARCHAR, YEAR INTEGER)",
        "answer": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "db_id": "formula_1"
    },
    {
        "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
        "context": "CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR); CREATE TABLE laptimes (driverid VARCHAR, milliseconds INTEGER)",
        "answer": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "db_id": "formula_1"
    },
    {
        "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
        "context": "CREATE TABLE laptimes (driverid VARCHAR, milliseconds INTEGER); CREATE TABLE drivers (driverid VARCHAR, nationality VARCHAR)",
        "answer": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "db_id": "formula_1"
    },
    {
        "question": "What are the forename and surname of the driver who has the smallest laptime?",
        "context": "CREATE TABLE laptimes (driverid VARCHAR, milliseconds VARCHAR); CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR)",
        "answer": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "db_id": "formula_1"
    },
    {
        "question": "What is the id and family name of the driver who has the longest laptime?",
        "context": "CREATE TABLE drivers (driverid VARCHAR, surname VARCHAR); CREATE TABLE laptimes (driverid VARCHAR, milliseconds VARCHAR)",
        "answer": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "db_id": "formula_1"
    },
    {
        "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?",
        "context": "CREATE TABLE drivers (driverid VARCHAR, forename VARCHAR, surname VARCHAR); CREATE TABLE laptimes (driverid VARCHAR)",
        "answer": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",
        "db_id": "formula_1"
    },
    {
        "question": "How many drivers participated in the race Australian Grand Prix held in 2009?",
        "context": "CREATE TABLE races (raceid VARCHAR, name VARCHAR); CREATE TABLE results (raceid VARCHAR)",
        "answer": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "db_id": "formula_1"
    },
    {
        "question": "How many drivers did not participate in the races held in 2009?",
        "context": "CREATE TABLE races (driverId VARCHAR, raceId VARCHAR, YEAR VARCHAR); CREATE TABLE results (driverId VARCHAR, raceId VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "db_id": "formula_1"
    },
    {
        "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
        "context": "CREATE TABLE drivers (driverid VARCHAR, forename VARCHAR); CREATE TABLE races (name VARCHAR, year VARCHAR, raceid VARCHAR); CREATE TABLE results (raceid VARCHAR, driverid VARCHAR)",
        "answer": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "db_id": "formula_1"
    },
    {
        "question": "Find the forename and surname of drivers whose nationality is German?",
        "context": "CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, nationality VARCHAR)",
        "answer": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "db_id": "formula_1"
    },
    {
        "question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?",
        "context": "CREATE TABLE races (raceid VARCHAR, name VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR); CREATE TABLE drivers (forename VARCHAR, driverid VARCHAR)",
        "answer": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "db_id": "formula_1"
    },
    {
        "question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?",
        "context": "CREATE TABLE races (raceid VARCHAR, name VARCHAR); CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR); CREATE TABLE results (raceid VARCHAR, driverid VARCHAR)",
        "answer": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "db_id": "formula_1"
    },
    {
        "question": "Find all the forenames of distinct drivers who was in position 1 as standing and won?",
        "context": "CREATE TABLE driverstandings (driverid VARCHAR, position VARCHAR, wins VARCHAR); CREATE TABLE drivers (forename VARCHAR, driverid VARCHAR)",
        "answer": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "db_id": "formula_1"
    },
    {
        "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?",
        "context": "CREATE TABLE drivers (forename VARCHAR, driverid VARCHAR); CREATE TABLE driverstandings (driverid VARCHAR, points VARCHAR, position VARCHAR, wins VARCHAR)",
        "answer": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "db_id": "formula_1"
    },
    {
        "question": "What are the numbers of constructors for different nationalities?",
        "context": "CREATE TABLE constructors (nationality VARCHAR)",
        "answer": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
        "db_id": "formula_1"
    },
    {
        "question": "What are the numbers of races for each constructor id?",
        "context": "CREATE TABLE constructorStandings (constructorid VARCHAR)",
        "answer": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "db_id": "formula_1"
    },
    {
        "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "context": "CREATE TABLE races (name VARCHAR, circuitid VARCHAR, year VARCHAR); CREATE TABLE circuits (circuitid VARCHAR, country VARCHAR)",
        "answer": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "db_id": "formula_1"
    },
    {
        "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "context": "CREATE TABLE races (name VARCHAR, circuitid VARCHAR, year VARCHAR); CREATE TABLE circuits (circuitid VARCHAR, country VARCHAR)",
        "answer": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "db_id": "formula_1"
    },
    {
        "question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.",
        "context": "CREATE TABLE pitstops (driverid VARCHAR, STOP VARCHAR, duration INTEGER, raceid VARCHAR)",
        "answer": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)",
        "db_id": "formula_1"
    },
    {
        "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?",
        "context": "CREATE TABLE pitstops (driverid VARCHAR, STOP VARCHAR, duration INTEGER, raceid VARCHAR)",
        "answer": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)",
        "db_id": "formula_1"
    },
    {
        "question": "List the forenames of all distinct drivers in alphabetical order?",
        "context": "CREATE TABLE drivers (forename VARCHAR)",
        "answer": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "db_id": "formula_1"
    },
    {
        "question": "List the names of all distinct races in reversed  lexicographic order?",
        "context": "CREATE TABLE races (name VARCHAR)",
        "answer": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "db_id": "formula_1"
    },
    {
        "question": "What are the names of races held between 2009 and 2011?",
        "context": "CREATE TABLE races (name VARCHAR, YEAR INTEGER)",
        "answer": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "db_id": "formula_1"
    },
    {
        "question": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "context": "CREATE TABLE races (name VARCHAR, TIME VARCHAR)",
        "answer": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "db_id": "formula_1"
    },
    {
        "question": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?",
        "context": "CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR); CREATE TABLE results (driverid VARCHAR); CREATE TABLE pitstops (driverid VARCHAR)",
        "answer": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "db_id": "formula_1"
    },
    {
        "question": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
        "context": "CREATE TABLE drivers (surname VARCHAR, driverid VARCHAR); CREATE TABLE results (driverid VARCHAR); CREATE TABLE pitstops (driverid VARCHAR)",
        "answer": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "db_id": "formula_1"
    },
    {
        "question": "What is the id and last name of the driver who participated in the most races after 2010?",
        "context": "CREATE TABLE drivers (driverid VARCHAR, surname VARCHAR); CREATE TABLE races (raceid VARCHAR, year INTEGER); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR)",
        "answer": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "db_id": "formula_1"
    },
    {
        "question": "What are the names of circuits that belong to UK or Malaysia?",
        "context": "CREATE TABLE circuits (name VARCHAR, country VARCHAR)",
        "answer": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
        "db_id": "formula_1"
    },
    {
        "question": "Find the id and location of circuits that belong to France or Belgium?",
        "context": "CREATE TABLE circuits (circuitid VARCHAR, LOCATION VARCHAR, country VARCHAR)",
        "answer": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
        "db_id": "formula_1"
    },
    {
        "question": "Find the names of Japanese constructors that have once earned more than 5 points?",
        "context": "CREATE TABLE constructorstandings (constructorid VARCHAR, points VARCHAR); CREATE TABLE constructors (name VARCHAR, constructorid VARCHAR, nationality VARCHAR)",
        "answer": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "db_id": "formula_1"
    },
    {
        "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "context": "CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (raceid VARCHAR, year VARCHAR, name VARCHAR)",
        "answer": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "db_id": "formula_1"
    },
    {
        "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "context": "CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (raceid VARCHAR, year VARCHAR, name VARCHAR)",
        "answer": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "db_id": "formula_1"
    },
    {
        "question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?",
        "context": "CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (name VARCHAR, year INTEGER, raceid VARCHAR)",
        "answer": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "db_id": "formula_1"
    },
    {
        "question": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?",
        "context": "CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (name VARCHAR, year INTEGER, raceid VARCHAR)",
        "answer": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "db_id": "formula_1"
    },
    {
        "question": "Find the id, forename and number of races of all drivers who have at least participated in two races?",
        "context": "CREATE TABLE drivers (driverid VARCHAR, forename VARCHAR); CREATE TABLE races (raceid VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR)",
        "answer": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2",
        "db_id": "formula_1"
    },
    {
        "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?",
        "context": "CREATE TABLE races (raceid VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR); CREATE TABLE drivers (driverid VARCHAR)",
        "answer": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",
        "db_id": "formula_1"
    },
    {
        "question": "Find the id and surname of the driver who participated the most number of races?",
        "context": "CREATE TABLE drivers (driverid VARCHAR, surname VARCHAR); CREATE TABLE races (raceid VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR)",
        "answer": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "db_id": "formula_1"
    },
    {
        "question": "How many technicians are there?",
        "context": "CREATE TABLE technician (Id VARCHAR)",
        "answer": "SELECT count(*) FROM technician",
        "db_id": "machine_repair"
    },
    {
        "question": "List the names of technicians in ascending order of age.",
        "context": "CREATE TABLE technician (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM technician ORDER BY Age ASC",
        "db_id": "machine_repair"
    },
    {
        "question": "What are the team and starting year of technicians?",
        "context": "CREATE TABLE technician (Team VARCHAR, Starting_Year VARCHAR)",
        "answer": "SELECT Team ,  Starting_Year FROM technician",
        "db_id": "machine_repair"
    },
    {
        "question": "List the name of technicians whose team is not \"NYY\".",
        "context": "CREATE TABLE technician (Name VARCHAR, Team VARCHAR)",
        "answer": "SELECT Name FROM technician WHERE Team != \"NYY\"",
        "db_id": "machine_repair"
    },
    {
        "question": "Show the name of technicians aged either 36 or 37",
        "context": "CREATE TABLE technician (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37",
        "db_id": "machine_repair"
    },
    {
        "question": "What is the starting year of the oldest technicians?",
        "context": "CREATE TABLE technician (Starting_Year VARCHAR, Age VARCHAR)",
        "answer": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "db_id": "machine_repair"
    },
    {
        "question": "Show different teams of technicians and the number of technicians in each team.",
        "context": "CREATE TABLE technician (Team VARCHAR)",
        "answer": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
        "db_id": "machine_repair"
    },
    {
        "question": "Please show the team that has the most number of technicians.",
        "context": "CREATE TABLE technician (Team VARCHAR)",
        "answer": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "machine_repair"
    },
    {
        "question": "Show the team that have at least two technicians.",
        "context": "CREATE TABLE technician (Team VARCHAR)",
        "answer": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2",
        "db_id": "machine_repair"
    },
    {
        "question": "Show names of technicians and series of machines they are assigned to repair.",
        "context": "CREATE TABLE machine (Machine_series VARCHAR, machine_id VARCHAR); CREATE TABLE repair_assignment (machine_id VARCHAR, technician_ID VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)",
        "answer": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID",
        "db_id": "machine_repair"
    },
    {
        "question": "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
        "context": "CREATE TABLE repair_assignment (machine_id VARCHAR, technician_ID VARCHAR); CREATE TABLE machine (machine_id VARCHAR, quality_rank VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)",
        "answer": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank",
        "db_id": "machine_repair"
    },
    {
        "question": "Show names of technicians who are assigned to repair machines with value point more than 70.",
        "context": "CREATE TABLE machine (machine_id VARCHAR, value_points INTEGER); CREATE TABLE repair_assignment (machine_id VARCHAR, technician_ID VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)",
        "answer": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70",
        "db_id": "machine_repair"
    },
    {
        "question": "Show names of technicians and the number of machines they are assigned to repair.",
        "context": "CREATE TABLE repair_assignment (technician_ID VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "db_id": "machine_repair"
    },
    {
        "question": "List the names of technicians who have not been assigned to repair machines.",
        "context": "CREATE TABLE technician (Name VARCHAR, technician_id VARCHAR); CREATE TABLE repair_assignment (Name VARCHAR, technician_id VARCHAR)",
        "answer": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
        "db_id": "machine_repair"
    },
    {
        "question": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".",
        "context": "CREATE TABLE technician (Starting_Year VARCHAR, Team VARCHAR)",
        "answer": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"",
        "db_id": "machine_repair"
    },
    {
        "question": "How many entrepreneurs are there?",
        "context": "CREATE TABLE entrepreneur (Id VARCHAR)",
        "answer": "SELECT count(*) FROM entrepreneur",
        "db_id": "entrepreneur"
    },
    {
        "question": "List the companies of entrepreneurs in descending order of money requested.",
        "context": "CREATE TABLE entrepreneur (Company VARCHAR, Money_Requested VARCHAR)",
        "answer": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
        "db_id": "entrepreneur"
    },
    {
        "question": "List the companies and the investors of entrepreneurs.",
        "context": "CREATE TABLE entrepreneur (Company VARCHAR, Investor VARCHAR)",
        "answer": "SELECT Company ,  Investor FROM entrepreneur",
        "db_id": "entrepreneur"
    },
    {
        "question": "What is the average money requested by all entrepreneurs?",
        "context": "CREATE TABLE entrepreneur (Money_Requested INTEGER)",
        "answer": "SELECT avg(Money_Requested) FROM entrepreneur",
        "db_id": "entrepreneur"
    },
    {
        "question": "What are the names of people in ascending order of weight?",
        "context": "CREATE TABLE People (Name VARCHAR, Weight VARCHAR)",
        "answer": "SELECT Name FROM People ORDER BY Weight ASC",
        "db_id": "entrepreneur"
    },
    {
        "question": "What are the names of entrepreneurs?",
        "context": "CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE entrepreneur (People_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "db_id": "entrepreneur"
    },
    {
        "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "context": "CREATE TABLE entrepreneur (People_ID VARCHAR, Investor VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "db_id": "entrepreneur"
    },
    {
        "question": "What is the weight of the shortest person?",
        "context": "CREATE TABLE people (Weight VARCHAR, Height VARCHAR)",
        "answer": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "db_id": "entrepreneur"
    },
    {
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "context": "CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR); CREATE TABLE entrepreneur (People_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "db_id": "entrepreneur"
    },
    {
        "question": "What is the total money requested by entrepreneurs with height more than 1.85?",
        "context": "CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE entrepreneur (Money_Requested INTEGER, People_ID VARCHAR)",
        "answer": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
        "db_id": "entrepreneur"
    },
    {
        "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "context": "CREATE TABLE entrepreneur (People_ID VARCHAR, Investor VARCHAR); CREATE TABLE people (Date_of_Birth VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
        "db_id": "entrepreneur"
    },
    {
        "question": "What are the weights of entrepreneurs in descending order of money requested?",
        "context": "CREATE TABLE entrepreneur (People_ID VARCHAR, Money_Requested VARCHAR); CREATE TABLE people (Weight VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "db_id": "entrepreneur"
    },
    {
        "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?",
        "context": "CREATE TABLE entrepreneur (Investor VARCHAR)",
        "answer": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor",
        "db_id": "entrepreneur"
    },
    {
        "question": "What is the investor that has invested in the most number of entrepreneurs?",
        "context": "CREATE TABLE entrepreneur (Investor VARCHAR)",
        "answer": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "entrepreneur"
    },
    {
        "question": "What are the investors that have invested in at least two entrepreneurs?",
        "context": "CREATE TABLE entrepreneur (Investor VARCHAR)",
        "answer": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "db_id": "entrepreneur"
    },
    {
        "question": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "context": "CREATE TABLE entrepreneur (Company VARCHAR, People_ID VARCHAR, Money_Requested VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "db_id": "entrepreneur"
    },
    {
        "question": "List the names of people that are not entrepreneurs.",
        "context": "CREATE TABLE entrepreneur (Name VARCHAR, People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
        "db_id": "entrepreneur"
    },
    {
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "context": "CREATE TABLE entrepreneur (Investor VARCHAR, Money_Requested INTEGER)",
        "answer": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "db_id": "entrepreneur"
    },
    {
        "question": "How many distinct companies are there?",
        "context": "CREATE TABLE entrepreneur (Company VARCHAR)",
        "answer": "SELECT count(DISTINCT Company) FROM entrepreneur",
        "db_id": "entrepreneur"
    },
    {
        "question": "Show the company of the tallest entrepreneur.",
        "context": "CREATE TABLE entrepreneur (Company VARCHAR, People_ID VARCHAR); CREATE TABLE people (People_ID VARCHAR, Height VARCHAR)",
        "answer": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
        "db_id": "entrepreneur"
    },
    {
        "question": "How many perpetrators are there?",
        "context": "CREATE TABLE perpetrator (Id VARCHAR)",
        "answer": "SELECT count(*) FROM perpetrator",
        "db_id": "perpetrator"
    },
    {
        "question": "List the date of perpetrators in descending order of the number of people killed.",
        "context": "CREATE TABLE perpetrator (Date VARCHAR, Killed VARCHAR)",
        "answer": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
        "db_id": "perpetrator"
    },
    {
        "question": "List the number of people injured by perpetrators in ascending order.",
        "context": "CREATE TABLE perpetrator (Injured VARCHAR)",
        "answer": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
        "db_id": "perpetrator"
    },
    {
        "question": "What is the average number of people injured by all perpetrators?",
        "context": "CREATE TABLE perpetrator (Injured INTEGER)",
        "answer": "SELECT avg(Injured) FROM perpetrator",
        "db_id": "perpetrator"
    },
    {
        "question": "What is the location of the perpetrator with the largest kills.",
        "context": "CREATE TABLE perpetrator (LOCATION VARCHAR, Killed VARCHAR)",
        "answer": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
        "db_id": "perpetrator"
    },
    {
        "question": "What are the names of people in ascending order of height?",
        "context": "CREATE TABLE People (Name VARCHAR, Height VARCHAR)",
        "answer": "SELECT Name FROM People ORDER BY Height ASC",
        "db_id": "perpetrator"
    },
    {
        "question": "What are the names of perpetrators?",
        "context": "CREATE TABLE perpetrator (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID",
        "db_id": "perpetrator"
    },
    {
        "question": "What are the names of perpetrators whose country is not \"China\"?",
        "context": "CREATE TABLE perpetrator (People_ID VARCHAR, Country VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"",
        "db_id": "perpetrator"
    },
    {
        "question": "What is the name of the perpetrator with the biggest weight.",
        "context": "CREATE TABLE perpetrator (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
        "db_id": "perpetrator"
    },
    {
        "question": "What is the total kills of the perpetrators with height more than 1.84.",
        "context": "CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE perpetrator (Killed INTEGER, People_ID VARCHAR)",
        "answer": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84",
        "db_id": "perpetrator"
    },
    {
        "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "context": "CREATE TABLE perpetrator (People_ID VARCHAR, Country VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "db_id": "perpetrator"
    },
    {
        "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "context": "CREATE TABLE perpetrator (People_ID VARCHAR, Injured VARCHAR); CREATE TABLE people (Height VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC",
        "db_id": "perpetrator"
    },
    {
        "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
        "context": "CREATE TABLE perpetrator (Country VARCHAR)",
        "answer": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country",
        "db_id": "perpetrator"
    },
    {
        "question": "What is the country that has the most perpetrators?",
        "context": "CREATE TABLE perpetrator (Country VARCHAR)",
        "answer": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "perpetrator"
    },
    {
        "question": "What are the countries that have at least two perpetrators?",
        "context": "CREATE TABLE perpetrator (Country VARCHAR)",
        "answer": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2",
        "db_id": "perpetrator"
    },
    {
        "question": "List the names of perpetrators in descending order of the year.",
        "context": "CREATE TABLE perpetrator (People_ID VARCHAR, Year VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC",
        "db_id": "perpetrator"
    },
    {
        "question": "List the names of people that are not perpetrators.",
        "context": "CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE perpetrator (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)",
        "db_id": "perpetrator"
    },
    {
        "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
        "context": "CREATE TABLE perpetrator (Country VARCHAR, Injured INTEGER)",
        "answer": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20",
        "db_id": "perpetrator"
    },
    {
        "question": "How many distinct locations of perpetrators are there?",
        "context": "CREATE TABLE perpetrator (LOCATION VARCHAR)",
        "answer": "SELECT count(DISTINCT LOCATION) FROM perpetrator",
        "db_id": "perpetrator"
    },
    {
        "question": "Show the date of the tallest perpetrator.",
        "context": "CREATE TABLE perpetrator (Date VARCHAR, People_ID VARCHAR); CREATE TABLE people (People_ID VARCHAR, Height VARCHAR)",
        "answer": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "db_id": "perpetrator"
    },
    {
        "question": "In which year did the most recent crime happen?",
        "context": "CREATE TABLE perpetrator (YEAR INTEGER)",
        "answer": "SELECT max(YEAR) FROM perpetrator;",
        "db_id": "perpetrator"
    },
    {
        "question": "Report the name of all campuses in Los Angeles county.",
        "context": "CREATE TABLE campuses (campus VARCHAR, county VARCHAR)",
        "answer": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "db_id": "csu_1"
    },
    {
        "question": "What are the names of all campuses located at Chico?",
        "context": "CREATE TABLE campuses (campus VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"",
        "db_id": "csu_1"
    },
    {
        "question": "Find all the campuses opened in 1958.",
        "context": "CREATE TABLE campuses (campus VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT campus FROM campuses WHERE YEAR  =  1958",
        "db_id": "csu_1"
    },
    {
        "question": "Find the name of the campuses opened before 1800.",
        "context": "CREATE TABLE campuses (campus VARCHAR, YEAR INTEGER)",
        "answer": "SELECT campus FROM campuses WHERE YEAR  <  1800",
        "db_id": "csu_1"
    },
    {
        "question": "Which campus was opened between 1935 and 1939?",
        "context": "CREATE TABLE campuses (campus VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "db_id": "csu_1"
    },
    {
        "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
        "context": "CREATE TABLE campuses (campus VARCHAR, LOCATION VARCHAR, county VARCHAR)",
        "answer": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "db_id": "csu_1"
    },
    {
        "question": "What is the campus fee of \"San Jose State University\" in year 1996?",
        "context": "CREATE TABLE csu_fees (year VARCHAR); CREATE TABLE campuses (id VARCHAR)",
        "answer": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "db_id": "csu_1"
    },
    {
        "question": "What is the campus fee of \"San Francisco State University\" in year 1996?",
        "context": "CREATE TABLE csu_fees (year VARCHAR); CREATE TABLE campuses (id VARCHAR)",
        "answer": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996",
        "db_id": "csu_1"
    },
    {
        "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
        "context": "CREATE TABLE csu_fees (campusfee INTEGER)",
        "answer": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
        "db_id": "csu_1"
    },
    {
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "context": "CREATE TABLE campuses (campus VARCHAR, county VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "db_id": "csu_1"
    },
    {
        "question": "Which year has the most degrees conferred?",
        "context": "CREATE TABLE degrees (YEAR VARCHAR, degrees INTEGER)",
        "answer": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "db_id": "csu_1"
    },
    {
        "question": "Which campus has the most degrees conferred in all times?",
        "context": "CREATE TABLE degrees (campus VARCHAR, degrees INTEGER)",
        "answer": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "db_id": "csu_1"
    },
    {
        "question": "Which campus has the most faculties in year 2003?",
        "context": "CREATE TABLE faculty (campus VARCHAR, year VARCHAR, faculty VARCHAR); CREATE TABLE campuses (campus VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
        "db_id": "csu_1"
    },
    {
        "question": "Find the average fee on a CSU campus in 1996",
        "context": "CREATE TABLE csu_fees (campusfee INTEGER, YEAR VARCHAR)",
        "answer": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "db_id": "csu_1"
    },
    {
        "question": "What is the average fee on a CSU campus in 2005?",
        "context": "CREATE TABLE csu_fees (campusfee INTEGER, YEAR VARCHAR)",
        "answer": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "db_id": "csu_1"
    },
    {
        "question": "report the total number of degrees granted between 1998 and 2002.",
        "context": "CREATE TABLE campuses (campus VARCHAR, id VARCHAR); CREATE TABLE degrees (degrees INTEGER, campus VARCHAR, year VARCHAR)",
        "answer": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus",
        "db_id": "csu_1"
    },
    {
        "question": "For each Orange county campus, report the number of degrees granted after 2000.",
        "context": "CREATE TABLE campuses (campus VARCHAR, id VARCHAR, county VARCHAR); CREATE TABLE degrees (degrees INTEGER, campus VARCHAR, year VARCHAR)",
        "answer": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus",
        "db_id": "csu_1"
    },
    {
        "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.",
        "context": "CREATE TABLE campuses (campus VARCHAR, id VARCHAR, county VARCHAR); CREATE TABLE faculty (campus VARCHAR, year VARCHAR)",
        "answer": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")",
        "db_id": "csu_1"
    },
    {
        "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
        "context": "CREATE TABLE enrollments (campus VARCHAR, year VARCHAR); CREATE TABLE campuses (id VARCHAR)",
        "answer": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200",
        "db_id": "csu_1"
    },
    {
        "question": "How many campuses are there in Los Angeles county?",
        "context": "CREATE TABLE campuses (county VARCHAR)",
        "answer": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"",
        "db_id": "csu_1"
    },
    {
        "question": "How many degrees were conferred in \"San Jose State University\" in 2000?",
        "context": "CREATE TABLE degrees (Id VARCHAR); CREATE TABLE campuses (Id VARCHAR)",
        "answer": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "db_id": "csu_1"
    },
    {
        "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
        "context": "CREATE TABLE degrees (Id VARCHAR); CREATE TABLE campuses (Id VARCHAR)",
        "answer": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "db_id": "csu_1"
    },
    {
        "question": "How many faculty is there in total in the year of 2002?",
        "context": "CREATE TABLE faculty (faculty INTEGER, YEAR VARCHAR)",
        "answer": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
        "db_id": "csu_1"
    },
    {
        "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?",
        "context": "CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE faculty (campus VARCHAR, year VARCHAR)",
        "answer": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "db_id": "csu_1"
    },
    {
        "question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?",
        "context": "CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE faculty (campus VARCHAR, year VARCHAR)",
        "answer": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"",
        "db_id": "csu_1"
    },
    {
        "question": "List the campus that have between 600 and 1000 faculty lines in year 2004.",
        "context": "CREATE TABLE campuses (id VARCHAR); CREATE TABLE faculty (campus VARCHAR, faculty VARCHAR)",
        "answer": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004",
        "db_id": "csu_1"
    },
    {
        "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?",
        "context": "CREATE TABLE campuses (id VARCHAR); CREATE TABLE faculty (faculty VARCHAR); CREATE TABLE degrees (Id VARCHAR)",
        "answer": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1",
        "db_id": "csu_1"
    },
    {
        "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?",
        "context": "CREATE TABLE campuses (id VARCHAR); CREATE TABLE faculty (faculty VARCHAR); CREATE TABLE degrees (Id VARCHAR)",
        "answer": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
        "db_id": "csu_1"
    },
    {
        "question": "How many undergraduates are there in \"San Jose State University\" in year 2004?",
        "context": "CREATE TABLE discipline_enrollments (undergraduate INTEGER, campus VARCHAR, year VARCHAR); CREATE TABLE campuses (id VARCHAR, campus VARCHAR)",
        "answer": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
        "db_id": "csu_1"
    },
    {
        "question": "What is the number of graduates in \"San Francisco State University\" in year 2004?",
        "context": "CREATE TABLE discipline_enrollments (graduate INTEGER, campus VARCHAR, year VARCHAR); CREATE TABLE campuses (id VARCHAR, campus VARCHAR)",
        "answer": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"",
        "db_id": "csu_1"
    },
    {
        "question": "What is the campus fee of \"San Francisco State University\" in year 2000?",
        "context": "CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE csu_fees (campusfee VARCHAR, campus VARCHAR, year VARCHAR)",
        "answer": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "db_id": "csu_1"
    },
    {
        "question": "Find the campus fee of \"San Jose State University\" in year 2000.",
        "context": "CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE csu_fees (campusfee VARCHAR, campus VARCHAR, year VARCHAR)",
        "answer": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000",
        "db_id": "csu_1"
    },
    {
        "question": "How many CSU campuses are there?",
        "context": "CREATE TABLE campuses (Id VARCHAR)",
        "answer": "SELECT count(*) FROM campuses",
        "db_id": "csu_1"
    },
    {
        "question": "How many candidates are there?",
        "context": "CREATE TABLE candidate (Id VARCHAR)",
        "answer": "SELECT count(*) FROM candidate",
        "db_id": "candidate_poll"
    },
    {
        "question": "Which poll resource provided the most number of candidate information?",
        "context": "CREATE TABLE candidate (poll_source VARCHAR)",
        "answer": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
        "db_id": "candidate_poll"
    },
    {
        "question": "what are the top 3 highest support rates?",
        "context": "CREATE TABLE candidate (support_rate VARCHAR)",
        "answer": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "db_id": "candidate_poll"
    },
    {
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "context": "CREATE TABLE candidate (Candidate_ID VARCHAR, oppose_rate VARCHAR)",
        "answer": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "db_id": "candidate_poll"
    },
    {
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "context": "CREATE TABLE candidate (Support_rate VARCHAR, Consider_rate VARCHAR, Oppose_rate VARCHAR, unsure_rate VARCHAR)",
        "answer": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "db_id": "candidate_poll"
    },
    {
        "question": "which poll source does the highest oppose rate come from?",
        "context": "CREATE TABLE candidate (poll_source VARCHAR, oppose_rate VARCHAR)",
        "answer": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "db_id": "candidate_poll"
    },
    {
        "question": "List all people names in the order of their date of birth from old to young.",
        "context": "CREATE TABLE people (name VARCHAR, date_of_birth VARCHAR)",
        "answer": "SELECT name FROM people ORDER BY date_of_birth",
        "db_id": "candidate_poll"
    },
    {
        "question": "Find the average height and weight for all males (sex is M).",
        "context": "CREATE TABLE people (height INTEGER, weight INTEGER, sex VARCHAR)",
        "answer": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",
        "db_id": "candidate_poll"
    },
    {
        "question": "find the names of people who are taller than 200 or lower than 190.",
        "context": "CREATE TABLE people (name VARCHAR, height VARCHAR)",
        "answer": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "db_id": "candidate_poll"
    },
    {
        "question": "Find the average and minimum weight for each gender.",
        "context": "CREATE TABLE people (sex VARCHAR, weight INTEGER)",
        "answer": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex",
        "db_id": "candidate_poll"
    },
    {
        "question": "Find the name and gender of the candidate who got the highest support rate.",
        "context": "CREATE TABLE candidate (people_id VARCHAR, support_rate VARCHAR); CREATE TABLE people (name VARCHAR, sex VARCHAR, people_id VARCHAR)",
        "answer": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "db_id": "candidate_poll"
    },
    {
        "question": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
        "context": "CREATE TABLE candidate (people_id VARCHAR); CREATE TABLE people (name VARCHAR, sex VARCHAR, people_id VARCHAR)",
        "answer": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "db_id": "candidate_poll"
    },
    {
        "question": "which gender got the highest average uncertain ratio.",
        "context": "CREATE TABLE candidate (people_id VARCHAR, unsure_rate INTEGER); CREATE TABLE people (sex VARCHAR, people_id VARCHAR)",
        "answer": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "db_id": "candidate_poll"
    },
    {
        "question": "what are the names of people who did not participate in the candidate election.",
        "context": "CREATE TABLE candidate (name VARCHAR, people_id VARCHAR); CREATE TABLE people (name VARCHAR, people_id VARCHAR)",
        "answer": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
        "db_id": "candidate_poll"
    },
    {
        "question": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
        "context": "CREATE TABLE candidate (people_id VARCHAR, support_rate INTEGER, oppose_rate VARCHAR); CREATE TABLE people (name VARCHAR, people_id VARCHAR)",
        "answer": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "db_id": "candidate_poll"
    },
    {
        "question": "how many people are there whose weight is higher than 85 for each gender?",
        "context": "CREATE TABLE people (sex VARCHAR, weight INTEGER)",
        "answer": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex",
        "db_id": "candidate_poll"
    },
    {
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "context": "CREATE TABLE candidate (support_rate INTEGER, consider_rate INTEGER, oppose_rate INTEGER)",
        "answer": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "db_id": "candidate_poll"
    },
    {
        "question": "list all female (sex is F) candidate names in the alphabetical order.",
        "context": "CREATE TABLE candidate (people_id VARCHAR); CREATE TABLE people (name VARCHAR, people_id VARCHAR, sex VARCHAR)",
        "answer": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "db_id": "candidate_poll"
    },
    {
        "question": "find the name of people whose height is lower than the average.",
        "context": "CREATE TABLE people (name VARCHAR, height INTEGER)",
        "answer": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
        "db_id": "candidate_poll"
    },
    {
        "question": "List all info about all people.",
        "context": "CREATE TABLE people (Id VARCHAR)",
        "answer": "SELECT * FROM people",
        "db_id": "candidate_poll"
    },
    {
        "question": "Find the titles of all movies directed by steven spielberg.",
        "context": "CREATE TABLE Movie (title VARCHAR, director VARCHAR)",
        "answer": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "db_id": "movie_1"
    },
    {
        "question": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "context": "CREATE TABLE Movie (title VARCHAR, director VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000",
        "db_id": "movie_1"
    },
    {
        "question": "How many movies were made before 2000?",
        "context": "CREATE TABLE Movie (YEAR INTEGER)",
        "answer": "SELECT count(*) FROM Movie WHERE YEAR  <  2000",
        "db_id": "movie_1"
    },
    {
        "question": "Who is the director of movie Avatar?",
        "context": "CREATE TABLE Movie (director VARCHAR, title VARCHAR)",
        "answer": "SELECT director FROM Movie WHERE title  = 'Avatar'",
        "db_id": "movie_1"
    },
    {
        "question": "How many reviewers listed?",
        "context": "CREATE TABLE Reviewer (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Reviewer",
        "db_id": "movie_1"
    },
    {
        "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?",
        "context": "CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR)",
        "answer": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"",
        "db_id": "movie_1"
    },
    {
        "question": "What is the reviewer id of Daniel Lewis?",
        "context": "CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR)",
        "answer": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"",
        "db_id": "movie_1"
    },
    {
        "question": "What is the total number of ratings that has more than 3 stars?",
        "context": "CREATE TABLE Rating (stars INTEGER)",
        "answer": "SELECT count(*) FROM Rating WHERE stars  >  3",
        "db_id": "movie_1"
    },
    {
        "question": "What is the lowest and highest rating star?",
        "context": "CREATE TABLE Rating (stars INTEGER)",
        "answer": "SELECT max(stars) ,  min(stars) FROM Rating",
        "db_id": "movie_1"
    },
    {
        "question": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.",
        "context": "CREATE TABLE Movie (mID VARCHAR, year VARCHAR); CREATE TABLE Rating (mID VARCHAR, stars VARCHAR)",
        "answer": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year",
        "db_id": "movie_1"
    },
    {
        "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.",
        "context": "CREATE TABLE Movie (director VARCHAR, title VARCHAR, mID VARCHAR); CREATE TABLE Rating (mID VARCHAR, stars VARCHAR)",
        "answer": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "db_id": "movie_1"
    },
    {
        "question": "What is the average rating star for each reviewer?",
        "context": "CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (stars INTEGER, rID VARCHAR)",
        "answer": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
        "db_id": "movie_1"
    },
    {
        "question": "Find the titles of all movies that have no ratings.",
        "context": "CREATE TABLE Rating (title VARCHAR, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)",
        "answer": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
        "db_id": "movie_1"
    },
    {
        "question": "Find the names of all reviewers who have ratings with a NULL value for the date.",
        "context": "CREATE TABLE Rating (rID VARCHAR); CREATE TABLE Reviewer (rID VARCHAR)",
        "answer": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"",
        "db_id": "movie_1"
    },
    {
        "question": "What is the average rating stars and title for the oldest movie?",
        "context": "CREATE TABLE Movie (title VARCHAR, mID VARCHAR, year VARCHAR); CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (YEAR INTEGER)",
        "answer": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)",
        "db_id": "movie_1"
    },
    {
        "question": "What is the name of the most recent movie?",
        "context": "CREATE TABLE Movie (title VARCHAR, YEAR INTEGER)",
        "answer": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)",
        "db_id": "movie_1"
    },
    {
        "question": "What is the maximum stars and year for the most recent movie?",
        "context": "CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (YEAR INTEGER); CREATE TABLE Movie (year VARCHAR, mID VARCHAR)",
        "answer": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)",
        "db_id": "movie_1"
    },
    {
        "question": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?",
        "context": "CREATE TABLE Movie (title VARCHAR, YEAR INTEGER, director VARCHAR)",
        "answer": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")",
        "db_id": "movie_1"
    },
    {
        "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?",
        "context": "CREATE TABLE Rating (mID VARCHAR, stars INTEGER); CREATE TABLE Movie (title VARCHAR, director VARCHAR, mID VARCHAR)",
        "answer": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")",
        "db_id": "movie_1"
    },
    {
        "question": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.",
        "context": "CREATE TABLE Rating (stars VARCHAR, ratingDate VARCHAR, mID VARCHAR, rID VARCHAR); CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)",
        "answer": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",
        "db_id": "movie_1"
    },
    {
        "question": "Find the names of all reviewers who have contributed three or more ratings.",
        "context": "CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (rID VARCHAR)",
        "answer": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3",
        "db_id": "movie_1"
    },
    {
        "question": "Find the names of all reviewers who rated Gone with the Wind.",
        "context": "CREATE TABLE Movie (mID VARCHAR, title VARCHAR); CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)",
        "answer": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'",
        "db_id": "movie_1"
    },
    {
        "question": "Find the names of all directors whose movies are rated by Sarah Martinez.",
        "context": "CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Movie (director VARCHAR, mID VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)",
        "answer": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'",
        "db_id": "movie_1"
    },
    {
        "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",
        "context": "CREATE TABLE Rating (stars VARCHAR, mID VARCHAR, rID VARCHAR); CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR, director VARCHAR)",
        "answer": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "db_id": "movie_1"
    },
    {
        "question": "Return all reviewer names and movie names together in a single list.",
        "context": "CREATE TABLE Reviewer (name VARCHAR, title VARCHAR); CREATE TABLE Movie (name VARCHAR, title VARCHAR)",
        "answer": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
        "db_id": "movie_1"
    },
    {
        "question": "Find the titles of all movies not reviewed by Chris Jackson.",
        "context": "CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR); CREATE TABLE Movie (title VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)",
        "answer": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'",
        "db_id": "movie_1"
    },
    {
        "question": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.",
        "context": "CREATE TABLE Movie (title VARCHAR, director VARCHAR); CREATE TABLE Movie (director VARCHAR, title VARCHAR)",
        "answer": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title",
        "db_id": "movie_1"
    },
    {
        "question": "For directors who had more than one movie, return the titles and produced years of all movies directed by them.",
        "context": "CREATE TABLE Movie (director VARCHAR, title VARCHAR); CREATE TABLE Movie (title VARCHAR, year VARCHAR, director VARCHAR)",
        "answer": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title",
        "db_id": "movie_1"
    },
    {
        "question": "What are the names of the directors who made exactly one movie?",
        "context": "CREATE TABLE Movie (director VARCHAR)",
        "answer": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1",
        "db_id": "movie_1"
    },
    {
        "question": "What are the names of the directors who made exactly one movie excluding director NULL?",
        "context": "CREATE TABLE Movie (director VARCHAR)",
        "answer": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1",
        "db_id": "movie_1"
    },
    {
        "question": "How many movie reviews does each director get?",
        "context": "CREATE TABLE Rating (mID VARCHAR); CREATE TABLE Movie (director VARCHAR, mID VARCHAR)",
        "answer": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director",
        "db_id": "movie_1"
    },
    {
        "question": "Find the movies with the highest average rating. Return the movie titles and average rating.",
        "context": "CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)",
        "answer": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",
        "db_id": "movie_1"
    },
    {
        "question": "What are the movie titles and average rating of the movies with the lowest average rating?",
        "context": "CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)",
        "answer": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1",
        "db_id": "movie_1"
    },
    {
        "question": "What are the names and years of the movies that has the top 3 highest rating star?",
        "context": "CREATE TABLE Rating (mID VARCHAR, stars VARCHAR); CREATE TABLE Movie (title VARCHAR, year VARCHAR, mID VARCHAR)",
        "answer": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3",
        "db_id": "movie_1"
    },
    {
        "question": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.",
        "context": "CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, director VARCHAR, mID VARCHAR)",
        "answer": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director",
        "db_id": "movie_1"
    },
    {
        "question": "Find the title and star rating of the movie that got the least rating star for each reviewer.",
        "context": "CREATE TABLE Rating (rID VARCHAR, stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)",
        "answer": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",
        "db_id": "movie_1"
    },
    {
        "question": "Find the title and score of the movie with the lowest rating among all movies directed by each director.",
        "context": "CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, director VARCHAR, mID VARCHAR)",
        "answer": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
        "db_id": "movie_1"
    },
    {
        "question": "What is the name of the movie that is rated by most of times?",
        "context": "CREATE TABLE Rating (mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)",
        "answer": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
        "db_id": "movie_1"
    },
    {
        "question": "What are the titles of all movies that have rating star is between 3 and 5?",
        "context": "CREATE TABLE Rating (mID VARCHAR, stars INTEGER); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)",
        "answer": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "db_id": "movie_1"
    },
    {
        "question": "Find the names of reviewers who had given higher than 3 star ratings.",
        "context": "CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (rID VARCHAR, stars INTEGER)",
        "answer": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3",
        "db_id": "movie_1"
    },
    {
        "question": "Find the average rating star for each movie that are not reviewed by Brittany Harris.",
        "context": "CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Rating (mID VARCHAR, stars INTEGER); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)",
        "answer": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID",
        "db_id": "movie_1"
    },
    {
        "question": "What are the ids of the movies that are not reviewed by Brittany Harris.",
        "context": "CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Rating (mID VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)",
        "answer": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"",
        "db_id": "movie_1"
    },
    {
        "question": "Find the average rating star for each movie that received at least 2 ratings.",
        "context": "CREATE TABLE Rating (mID VARCHAR, stars INTEGER)",
        "answer": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "db_id": "movie_1"
    },
    {
        "question": "find the ids of reviewers who did not give 4 star.",
        "context": "CREATE TABLE Rating (rID VARCHAR, stars VARCHAR)",
        "answer": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4",
        "db_id": "movie_1"
    },
    {
        "question": "Find the ids of reviewers who didn't only give 4 star.",
        "context": "CREATE TABLE Rating (rID VARCHAR, stars VARCHAR)",
        "answer": "SELECT rID FROM Rating WHERE stars != 4",
        "db_id": "movie_1"
    },
    {
        "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
        "context": "CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR, year VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)",
        "answer": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "db_id": "movie_1"
    },
    {
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "context": "CREATE TABLE Movie (title VARCHAR, director VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
        "db_id": "movie_1"
    },
    {
        "question": "What are the names of reviewers who had rated 3 star and 4 star?",
        "context": "CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (rID VARCHAR, stars VARCHAR)",
        "answer": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4",
        "db_id": "movie_1"
    },
    {
        "question": "What are the names of movies that get 3 star and 4 star?",
        "context": "CREATE TABLE Rating (mID VARCHAR, stars VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)",
        "answer": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "db_id": "movie_1"
    },
    {
        "question": "How many counties are there?",
        "context": "CREATE TABLE county_public_safety (Id VARCHAR)",
        "answer": "SELECT count(*) FROM county_public_safety",
        "db_id": "county_public_safety"
    },
    {
        "question": "List the names of counties in descending order of population.",
        "context": "CREATE TABLE county_public_safety (Name VARCHAR, Population VARCHAR)",
        "answer": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
        "db_id": "county_public_safety"
    },
    {
        "question": "List the distinct police forces of counties whose location is not on east side.",
        "context": "CREATE TABLE county_public_safety (Police_force VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"",
        "db_id": "county_public_safety"
    },
    {
        "question": "What are the minimum and maximum crime rate of counties?",
        "context": "CREATE TABLE county_public_safety (Crime_rate INTEGER)",
        "answer": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety",
        "db_id": "county_public_safety"
    },
    {
        "question": "Show the crime rates of counties in ascending order of number of police officers.",
        "context": "CREATE TABLE county_public_safety (Crime_rate VARCHAR, Police_officers VARCHAR)",
        "answer": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
        "db_id": "county_public_safety"
    },
    {
        "question": "What are the names of cities in ascending alphabetical order?",
        "context": "CREATE TABLE city (Name VARCHAR)",
        "answer": "SELECT Name FROM city ORDER BY Name ASC",
        "db_id": "county_public_safety"
    },
    {
        "question": "What are the percentage of hispanics in cities with the black percentage higher than 10?",
        "context": "CREATE TABLE city (Hispanic VARCHAR, Black INTEGER)",
        "answer": "SELECT Hispanic FROM city WHERE Black  >  10",
        "db_id": "county_public_safety"
    },
    {
        "question": "List the name of the county with the largest population.",
        "context": "CREATE TABLE county_public_safety (Name VARCHAR, Population VARCHAR)",
        "answer": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "db_id": "county_public_safety"
    },
    {
        "question": "List the names of the city with the top 5 white percentages.",
        "context": "CREATE TABLE city (Name VARCHAR, White VARCHAR)",
        "answer": "SELECT Name FROM city ORDER BY White DESC LIMIT 5",
        "db_id": "county_public_safety"
    },
    {
        "question": "Show names of cities and names of counties they are in.",
        "context": "CREATE TABLE city (Name VARCHAR, County_ID VARCHAR); CREATE TABLE county_public_safety (Name VARCHAR, County_ID VARCHAR)",
        "answer": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
        "db_id": "county_public_safety"
    },
    {
        "question": "Show white percentages of cities and the crime rates of counties they are in.",
        "context": "CREATE TABLE city (White VARCHAR, County_ID VARCHAR); CREATE TABLE county_public_safety (Crime_rate VARCHAR, County_ID VARCHAR)",
        "answer": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
        "db_id": "county_public_safety"
    },
    {
        "question": "Show the name of cities in the county that has the largest number of police officers.",
        "context": "CREATE TABLE city (name VARCHAR, county_ID VARCHAR, Police_officers VARCHAR); CREATE TABLE county_public_safety (name VARCHAR, county_ID VARCHAR, Police_officers VARCHAR)",
        "answer": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
        "db_id": "county_public_safety"
    },
    {
        "question": "Show the number of cities in counties that have a population more than 20000.",
        "context": "CREATE TABLE county_public_safety (county_ID VARCHAR, population INTEGER); CREATE TABLE city (county_ID VARCHAR, population INTEGER)",
        "answer": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
        "db_id": "county_public_safety"
    },
    {
        "question": "Show the crime rate of counties with a city having white percentage more than 90.",
        "context": "CREATE TABLE county_public_safety (Crime_rate VARCHAR, County_ID VARCHAR); CREATE TABLE city (County_ID VARCHAR, White INTEGER)",
        "answer": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90",
        "db_id": "county_public_safety"
    },
    {
        "question": "Please show the police forces and the number of counties with each police force.",
        "context": "CREATE TABLE county_public_safety (Police_force VARCHAR)",
        "answer": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "db_id": "county_public_safety"
    },
    {
        "question": "What is the location shared by most counties?",
        "context": "CREATE TABLE county_public_safety (LOCATION VARCHAR)",
        "answer": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "county_public_safety"
    },
    {
        "question": "List the names of counties that do not have any cities.",
        "context": "CREATE TABLE city (Name VARCHAR, County_ID VARCHAR); CREATE TABLE county_public_safety (Name VARCHAR, County_ID VARCHAR)",
        "answer": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
        "db_id": "county_public_safety"
    },
    {
        "question": "Show the police force shared by counties with location on the east and west.",
        "context": "CREATE TABLE county_public_safety (Police_force VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"",
        "db_id": "county_public_safety"
    },
    {
        "question": "Show the names of cities in counties that have a crime rate less than 100.",
        "context": "CREATE TABLE county_public_safety (name VARCHAR, county_id VARCHAR, Crime_rate INTEGER); CREATE TABLE city (name VARCHAR, county_id VARCHAR, Crime_rate INTEGER)",
        "answer": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)",
        "db_id": "county_public_safety"
    },
    {
        "question": "Show the case burden of counties in descending order of population.",
        "context": "CREATE TABLE county_public_safety (Case_burden VARCHAR, Population VARCHAR)",
        "answer": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
        "db_id": "county_public_safety"
    },
    {
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "context": "CREATE TABLE Rooms (roomName VARCHAR, decor VARCHAR, basePrice VARCHAR, beds VARCHAR)",
        "answer": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "db_id": "inn_1"
    },
    {
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "context": "CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR, basePrice VARCHAR, maxOccupancy VARCHAR)",
        "answer": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;",
        "db_id": "inn_1"
    },
    {
        "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
        "context": "CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)",
        "answer": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "inn_1"
    },
    {
        "question": "How many kids stay in the rooms reserved by ROY SWEAZY?",
        "context": "CREATE TABLE Reservations (kids VARCHAR, FirstName VARCHAR, LastName VARCHAR)",
        "answer": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "db_id": "inn_1"
    },
    {
        "question": "How many times does ROY SWEAZY has reserved a room.",
        "context": "CREATE TABLE Reservations (FirstName VARCHAR, LastName VARCHAR)",
        "answer": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "db_id": "inn_1"
    },
    {
        "question": "Which room has the highest rate? List the room's full name, rate, check in and check out date.",
        "context": "CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR); CREATE TABLE Reservations (Rate VARCHAR, CheckIn VARCHAR, CheckOut VARCHAR, Room VARCHAR)",
        "answer": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;",
        "db_id": "inn_1"
    },
    {
        "question": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?",
        "context": "CREATE TABLE Reservations (Adults VARCHAR, LastName VARCHAR, CheckIn VARCHAR, FirstName VARCHAR)",
        "answer": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";",
        "db_id": "inn_1"
    },
    {
        "question": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?",
        "context": "CREATE TABLE Reservations (Kids VARCHAR, LastName VARCHAR, CheckIn VARCHAR, FirstName VARCHAR)",
        "answer": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
        "db_id": "inn_1"
    },
    {
        "question": "How many king beds are there?",
        "context": "CREATE TABLE Rooms (beds INTEGER, bedtype VARCHAR)",
        "answer": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
        "db_id": "inn_1"
    },
    {
        "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "context": "CREATE TABLE Rooms (roomName VARCHAR, decor VARCHAR, bedtype VARCHAR, basePrice VARCHAR)",
        "answer": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
        "db_id": "inn_1"
    },
    {
        "question": "Which room has cheapest base price? List the room's name and the base price.",
        "context": "CREATE TABLE Rooms (roomName VARCHAR, basePrice VARCHAR)",
        "answer": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;",
        "db_id": "inn_1"
    },
    {
        "question": "What is the decor of room Recluse and defiance?",
        "context": "CREATE TABLE Rooms (decor VARCHAR, roomName VARCHAR)",
        "answer": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";",
        "db_id": "inn_1"
    },
    {
        "question": "What is the average base price of different bed type? List bed type and average base price.",
        "context": "CREATE TABLE Rooms (bedType VARCHAR, basePrice INTEGER)",
        "answer": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
        "db_id": "inn_1"
    },
    {
        "question": "What is the total number of people who could stay in the modern rooms in this inn?",
        "context": "CREATE TABLE Rooms (maxOccupancy INTEGER, decor VARCHAR)",
        "answer": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';",
        "db_id": "inn_1"
    },
    {
        "question": "What kind of decor has the least number of reservations?",
        "context": "CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (decor VARCHAR, RoomId VARCHAR)",
        "answer": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;",
        "db_id": "inn_1"
    },
    {
        "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
        "context": "CREATE TABLE Rooms (RoomId VARCHAR, maxOccupancy VARCHAR); CREATE TABLE Reservations (Room VARCHAR, Adults VARCHAR, Kids VARCHAR)",
        "answer": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "db_id": "inn_1"
    },
    {
        "question": "Find the first and last names of people who payed more than the rooms' base prices.",
        "context": "CREATE TABLE Reservations (firstname VARCHAR, lastname VARCHAR, Room VARCHAR, Rate VARCHAR); CREATE TABLE Rooms (RoomId VARCHAR, basePrice VARCHAR)",
        "answer": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "db_id": "inn_1"
    },
    {
        "question": "How many rooms are there?",
        "context": "CREATE TABLE Rooms (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Rooms;",
        "db_id": "inn_1"
    },
    {
        "question": "Find the number of rooms with a king bed.",
        "context": "CREATE TABLE Rooms (bedType VARCHAR)",
        "answer": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";",
        "db_id": "inn_1"
    },
    {
        "question": "Find the number of rooms for each bed type.",
        "context": "CREATE TABLE Rooms (bedType VARCHAR)",
        "answer": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;",
        "db_id": "inn_1"
    },
    {
        "question": "Find the name of the room with the maximum occupancy.",
        "context": "CREATE TABLE Rooms (roomName VARCHAR, maxOccupancy VARCHAR)",
        "answer": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
        "db_id": "inn_1"
    },
    {
        "question": "Find the id and name of the most expensive base price room.",
        "context": "CREATE TABLE Rooms (RoomId VARCHAR, roomName VARCHAR, basePrice VARCHAR)",
        "answer": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;",
        "db_id": "inn_1"
    },
    {
        "question": "List the type of bed and name of all traditional rooms.",
        "context": "CREATE TABLE Rooms (roomName VARCHAR, bedType VARCHAR, decor VARCHAR)",
        "answer": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";",
        "db_id": "inn_1"
    },
    {
        "question": "Find the number of rooms with king bed for each decor type.",
        "context": "CREATE TABLE Rooms (decor VARCHAR, bedType VARCHAR)",
        "answer": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;",
        "db_id": "inn_1"
    },
    {
        "question": "Find the average and minimum price of the rooms in different decor.",
        "context": "CREATE TABLE Rooms (decor VARCHAR, basePrice INTEGER)",
        "answer": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;",
        "db_id": "inn_1"
    },
    {
        "question": "List the name of all rooms sorted by their prices.",
        "context": "CREATE TABLE Rooms (roomName VARCHAR, basePrice VARCHAR)",
        "answer": "SELECT roomName FROM Rooms ORDER BY basePrice;",
        "db_id": "inn_1"
    },
    {
        "question": "Find the number of rooms with price higher than 120 for different decor.",
        "context": "CREATE TABLE Rooms (decor VARCHAR, basePrice INTEGER)",
        "answer": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;",
        "db_id": "inn_1"
    },
    {
        "question": "List the name of rooms with king or queen bed.",
        "context": "CREATE TABLE Rooms (roomName VARCHAR, bedType VARCHAR)",
        "answer": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";",
        "db_id": "inn_1"
    },
    {
        "question": "How many different types of beds are there?",
        "context": "CREATE TABLE Rooms (bedType VARCHAR)",
        "answer": "SELECT count(DISTINCT bedType) FROM Rooms;",
        "db_id": "inn_1"
    },
    {
        "question": "Find the name and id of the top 3 expensive rooms.",
        "context": "CREATE TABLE Rooms (RoomId VARCHAR, roomName VARCHAR, basePrice VARCHAR)",
        "answer": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
        "db_id": "inn_1"
    },
    {
        "question": "Find the name of rooms whose price is higher than the average price.",
        "context": "CREATE TABLE Rooms (roomName VARCHAR, basePrice INTEGER)",
        "answer": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );",
        "db_id": "inn_1"
    },
    {
        "question": "Find the number of rooms that do not have any reservation.",
        "context": "CREATE TABLE rooms (roomid VARCHAR, room VARCHAR); CREATE TABLE reservations (roomid VARCHAR, room VARCHAR)",
        "answer": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "db_id": "inn_1"
    },
    {
        "question": "Return the name and number of reservations made for each of the rooms.",
        "context": "CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)",
        "answer": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room",
        "db_id": "inn_1"
    },
    {
        "question": "Find the names of rooms that have been reserved for more than 60 times.",
        "context": "CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)",
        "answer": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
        "db_id": "inn_1"
    },
    {
        "question": "Find the name of rooms whose base price is between 120 and 150.",
        "context": "CREATE TABLE rooms (roomname VARCHAR, baseprice INTEGER)",
        "answer": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
        "db_id": "inn_1"
    },
    {
        "question": "Find the name of rooms booked by some customers whose first name contains ROY.",
        "context": "CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)",
        "answer": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'",
        "db_id": "inn_1"
    },
    {
        "question": "what are the details of the cmi masters that have the cross reference code 'Tax'?",
        "context": "CREATE TABLE CMI_Cross_References (master_customer_id VARCHAR, source_system_code VARCHAR); CREATE TABLE Customer_Master_Index (cmi_details VARCHAR, master_customer_id VARCHAR)",
        "answer": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "context": "CREATE TABLE Council_Tax (cmi_cross_ref_id VARCHAR); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, source_system_code VARCHAR)",
        "answer": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
        "context": "CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, master_customer_id VARCHAR); CREATE TABLE Business_Rates (cmi_cross_ref_id VARCHAR)",
        "answer": "SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
        "context": "CREATE TABLE CMI_Cross_References (source_system_code VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE Benefits_Overpayments (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR)",
        "answer": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
        "context": "CREATE TABLE CMI_Cross_References (source_system_code VARCHAR, master_customer_id VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE Parking_Fines (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR)",
        "answer": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "context": "CREATE TABLE Rent_Arrears (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE Customer_Master_Index (master_customer_id VARCHAR, cmi_details VARCHAR); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, master_customer_id VARCHAR)",
        "answer": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
        "context": "CREATE TABLE Electoral_Register (electoral_register_id VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, source_system_code VARCHAR)",
        "answer": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "How many different source system code for the cmi cross references are there?",
        "context": "CREATE TABLE CMI_cross_references (source_system_code VARCHAR)",
        "answer": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "List all information about customer master index, and sort them by details in descending order.",
        "context": "CREATE TABLE customer_master_index (cmi_details VARCHAR)",
        "answer": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
        "context": "CREATE TABLE parking_fines (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR)",
        "answer": "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "How many council taxes are collected for renting arrears ?",
        "context": "CREATE TABLE rent_arrears (Id VARCHAR)",
        "answer": "SELECT count(*) FROM rent_arrears",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "context": "CREATE TABLE customer_master_index (master_customer_id VARCHAR, cmi_details VARCHAR); CREATE TABLE cmi_cross_references (source_system_code VARCHAR, master_customer_id VARCHAR)",
        "answer": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "context": "CREATE TABLE parking_fines (cmi_cross_ref_id VARCHAR); CREATE TABLE cmi_cross_references (cmi_cross_ref_id VARCHAR)",
        "answer": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "Which distinct source system code includes the substring 'en'?",
        "context": "CREATE TABLE cmi_cross_references (source_system_code VARCHAR)",
        "answer": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'",
        "db_id": "local_govt_mdm"
    },
    {
        "question": "How many parties are there?",
        "context": "CREATE TABLE party (Id VARCHAR)",
        "answer": "SELECT count(*) FROM party",
        "db_id": "party_host"
    },
    {
        "question": "List the themes of parties in ascending order of number of hosts.",
        "context": "CREATE TABLE party (Party_Theme VARCHAR, Number_of_hosts VARCHAR)",
        "answer": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "db_id": "party_host"
    },
    {
        "question": "What are the themes and locations of parties?",
        "context": "CREATE TABLE party (Party_Theme VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT Party_Theme ,  LOCATION FROM party",
        "db_id": "party_host"
    },
    {
        "question": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".",
        "context": "CREATE TABLE party (First_year VARCHAR, Last_year VARCHAR, Party_Theme VARCHAR)",
        "answer": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\"",
        "db_id": "party_host"
    },
    {
        "question": "What is the average number of hosts for parties?",
        "context": "CREATE TABLE party (Number_of_hosts INTEGER)",
        "answer": "SELECT avg(Number_of_hosts) FROM party",
        "db_id": "party_host"
    },
    {
        "question": "What is the location of the party with the most hosts?",
        "context": "CREATE TABLE party (LOCATION VARCHAR, Number_of_hosts VARCHAR)",
        "answer": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
        "db_id": "party_host"
    },
    {
        "question": "Show different nationalities along with the number of hosts of each nationality.",
        "context": "CREATE TABLE HOST (Nationality VARCHAR)",
        "answer": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality",
        "db_id": "party_host"
    },
    {
        "question": "Show the most common nationality of hosts.",
        "context": "CREATE TABLE HOST (Nationality VARCHAR)",
        "answer": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "party_host"
    },
    {
        "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
        "context": "CREATE TABLE HOST (Nationality VARCHAR, Age INTEGER)",
        "answer": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "db_id": "party_host"
    },
    {
        "question": "Show the themes of parties and the names of the party hosts.",
        "context": "CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR); CREATE TABLE party (Party_Theme VARCHAR, Party_ID VARCHAR)",
        "answer": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID",
        "db_id": "party_host"
    },
    {
        "question": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.",
        "context": "CREATE TABLE party (Location VARCHAR, Party_ID VARCHAR); CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR, Age VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR)",
        "answer": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age",
        "db_id": "party_host"
    },
    {
        "question": "Show the locations of parties with hosts older than 50.",
        "context": "CREATE TABLE party (Location VARCHAR, Party_ID VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR); CREATE TABLE HOST (Host_ID VARCHAR, Age INTEGER)",
        "answer": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50",
        "db_id": "party_host"
    },
    {
        "question": "Show the host names for parties with number of hosts greater than 20.",
        "context": "CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR); CREATE TABLE party (Party_ID VARCHAR, Number_of_hosts INTEGER)",
        "answer": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
        "db_id": "party_host"
    },
    {
        "question": "Show the name and the nationality of the oldest host.",
        "context": "CREATE TABLE HOST (Name VARCHAR, Nationality VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
        "db_id": "party_host"
    },
    {
        "question": "List the names of hosts who did not serve as a host of any party in our record.",
        "context": "CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR); CREATE TABLE party_host (Name VARCHAR, Host_ID VARCHAR)",
        "answer": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "db_id": "party_host"
    },
    {
        "question": "Show all region code and region name sorted by the codes.",
        "context": "CREATE TABLE region (region_code VARCHAR, region_name VARCHAR)",
        "answer": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
        "db_id": "storm_record"
    },
    {
        "question": "List all region names in alphabetical order.",
        "context": "CREATE TABLE region (region_name VARCHAR)",
        "answer": "SELECT region_name FROM region ORDER BY region_name",
        "db_id": "storm_record"
    },
    {
        "question": "Show names for all regions except for Denmark.",
        "context": "CREATE TABLE region (region_name VARCHAR)",
        "answer": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "db_id": "storm_record"
    },
    {
        "question": "How many storms had death records?",
        "context": "CREATE TABLE storm (Number_Deaths INTEGER)",
        "answer": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "db_id": "storm_record"
    },
    {
        "question": "List name, dates active, and number of deaths for all storms with at least 1 death.",
        "context": "CREATE TABLE storm (name VARCHAR, dates_active VARCHAR, number_deaths VARCHAR)",
        "answer": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "db_id": "storm_record"
    },
    {
        "question": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "context": "CREATE TABLE storm (damage_millions_USD INTEGER, max_speed INTEGER)",
        "answer": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "db_id": "storm_record"
    },
    {
        "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?",
        "context": "CREATE TABLE storm (number_deaths INTEGER, damage_millions_USD INTEGER, max_speed INTEGER)",
        "answer": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)",
        "db_id": "storm_record"
    },
    {
        "question": "List name and damage for all storms in a descending order of max speed.",
        "context": "CREATE TABLE storm (name VARCHAR, damage_millions_USD VARCHAR, max_speed VARCHAR)",
        "answer": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "db_id": "storm_record"
    },
    {
        "question": "How many regions are affected?",
        "context": "CREATE TABLE affected_region (region_id VARCHAR)",
        "answer": "SELECT count(DISTINCT region_id) FROM affected_region",
        "db_id": "storm_record"
    },
    {
        "question": "Show the name for regions not affected.",
        "context": "CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_name VARCHAR, region_id VARCHAR)",
        "answer": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
        "db_id": "storm_record"
    },
    {
        "question": "Show the name for regions and the number of storms for each region.",
        "context": "CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR)",
        "answer": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "db_id": "storm_record"
    },
    {
        "question": "List the name for storms and the number of affected regions for each storm.",
        "context": "CREATE TABLE affected_region (storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)",
        "answer": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",
        "db_id": "storm_record"
    },
    {
        "question": "What is the storm name and max speed which affected the greatest number of regions?",
        "context": "CREATE TABLE storm (name VARCHAR, max_speed VARCHAR, storm_id VARCHAR); CREATE TABLE affected_region (storm_id VARCHAR)",
        "answer": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "storm_record"
    },
    {
        "question": "Show the name of storms which don't have affected region in record.",
        "context": "CREATE TABLE affected_region (name VARCHAR, storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)",
        "answer": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
        "db_id": "storm_record"
    },
    {
        "question": "Show storm name with at least two regions and 10 cities affected.",
        "context": "CREATE TABLE affected_region (storm_id VARCHAR, number_city_affected INTEGER); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)",
        "answer": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "db_id": "storm_record"
    },
    {
        "question": "Show all storm names except for those with at least two affected regions.",
        "context": "CREATE TABLE storm (name VARCHAR); CREATE TABLE affected_region (storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)",
        "answer": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "db_id": "storm_record"
    },
    {
        "question": "What are the region names affected by the storm with a number of deaths of least 10?",
        "context": "CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (storm_id VARCHAR, number_deaths VARCHAR)",
        "answer": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10",
        "db_id": "storm_record"
    },
    {
        "question": "Show all storm names affecting region \"Denmark\".",
        "context": "CREATE TABLE region (region_id VARCHAR, region_name VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)",
        "answer": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "db_id": "storm_record"
    },
    {
        "question": "Show the region name with at least two storms.",
        "context": "CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR)",
        "answer": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "db_id": "storm_record"
    },
    {
        "question": "Find the names of the regions which were affected by the storm that killed the greatest number of people.",
        "context": "CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (storm_id VARCHAR, Number_Deaths VARCHAR)",
        "answer": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
        "db_id": "storm_record"
    },
    {
        "question": "Find the name of the storm that affected both Afghanistan and Albania regions.",
        "context": "CREATE TABLE storm (Name VARCHAR, storm_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE region (region_id VARCHAR, Region_name VARCHAR)",
        "answer": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
        "db_id": "storm_record"
    },
    {
        "question": "How many counties are there in total?",
        "context": "CREATE TABLE county (Id VARCHAR)",
        "answer": "SELECT count(*) FROM county",
        "db_id": "election"
    },
    {
        "question": "Show the county name and population of all counties.",
        "context": "CREATE TABLE county (County_name VARCHAR, Population VARCHAR)",
        "answer": "SELECT County_name ,  Population FROM county",
        "db_id": "election"
    },
    {
        "question": "Show the average population of all counties.",
        "context": "CREATE TABLE county (Population INTEGER)",
        "answer": "SELECT avg(Population) FROM county",
        "db_id": "election"
    },
    {
        "question": "Return the maximum and minimum population among all counties.",
        "context": "CREATE TABLE county (Population INTEGER)",
        "answer": "SELECT max(Population) ,  min(Population) FROM county",
        "db_id": "election"
    },
    {
        "question": "Show all the distinct districts for elections.",
        "context": "CREATE TABLE election (District VARCHAR)",
        "answer": "SELECT DISTINCT District FROM election",
        "db_id": "election"
    },
    {
        "question": "Show the zip code of the county with name \"Howard\".",
        "context": "CREATE TABLE county (Zip_code VARCHAR, County_name VARCHAR)",
        "answer": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"",
        "db_id": "election"
    },
    {
        "question": "Show the delegate from district 1 in election.",
        "context": "CREATE TABLE election (Delegate VARCHAR, District VARCHAR)",
        "answer": "SELECT Delegate FROM election WHERE District  =  1",
        "db_id": "election"
    },
    {
        "question": "Show the delegate and committee information of elections.",
        "context": "CREATE TABLE election (Delegate VARCHAR, Committee VARCHAR)",
        "answer": "SELECT Delegate ,  Committee FROM election",
        "db_id": "election"
    },
    {
        "question": "How many distinct governors are there?",
        "context": "CREATE TABLE party (Governor VARCHAR)",
        "answer": "SELECT count(DISTINCT Governor) FROM party",
        "db_id": "election"
    },
    {
        "question": "Show the lieutenant governor and comptroller from the democratic party.",
        "context": "CREATE TABLE party (Lieutenant_Governor VARCHAR, Comptroller VARCHAR, Party VARCHAR)",
        "answer": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "db_id": "election"
    },
    {
        "question": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "context": "CREATE TABLE party (YEAR VARCHAR, Governor VARCHAR)",
        "answer": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "db_id": "election"
    },
    {
        "question": "Show all the information about election.",
        "context": "CREATE TABLE election (Id VARCHAR)",
        "answer": "SELECT * FROM election",
        "db_id": "election"
    },
    {
        "question": "Show the delegates and the names of county they belong to.",
        "context": "CREATE TABLE election (Delegate VARCHAR, District VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)",
        "answer": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District",
        "db_id": "election"
    },
    {
        "question": "Which delegates are from counties with population smaller than 100000?",
        "context": "CREATE TABLE election (Delegate VARCHAR, District VARCHAR); CREATE TABLE county (County_id VARCHAR, Population INTEGER)",
        "answer": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "db_id": "election"
    },
    {
        "question": "How many distinct delegates are from counties with population larger than 50000?",
        "context": "CREATE TABLE election (Delegate VARCHAR, District VARCHAR); CREATE TABLE county (County_id VARCHAR, Population INTEGER)",
        "answer": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000",
        "db_id": "election"
    },
    {
        "question": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?",
        "context": "CREATE TABLE election (District VARCHAR, Committee VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)",
        "answer": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"",
        "db_id": "election"
    },
    {
        "question": "Show the delegates and the names of the party they belong to.",
        "context": "CREATE TABLE election (Delegate VARCHAR, Party VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)",
        "answer": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "db_id": "election"
    },
    {
        "question": "Who were the governors of the parties associated with delegates from district 1?",
        "context": "CREATE TABLE party (Governor VARCHAR, Party_ID VARCHAR); CREATE TABLE election (Party VARCHAR, District VARCHAR)",
        "answer": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "db_id": "election"
    },
    {
        "question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "context": "CREATE TABLE party (Comptroller VARCHAR, Party_ID VARCHAR); CREATE TABLE election (Party VARCHAR, District VARCHAR)",
        "answer": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "db_id": "election"
    },
    {
        "question": "Return all the committees that have delegates from Democratic party.",
        "context": "CREATE TABLE election (Committee VARCHAR, Party VARCHAR); CREATE TABLE party (Party_ID VARCHAR, Party VARCHAR)",
        "answer": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"",
        "db_id": "election"
    },
    {
        "question": "Show the name of each county along with the corresponding number of delegates from that county.",
        "context": "CREATE TABLE election (District VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)",
        "answer": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "db_id": "election"
    },
    {
        "question": "Show the name of each party and the corresponding number of delegates from that party.",
        "context": "CREATE TABLE election (Party VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)",
        "answer": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "db_id": "election"
    },
    {
        "question": "Return the names of all counties sorted by population in ascending order.",
        "context": "CREATE TABLE county (County_name VARCHAR, Population VARCHAR)",
        "answer": "SELECT County_name FROM county ORDER BY Population ASC",
        "db_id": "election"
    },
    {
        "question": "Return the names of all counties sorted by county name in descending alphabetical order.",
        "context": "CREATE TABLE county (County_name VARCHAR)",
        "answer": "SELECT County_name FROM county ORDER BY County_name DESC",
        "db_id": "election"
    },
    {
        "question": "Show the name of the county with the biggest population.",
        "context": "CREATE TABLE county (County_name VARCHAR, Population VARCHAR)",
        "answer": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
        "db_id": "election"
    },
    {
        "question": "Show the 3 counties with the smallest population.",
        "context": "CREATE TABLE county (County_name VARCHAR, Population VARCHAR)",
        "answer": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
        "db_id": "election"
    },
    {
        "question": "Show the names of counties that have at least two delegates.",
        "context": "CREATE TABLE election (District VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)",
        "answer": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "db_id": "election"
    },
    {
        "question": "Show the name of the party that has at least two records.",
        "context": "CREATE TABLE party (Party VARCHAR)",
        "answer": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2",
        "db_id": "election"
    },
    {
        "question": "Show the name of the party that has the most delegates.",
        "context": "CREATE TABLE election (Party VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)",
        "answer": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "election"
    },
    {
        "question": "Show the people that have been governor the most times.",
        "context": "CREATE TABLE party (Governor VARCHAR)",
        "answer": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "election"
    },
    {
        "question": "Show the people that have been comptroller the most times and the corresponding number of times.",
        "context": "CREATE TABLE party (Comptroller VARCHAR)",
        "answer": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "election"
    },
    {
        "question": "What are the names of parties that do not have delegates in election?",
        "context": "CREATE TABLE election (Party VARCHAR, Party_ID VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)",
        "answer": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
        "db_id": "election"
    },
    {
        "question": "What are the names of parties that have both delegates on \"Appropriations\" committee and",
        "context": "CREATE TABLE election (Party VARCHAR, Committee VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)",
        "answer": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
        "db_id": "election"
    },
    {
        "question": "Which committees have delegates from both democratic party and liberal party?",
        "context": "CREATE TABLE election (Committee VARCHAR, Party VARCHAR); CREATE TABLE party (Party_ID VARCHAR, Party VARCHAR)",
        "answer": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "db_id": "election"
    },
    {
        "question": "How many journalists are there?",
        "context": "CREATE TABLE journalist (Id VARCHAR)",
        "answer": "SELECT count(*) FROM journalist",
        "db_id": "news_report"
    },
    {
        "question": "List the names of journalists in ascending order of years working.",
        "context": "CREATE TABLE journalist (Name VARCHAR, Years_working VARCHAR)",
        "answer": "SELECT Name FROM journalist ORDER BY Years_working ASC",
        "db_id": "news_report"
    },
    {
        "question": "What are the nationalities and ages of journalists?",
        "context": "CREATE TABLE journalist (Nationality VARCHAR, Age VARCHAR)",
        "answer": "SELECT Nationality ,  Age FROM journalist",
        "db_id": "news_report"
    },
    {
        "question": "Show the names of journalists from \"England\" or \"Wales\".",
        "context": "CREATE TABLE journalist (Name VARCHAR, Nationality VARCHAR)",
        "answer": "SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\"",
        "db_id": "news_report"
    },
    {
        "question": "What is the average number of years spent working as a journalist?",
        "context": "CREATE TABLE journalist (Years_working INTEGER)",
        "answer": "SELECT avg(Years_working) FROM journalist",
        "db_id": "news_report"
    },
    {
        "question": "What is the nationality of the journalist with the largest number of years working?",
        "context": "CREATE TABLE journalist (Nationality VARCHAR, Years_working VARCHAR)",
        "answer": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1",
        "db_id": "news_report"
    },
    {
        "question": "Show the different nationalities and the number of journalists of each nationality.",
        "context": "CREATE TABLE journalist (Nationality VARCHAR)",
        "answer": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality",
        "db_id": "news_report"
    },
    {
        "question": "Show the most common nationality for journalists.",
        "context": "CREATE TABLE journalist (Nationality VARCHAR)",
        "answer": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "news_report"
    },
    {
        "question": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
        "context": "CREATE TABLE journalist (Nationality VARCHAR, Years_working INTEGER)",
        "answer": "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3",
        "db_id": "news_report"
    },
    {
        "question": "Show the dates, places, and names of events in descending order of the attendance.",
        "context": "CREATE TABLE event (Date VARCHAR, Name VARCHAR, venue VARCHAR, Event_Attendance VARCHAR)",
        "answer": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC",
        "db_id": "news_report"
    },
    {
        "question": "Show the names of journalists and the dates of the events they reported.",
        "context": "CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Date VARCHAR, Event_ID VARCHAR)",
        "answer": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID",
        "db_id": "news_report"
    },
    {
        "question": "Show the names of journalists and the names of the events they reported in ascending order",
        "context": "CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Name VARCHAR, Event_ID VARCHAR, Event_Attendance VARCHAR)",
        "answer": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
        "db_id": "news_report"
    },
    {
        "question": "Show the names of journalists and the number of events they reported.",
        "context": "CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Event_ID VARCHAR)",
        "answer": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name",
        "db_id": "news_report"
    },
    {
        "question": "Show the names of journalists that have reported more than one event.",
        "context": "CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Event_ID VARCHAR)",
        "answer": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1",
        "db_id": "news_report"
    },
    {
        "question": "List the names of journalists who have not reported any event.",
        "context": "CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Name VARCHAR, journalist_ID VARCHAR)",
        "answer": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)",
        "db_id": "news_report"
    },
    {
        "question": "what are the average and maximum attendances of all events?",
        "context": "CREATE TABLE event (Event_Attendance INTEGER)",
        "answer": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event",
        "db_id": "news_report"
    },
    {
        "question": "Find the average age and experience working length of journalists working on different role type.",
        "context": "CREATE TABLE news_report (work_type VARCHAR, journalist_id VARCHAR); CREATE TABLE journalist (age INTEGER, journalist_id VARCHAR)",
        "answer": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",
        "db_id": "news_report"
    },
    {
        "question": "List the event venues and names that have the top 2 most number of people attended.",
        "context": "CREATE TABLE event (venue VARCHAR, name VARCHAR, Event_Attendance VARCHAR)",
        "answer": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2",
        "db_id": "news_report"
    },
    {
        "question": "Show me all the restaurants.",
        "context": "CREATE TABLE Restaurant (ResName VARCHAR)",
        "answer": "SELECT ResName FROM Restaurant;",
        "db_id": "restaurant_1"
    },
    {
        "question": "What is the address of the restaurant Subway?",
        "context": "CREATE TABLE Restaurant (Address VARCHAR, ResName VARCHAR)",
        "answer": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";",
        "db_id": "restaurant_1"
    },
    {
        "question": "What is the rating of the restaurant Subway?",
        "context": "CREATE TABLE Restaurant (Rating VARCHAR, ResName VARCHAR)",
        "answer": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";",
        "db_id": "restaurant_1"
    },
    {
        "question": "List all restaurant types.",
        "context": "CREATE TABLE Restaurant_Type (ResTypeName VARCHAR)",
        "answer": "SELECT ResTypeName FROM Restaurant_Type;",
        "db_id": "restaurant_1"
    },
    {
        "question": "What is the description of the restaurant type Sandwich?",
        "context": "CREATE TABLE Restaurant_Type (ResTypeDescription VARCHAR, ResTypeName VARCHAR)",
        "answer": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";",
        "db_id": "restaurant_1"
    },
    {
        "question": "Which restaurants have highest rating? List the restaurant name and its rating.",
        "context": "CREATE TABLE Restaurant (ResName VARCHAR, Rating VARCHAR)",
        "answer": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;",
        "db_id": "restaurant_1"
    },
    {
        "question": "What is the age of student Linda Smith?",
        "context": "CREATE TABLE Student (Age VARCHAR, Fname VARCHAR, Lname VARCHAR)",
        "answer": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
        "db_id": "restaurant_1"
    },
    {
        "question": "What is the gender of the student Linda Smith?",
        "context": "CREATE TABLE Student (Sex VARCHAR, Fname VARCHAR, Lname VARCHAR)",
        "answer": "SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
        "db_id": "restaurant_1"
    },
    {
        "question": "List all students' first names and last names who majored in 600.",
        "context": "CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Major VARCHAR)",
        "answer": "SELECT Fname , Lname FROM Student WHERE Major  =  600;",
        "db_id": "restaurant_1"
    },
    {
        "question": "Which city does student Linda Smith live in?",
        "context": "CREATE TABLE Student (city_code VARCHAR, Fname VARCHAR, Lname VARCHAR)",
        "answer": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
        "db_id": "restaurant_1"
    },
    {
        "question": "Advisor 1121 has how many students?",
        "context": "CREATE TABLE Student (Advisor VARCHAR)",
        "answer": "SELECT count(*) FROM Student WHERE Advisor =  1121;",
        "db_id": "restaurant_1"
    },
    {
        "question": "Which Advisor has most of students? List advisor and the number of students.",
        "context": "CREATE TABLE Student (Advisor VARCHAR)",
        "answer": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;",
        "db_id": "restaurant_1"
    },
    {
        "question": "Which major has least number of students? List the major and the number of students.",
        "context": "CREATE TABLE Student (Major VARCHAR)",
        "answer": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;",
        "db_id": "restaurant_1"
    },
    {
        "question": "Which major has between 2 and 30 number of students? List major and the number of students.",
        "context": "CREATE TABLE Student (Major VARCHAR)",
        "answer": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;",
        "db_id": "restaurant_1"
    },
    {
        "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "context": "CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Major VARCHAR)",
        "answer": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;",
        "db_id": "restaurant_1"
    },
    {
        "question": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.",
        "context": "CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Sex VARCHAR, Age VARCHAR, Major VARCHAR)",
        "answer": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';",
        "db_id": "restaurant_1"
    },
    {
        "question": "How many restaurant is the Sandwich type restaurant?",
        "context": "CREATE TABLE Type_Of_Restaurant (Id VARCHAR); CREATE TABLE Restaurant (Id VARCHAR); CREATE TABLE Restaurant_Type (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'",
        "db_id": "restaurant_1"
    },
    {
        "question": "How long does student Linda Smith spend on the restaurant in total?",
        "context": "CREATE TABLE Visits_Restaurant (Spent INTEGER); CREATE TABLE Student (Spent INTEGER)",
        "answer": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";",
        "db_id": "restaurant_1"
    },
    {
        "question": "How many times has the student Linda Smith visited Subway?",
        "context": "CREATE TABLE Visits_Restaurant (Id VARCHAR); CREATE TABLE Student (Id VARCHAR); CREATE TABLE Restaurant (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";",
        "db_id": "restaurant_1"
    },
    {
        "question": "When did Linda Smith visit Subway?",
        "context": "CREATE TABLE Restaurant (TIME VARCHAR); CREATE TABLE Visits_Restaurant (TIME VARCHAR); CREATE TABLE Student (TIME VARCHAR)",
        "answer": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";",
        "db_id": "restaurant_1"
    },
    {
        "question": "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.",
        "context": "CREATE TABLE Visits_Restaurant (Id VARCHAR); CREATE TABLE Restaurant (Id VARCHAR)",
        "answer": "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;",
        "db_id": "restaurant_1"
    },
    {
        "question": "Which student visited restaurant most often? List student's first name and last name.",
        "context": "CREATE TABLE Visits_Restaurant (Id VARCHAR); CREATE TABLE Student (Id VARCHAR)",
        "answer": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "restaurant_1"
    },
    {
        "question": "Find the ids of orders whose status is 'Success'.",
        "context": "CREATE TABLE actual_orders (actual_order_id VARCHAR, order_status_code VARCHAR)",
        "answer": "SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success'",
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the name and price of the product that has been ordered the greatest number of times.",
        "context": "CREATE TABLE products (product_name VARCHAR, product_price VARCHAR, product_id VARCHAR); CREATE TABLE regular_order_products (product_id VARCHAR)",
        "answer": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customer_deliveries"
    },
    {
        "question": "How many different payment methods are there?",
        "context": "CREATE TABLE customers (payment_method VARCHAR)",
        "answer": "SELECT count(DISTINCT payment_method) FROM customers",
        "db_id": "customer_deliveries"
    },
    {
        "question": "Show the details of all trucks in the order of their license number.",
        "context": "CREATE TABLE trucks (truck_details VARCHAR, truck_licence_number VARCHAR)",
        "answer": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the name of the most expensive product.",
        "context": "CREATE TABLE products (product_name VARCHAR, product_price VARCHAR)",
        "answer": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the names of customers who are not living in the state of California.",
        "context": "CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR); CREATE TABLE addresses (address_id VARCHAR, state_province_county VARCHAR)",
        "answer": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
        "db_id": "customer_deliveries"
    },
    {
        "question": "List the names and emails of customers who payed by Visa card.",
        "context": "CREATE TABLE customers (customer_email VARCHAR, customer_name VARCHAR, payment_method VARCHAR)",
        "answer": "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'",
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the names and phone numbers of customers living in California state.",
        "context": "CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE addresses (address_id VARCHAR, state_province_county VARCHAR)",
        "answer": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the states which do not have any employee in their record.",
        "context": "CREATE TABLE Employees (state_province_county VARCHAR, address_id VARCHAR, employee_address_id VARCHAR); CREATE TABLE addresses (state_province_county VARCHAR, address_id VARCHAR, employee_address_id VARCHAR)",
        "answer": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)",
        "db_id": "customer_deliveries"
    },
    {
        "question": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.",
        "context": "CREATE TABLE Customers (customer_name VARCHAR, customer_phone VARCHAR, customer_email VARCHAR, date_became_customer VARCHAR)",
        "answer": "SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer",
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the name of the first 5 customers.",
        "context": "CREATE TABLE Customers (customer_name VARCHAR, date_became_customer VARCHAR)",
        "answer": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5",
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the payment method that is used most frequently.",
        "context": "CREATE TABLE Customers (payment_method VARCHAR)",
        "answer": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customer_deliveries"
    },
    {
        "question": "List the names of all routes in alphabetic order.",
        "context": "CREATE TABLE Delivery_Routes (route_name VARCHAR)",
        "answer": "SELECT route_name FROM Delivery_Routes ORDER BY route_name",
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the name of route that has the highest number of deliveries.",
        "context": "CREATE TABLE Delivery_Routes (route_name VARCHAR, route_id VARCHAR); CREATE TABLE Delivery_Route_Locations (route_id VARCHAR)",
        "answer": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customer_deliveries"
    },
    {
        "question": "List the state names and the number of customers living in each state.",
        "context": "CREATE TABLE customer_addresses (address_id VARCHAR); CREATE TABLE addresses (state_province_county VARCHAR, address_id VARCHAR)",
        "answer": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "db_id": "customer_deliveries"
    },
    {
        "question": "How many authors are there?",
        "context": "CREATE TABLE authors (Id VARCHAR)",
        "answer": "SELECT count(*) FROM authors",
        "db_id": "icfp_1"
    },
    {
        "question": "How many institutions are there?",
        "context": "CREATE TABLE inst (Id VARCHAR)",
        "answer": "SELECT count(*) FROM inst",
        "db_id": "icfp_1"
    },
    {
        "question": "How many papers are published in total?",
        "context": "CREATE TABLE papers (Id VARCHAR)",
        "answer": "SELECT count(*) FROM papers",
        "db_id": "icfp_1"
    },
    {
        "question": "What are the titles of papers published by \"Jeremy Gibbons\"?",
        "context": "CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)",
        "answer": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Find all the papers published by \"Aaron Turon\".",
        "context": "CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)",
        "answer": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "db_id": "icfp_1"
    },
    {
        "question": "How many papers have \"Atsushi Ohori\" published?",
        "context": "CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE papers (paperid VARCHAR)",
        "answer": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"",
        "db_id": "icfp_1"
    },
    {
        "question": "What is the name of the institution that \"Matthias Blume\" belongs to?",
        "context": "CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE inst (name VARCHAR, instid VARCHAR)",
        "answer": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Which institution does \"Katsuhiro Ueno\" belong to?",
        "context": "CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE inst (name VARCHAR, instid VARCHAR)",
        "answer": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Who belong to the institution \"University of Oxford\"? Show the first names and last names.",
        "context": "CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (fname VARCHAR, lname VARCHAR, authid VARCHAR); CREATE TABLE inst (instid VARCHAR, name VARCHAR)",
        "answer": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Which authors belong to the institution \"Google\"? Show the first names and last names.",
        "context": "CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (fname VARCHAR, lname VARCHAR, authid VARCHAR); CREATE TABLE inst (instid VARCHAR, name VARCHAR)",
        "answer": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
        "db_id": "icfp_1"
    },
    {
        "question": "What are the last names of the author of the paper titled \"Binders Unbound\"?",
        "context": "CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (lname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR)",
        "answer": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".",
        "context": "CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR); CREATE TABLE authors (fname VARCHAR, lname VARCHAR, authid VARCHAR)",
        "answer": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"",
        "db_id": "icfp_1"
    },
    {
        "question": "What are the papers published under the institution \"Indiana University\"?",
        "context": "CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)",
        "answer": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Find all the papers published by the institution \"Google\".",
        "context": "CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)",
        "answer": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
        "db_id": "icfp_1"
    },
    {
        "question": "How many papers are published by the institution \"Tokohu University\"?",
        "context": "CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)",
        "answer": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Find the number of papers published by the institution \"University of Pennsylvania\".",
        "context": "CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)",
        "answer": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Find the papers which have \"Olin Shivers\" as an author.",
        "context": "CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)",
        "answer": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Which papers have \"Stephanie Weirich\" as an author?",
        "context": "CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)",
        "answer": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?",
        "context": "CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR, instid VARCHAR, authorder VARCHAR); CREATE TABLE authors (authid VARCHAR, lname VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE inst (instid VARCHAR, country VARCHAR)",
        "answer": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?",
        "context": "CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR, instid VARCHAR, authorder VARCHAR); CREATE TABLE authors (authid VARCHAR, lname VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE inst (instid VARCHAR, country VARCHAR)",
        "answer": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "db_id": "icfp_1"
    },
    {
        "question": "What is the last name of the author that has published the most papers?",
        "context": "CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (lname VARCHAR, fname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR)",
        "answer": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1",
        "db_id": "icfp_1"
    },
    {
        "question": "Retrieve the country that has published the most papers.",
        "context": "CREATE TABLE inst (country VARCHAR, instid VARCHAR); CREATE TABLE authorship (instid VARCHAR, paperid VARCHAR); CREATE TABLE papers (paperid VARCHAR)",
        "answer": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
        "db_id": "icfp_1"
    },
    {
        "question": "Find the name of the organization that has published the largest number of papers.",
        "context": "CREATE TABLE inst (name VARCHAR, instid VARCHAR); CREATE TABLE authorship (instid VARCHAR, paperid VARCHAR); CREATE TABLE papers (paperid VARCHAR)",
        "answer": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "icfp_1"
    },
    {
        "question": "Find the titles of the papers that contain the word \"ML\".",
        "context": "CREATE TABLE papers (title VARCHAR)",
        "answer": "SELECT title FROM papers WHERE title LIKE \"%ML%\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Which paper's title contains the word \"Database\"?",
        "context": "CREATE TABLE papers (title VARCHAR)",
        "answer": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\".",
        "context": "CREATE TABLE authors (fname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR); CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR)",
        "answer": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".",
        "context": "CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (lname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR)",
        "answer": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Retrieve the title of the paper that has the largest number of authors.",
        "context": "CREATE TABLE authorship (authorder INTEGER); CREATE TABLE authorship (paperid VARCHAR, authorder INTEGER); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)",
        "answer": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
        "db_id": "icfp_1"
    },
    {
        "question": "What is the first name of the author with last name \"Ueno\"?",
        "context": "CREATE TABLE authors (fname VARCHAR, lname VARCHAR)",
        "answer": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Find the last name of the author with first name \"Amal\".",
        "context": "CREATE TABLE authors (lname VARCHAR, fname VARCHAR)",
        "answer": "SELECT lname FROM authors WHERE fname  =  \"Amal\"",
        "db_id": "icfp_1"
    },
    {
        "question": "Find the first names of all the authors ordered in alphabetical order.",
        "context": "CREATE TABLE authors (fname VARCHAR)",
        "answer": "SELECT fname FROM authors ORDER BY fname",
        "db_id": "icfp_1"
    },
    {
        "question": "Retrieve all the last names of authors in alphabetical order.",
        "context": "CREATE TABLE authors (lname VARCHAR)",
        "answer": "SELECT lname FROM authors ORDER BY lname",
        "db_id": "icfp_1"
    },
    {
        "question": "Retrieve all the first and last names of authors in the alphabetical order of last names.",
        "context": "CREATE TABLE authors (fname VARCHAR, lname VARCHAR)",
        "answer": "SELECT fname ,  lname FROM authors ORDER BY lname",
        "db_id": "icfp_1"
    },
    {
        "question": "How many different last names do the actors and actresses have?",
        "context": "CREATE TABLE actor (last_name VARCHAR)",
        "answer": "SELECT count(DISTINCT last_name) FROM actor",
        "db_id": "sakila_1"
    },
    {
        "question": "What is the most popular first name of the actors?",
        "context": "CREATE TABLE actor (first_name VARCHAR)",
        "answer": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "What is the most popular full name of the actors?",
        "context": "CREATE TABLE actor (first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "Which districts have at least two addresses?",
        "context": "CREATE TABLE address (district VARCHAR)",
        "answer": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2",
        "db_id": "sakila_1"
    },
    {
        "question": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?",
        "context": "CREATE TABLE address (phone VARCHAR, postal_code VARCHAR, address VARCHAR)",
        "answer": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
        "db_id": "sakila_1"
    },
    {
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "context": "CREATE TABLE address (city_id VARCHAR); CREATE TABLE city (city VARCHAR, city_id VARCHAR)",
        "answer": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "How many addresses are in the district of California?",
        "context": "CREATE TABLE address (district VARCHAR)",
        "answer": "SELECT count(*) FROM address WHERE district  =  'California'",
        "db_id": "sakila_1"
    },
    {
        "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
        "context": "CREATE TABLE film (title VARCHAR, film_id VARCHAR, rental_rate VARCHAR); CREATE TABLE inventory (film_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR)",
        "answer": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "db_id": "sakila_1"
    },
    {
        "question": "How many cities are in Australia?",
        "context": "CREATE TABLE country (country_id VARCHAR, country VARCHAR); CREATE TABLE city (country_id VARCHAR)",
        "answer": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "db_id": "sakila_1"
    },
    {
        "question": "Which countries have at least 3 cities?",
        "context": "CREATE TABLE country (country VARCHAR, country_id VARCHAR); CREATE TABLE city (country_id VARCHAR)",
        "answer": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "db_id": "sakila_1"
    },
    {
        "question": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.",
        "context": "CREATE TABLE payment (payment_date VARCHAR, staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, first_name VARCHAR); CREATE TABLE payment (payment_date VARCHAR, amount INTEGER)",
        "answer": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'",
        "db_id": "sakila_1"
    },
    {
        "question": "How many customers have an active value of 1?",
        "context": "CREATE TABLE customer (active VARCHAR)",
        "answer": "SELECT count(*) FROM customer WHERE active = '1'",
        "db_id": "sakila_1"
    },
    {
        "question": "Which film has the highest rental rate? And what is the rate?",
        "context": "CREATE TABLE film (title VARCHAR, rental_rate VARCHAR)",
        "answer": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "context": "CREATE TABLE film_actor (film_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR, description VARCHAR)",
        "answer": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
        "context": "CREATE TABLE film_actor (actor_id VARCHAR); CREATE TABLE actor (first_name VARCHAR, last_name VARCHAR, actor_id VARCHAR)",
        "answer": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
        "context": "CREATE TABLE film_actor (actor_id VARCHAR); CREATE TABLE actor (first_name VARCHAR, last_name VARCHAR, actor_id VARCHAR)",
        "answer": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "db_id": "sakila_1"
    },
    {
        "question": "Which store owns most items?",
        "context": "CREATE TABLE inventory (store_id VARCHAR)",
        "answer": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "What is the total amount of all payments?",
        "context": "CREATE TABLE payment (amount INTEGER)",
        "answer": "SELECT sum(amount) FROM payment",
        "db_id": "sakila_1"
    },
    {
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "context": "CREATE TABLE payment (customer_id VARCHAR); CREATE TABLE customer (first_name VARCHAR, last_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "What is the genre name of the film HUNGER ROOF?",
        "context": "CREATE TABLE film_category (category_id VARCHAR, film_id VARCHAR); CREATE TABLE film (film_id VARCHAR, title VARCHAR); CREATE TABLE category (name VARCHAR, category_id VARCHAR)",
        "answer": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
        "db_id": "sakila_1"
    },
    {
        "question": "How many films are there in each category? List the genre name, genre id and the count.",
        "context": "CREATE TABLE film_category (category_id VARCHAR); CREATE TABLE category (name VARCHAR, category_id VARCHAR)",
        "answer": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "db_id": "sakila_1"
    },
    {
        "question": "Which film has the most copies in the inventory? List both title and id.",
        "context": "CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE inventory (film_id VARCHAR)",
        "answer": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "context": "CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE inventory (inventory_id VARCHAR, film_id VARCHAR); CREATE TABLE rental (inventory_id VARCHAR)",
        "answer": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "How many languages are in these films?",
        "context": "CREATE TABLE film (language_id VARCHAR)",
        "answer": "SELECT count(DISTINCT language_id) FROM film",
        "db_id": "sakila_1"
    },
    {
        "question": "What are all the movies rated as R? List the titles.",
        "context": "CREATE TABLE film (title VARCHAR, rating VARCHAR)",
        "answer": "SELECT title FROM film WHERE rating  =  'R'",
        "db_id": "sakila_1"
    },
    {
        "question": "Where is store 1 located?",
        "context": "CREATE TABLE store (address_id VARCHAR); CREATE TABLE address (address VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "db_id": "sakila_1"
    },
    {
        "question": "Which staff handled least number of payments? List the full name and the id.",
        "context": "CREATE TABLE payment (staff_id VARCHAR); CREATE TABLE staff (first_name VARCHAR, last_name VARCHAR, staff_id VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "Which language does the film AIRPORT POLLOCK use? List the language name.",
        "context": "CREATE TABLE film (language_id VARCHAR, title VARCHAR); CREATE TABLE LANGUAGE (name VARCHAR, language_id VARCHAR)",
        "answer": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
        "db_id": "sakila_1"
    },
    {
        "question": "How many stores are there?",
        "context": "CREATE TABLE store (Id VARCHAR)",
        "answer": "SELECT count(*) FROM store",
        "db_id": "sakila_1"
    },
    {
        "question": "How many kinds of different ratings are listed?",
        "context": "CREATE TABLE film (rating VARCHAR)",
        "answer": "SELECT count(DISTINCT rating) FROM film",
        "db_id": "sakila_1"
    },
    {
        "question": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
        "context": "CREATE TABLE film (title VARCHAR, special_features VARCHAR)",
        "answer": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "db_id": "sakila_1"
    },
    {
        "question": "How many items in inventory does store 1 have?",
        "context": "CREATE TABLE inventory (store_id VARCHAR)",
        "answer": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "db_id": "sakila_1"
    },
    {
        "question": "When did the first payment happen?",
        "context": "CREATE TABLE payment (payment_date VARCHAR)",
        "answer": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "Where does the customer with the first name Linda live? And what is her email?",
        "context": "CREATE TABLE customer (email VARCHAR, address_id VARCHAR, first_name VARCHAR); CREATE TABLE address (address VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'",
        "db_id": "sakila_1"
    },
    {
        "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "context": "CREATE TABLE film (title VARCHAR, replacement_cost INTEGER, LENGTH VARCHAR, rating VARCHAR)",
        "answer": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "db_id": "sakila_1"
    },
    {
        "question": "What is the first name and the last name of the customer who made the earliest rental?",
        "context": "CREATE TABLE customer (first_name VARCHAR, last_name VARCHAR, customer_id VARCHAR); CREATE TABLE rental (customer_id VARCHAR, rental_date VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?",
        "context": "CREATE TABLE customer (customer_id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE rental (staff_id VARCHAR, customer_id VARCHAR); CREATE TABLE staff (first_name VARCHAR, last_name VARCHAR, staff_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",
        "db_id": "sakila_1"
    },
    {
        "question": "Which store has most the customers?",
        "context": "CREATE TABLE customer (store_id VARCHAR)",
        "answer": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "What is the largest payment amount?",
        "context": "CREATE TABLE payment (amount VARCHAR)",
        "answer": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
        "db_id": "sakila_1"
    },
    {
        "question": "Where does the staff member with the first name Elsa live?",
        "context": "CREATE TABLE staff (address_id VARCHAR, first_name VARCHAR); CREATE TABLE address (address VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'",
        "db_id": "sakila_1"
    },
    {
        "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?",
        "context": "CREATE TABLE customer (first_name VARCHAR, customer_id VARCHAR, rental_date INTEGER); CREATE TABLE rental (first_name VARCHAR, customer_id VARCHAR, rental_date INTEGER)",
        "answer": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "db_id": "sakila_1"
    },
    {
        "question": "How many bank branches are there?",
        "context": "CREATE TABLE bank (Id VARCHAR)",
        "answer": "SELECT count(*) FROM bank",
        "db_id": "loan_1"
    },
    {
        "question": "How many customers are there?",
        "context": "CREATE TABLE bank (no_of_customers INTEGER)",
        "answer": "SELECT sum(no_of_customers) FROM bank",
        "db_id": "loan_1"
    },
    {
        "question": "Find the number of customers in the banks at New York City.",
        "context": "CREATE TABLE bank (no_of_customers INTEGER, city VARCHAR)",
        "answer": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "db_id": "loan_1"
    },
    {
        "question": "Find the average number of customers in all banks of Utah state.",
        "context": "CREATE TABLE bank (no_of_customers INTEGER, state VARCHAR)",
        "answer": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
        "db_id": "loan_1"
    },
    {
        "question": "Find the average number of customers cross all banks.",
        "context": "CREATE TABLE bank (no_of_customers INTEGER)",
        "answer": "SELECT avg(no_of_customers) FROM bank",
        "db_id": "loan_1"
    },
    {
        "question": "Find the city and state of the bank branch named morningside.",
        "context": "CREATE TABLE bank (city VARCHAR, state VARCHAR, bname VARCHAR)",
        "answer": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'",
        "db_id": "loan_1"
    },
    {
        "question": "Find the branch names of banks in the New York state.",
        "context": "CREATE TABLE bank (bname VARCHAR, state VARCHAR)",
        "answer": "SELECT bname FROM bank WHERE state  =  'New York'",
        "db_id": "loan_1"
    },
    {
        "question": "List the name of all customers sorted by their account balance in ascending order.",
        "context": "CREATE TABLE customer (cust_name VARCHAR, acc_bal VARCHAR)",
        "answer": "SELECT cust_name FROM customer ORDER BY acc_bal",
        "db_id": "loan_1"
    },
    {
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "context": "CREATE TABLE loan (cust_id VARCHAR, amount INTEGER); CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR)",
        "answer": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "db_id": "loan_1"
    },
    {
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "context": "CREATE TABLE customer (state VARCHAR, acc_type VARCHAR, credit_score VARCHAR, no_of_loans VARCHAR)",
        "answer": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "db_id": "loan_1"
    },
    {
        "question": "Find the number of different cities which banks are located at.",
        "context": "CREATE TABLE bank (city VARCHAR)",
        "answer": "SELECT count(DISTINCT city) FROM bank",
        "db_id": "loan_1"
    },
    {
        "question": "Find the number of different states which banks are located at.",
        "context": "CREATE TABLE bank (state VARCHAR)",
        "answer": "SELECT count(DISTINCT state) FROM bank",
        "db_id": "loan_1"
    },
    {
        "question": "How many distinct types of accounts are there?",
        "context": "CREATE TABLE customer (acc_type VARCHAR)",
        "answer": "SELECT count(DISTINCT acc_type) FROM customer",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "context": "CREATE TABLE customer (cust_name VARCHAR, acc_bal VARCHAR)",
        "answer": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "db_id": "loan_1"
    },
    {
        "question": "Find the total account balance of each customer from Utah or Texas.",
        "context": "CREATE TABLE customer (acc_bal INTEGER, state VARCHAR)",
        "answer": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customers who have both saving and checking account types.",
        "context": "CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR)",
        "answer": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customers who do not have an saving account.",
        "context": "CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR)",
        "answer": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "context": "CREATE TABLE loan (cust_id VARCHAR, loan_type VARCHAR); CREATE TABLE customer (cust_name VARCHAR); CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR)",
        "answer": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customers who have loans of both Mortgages and Auto.",
        "context": "CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)",
        "answer": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customers whose credit score is below the average credit scores of all customers.",
        "context": "CREATE TABLE customer (cust_name VARCHAR, credit_score INTEGER)",
        "answer": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)",
        "db_id": "loan_1"
    },
    {
        "question": "Find the branch name of the bank that has the most number of customers.",
        "context": "CREATE TABLE bank (bname VARCHAR, no_of_customers VARCHAR)",
        "answer": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customer who has the lowest credit score.",
        "context": "CREATE TABLE customer (cust_name VARCHAR, credit_score VARCHAR)",
        "answer": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name, account type, and account balance of the customer who has the highest credit score.",
        "context": "CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR, acc_bal VARCHAR, credit_score VARCHAR)",
        "answer": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customer who has the highest amount of loans.",
        "context": "CREATE TABLE loan (cust_id VARCHAR, amount INTEGER); CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR)",
        "answer": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "db_id": "loan_1"
    },
    {
        "question": "Find the state which has the most number of customers.",
        "context": "CREATE TABLE bank (state VARCHAR, no_of_customers INTEGER)",
        "answer": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "db_id": "loan_1"
    },
    {
        "question": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "context": "CREATE TABLE customer (acc_type VARCHAR, acc_bal INTEGER, credit_score INTEGER)",
        "answer": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "db_id": "loan_1"
    },
    {
        "question": "For each state, find the total account balance of customers whose credit score is above 100.",
        "context": "CREATE TABLE customer (state VARCHAR, acc_bal INTEGER, credit_score INTEGER)",
        "answer": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "db_id": "loan_1"
    },
    {
        "question": "Find the total amount of loans offered by each bank branch.",
        "context": "CREATE TABLE loan (branch_id VARCHAR); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR)",
        "answer": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customers who have more than one loan.",
        "context": "CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)",
        "answer": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "context": "CREATE TABLE loan (cust_id VARCHAR, amount INTEGER); CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR, cust_id VARCHAR)",
        "answer": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of bank branch that provided the greatest total amount of loans.",
        "context": "CREATE TABLE loan (branch_id VARCHAR, amount INTEGER); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR)",
        "answer": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "context": "CREATE TABLE loan (branch_id VARCHAR, cust_id VARCHAR, amount INTEGER); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR); CREATE TABLE customer (cust_id VARCHAR, credit_score INTEGER)",
        "answer": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of bank branches that provided some loans.",
        "context": "CREATE TABLE loan (branch_id VARCHAR); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "db_id": "loan_1"
    },
    {
        "question": "Find the name and credit score of the customers who have some loans.",
        "context": "CREATE TABLE customer (cust_name VARCHAR, credit_score VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "db_id": "loan_1"
    },
    {
        "question": "Find the the name of the customers who have a loan with amount more than 3000.",
        "context": "CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)",
        "answer": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
        "db_id": "loan_1"
    },
    {
        "question": "Find the city and name of bank branches that provide business loans.",
        "context": "CREATE TABLE bank (bname VARCHAR, city VARCHAR, branch_id VARCHAR); CREATE TABLE loan (branch_id VARCHAR, loan_type VARCHAR)",
        "answer": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "db_id": "loan_1"
    },
    {
        "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "context": "CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR); CREATE TABLE customer (cust_id VARCHAR, credit_score INTEGER); CREATE TABLE loan (branch_id VARCHAR, cust_id VARCHAR)",
        "answer": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "db_id": "loan_1"
    },
    {
        "question": "Find the total amount of loans provided by bank branches in the state of New York.",
        "context": "CREATE TABLE bank (branch_id VARCHAR, state VARCHAR); CREATE TABLE loan (amount INTEGER, branch_id VARCHAR)",
        "answer": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "db_id": "loan_1"
    },
    {
        "question": "Find the average credit score of the customers who have some loan.",
        "context": "CREATE TABLE loan (credit_score INTEGER, cust_id VARCHAR); CREATE TABLE customer (credit_score INTEGER, cust_id VARCHAR)",
        "answer": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "db_id": "loan_1"
    },
    {
        "question": "Find the average credit score of the customers who do not have any loan.",
        "context": "CREATE TABLE loan (credit_score INTEGER, cust_id VARCHAR); CREATE TABLE customer (credit_score INTEGER, cust_id VARCHAR)",
        "answer": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "db_id": "loan_1"
    },
    {
        "question": "How many assessment notes are there in total?",
        "context": "CREATE TABLE ASSESSMENT_NOTES (Id VARCHAR)",
        "answer": "SELECT count(*) FROM ASSESSMENT_NOTES",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What are the dates of the assessment notes?",
        "context": "CREATE TABLE Assessment_Notes (date_of_notes VARCHAR)",
        "answer": "SELECT date_of_notes FROM Assessment_Notes",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "How many addresses have zip code 197?",
        "context": "CREATE TABLE ADDRESSES (zip_postcode VARCHAR)",
        "answer": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "How many distinct incident type codes are there?",
        "context": "CREATE TABLE Behavior_Incident (incident_type_code VARCHAR)",
        "answer": "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Return all distinct detention type codes.",
        "context": "CREATE TABLE Detention (detention_type_code VARCHAR)",
        "answer": "SELECT DISTINCT detention_type_code FROM Detention",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What are the start and end dates for incidents with incident type code \"NOISE\"?",
        "context": "CREATE TABLE Behavior_Incident (date_incident_start VARCHAR, date_incident_end VARCHAR, incident_type_code VARCHAR)",
        "answer": "SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"NOISE\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Return all detention summaries.",
        "context": "CREATE TABLE Detention (detention_summary VARCHAR)",
        "answer": "SELECT detention_summary FROM Detention",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Return the cell phone number and email address for all students.",
        "context": "CREATE TABLE STUDENTS (cell_mobile_number VARCHAR, email_address VARCHAR)",
        "answer": "SELECT cell_mobile_number ,  email_address FROM STUDENTS",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?",
        "context": "CREATE TABLE Students (email_address VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "How many distinct students have been in detention?",
        "context": "CREATE TABLE Students_in_Detention (student_id VARCHAR)",
        "answer": "SELECT count(DISTINCT student_id) FROM Students_in_Detention",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What is the gender of the teacher with last name \"Medhurst\"?",
        "context": "CREATE TABLE TEACHERS (gender VARCHAR, last_name VARCHAR)",
        "answer": "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
        "context": "CREATE TABLE Ref_Incident_Type (incident_type_description VARCHAR, incident_type_code VARCHAR)",
        "answer": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the maximum and minimum monthly rental for all student addresses.",
        "context": "CREATE TABLE Student_Addresses (monthly_rental INTEGER)",
        "answer": "SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the first names of teachers whose email address contains the word \"man\".",
        "context": "CREATE TABLE Teachers (first_name VARCHAR, email_address VARCHAR)",
        "answer": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "List all information about the assessment notes sorted by date in ascending order.",
        "context": "CREATE TABLE Assessment_Notes (date_of_notes VARCHAR)",
        "answer": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "List all cities of addresses in alphabetical order.",
        "context": "CREATE TABLE Addresses (city VARCHAR)",
        "answer": "SELECT city FROM Addresses ORDER BY city",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the first names and last names of teachers in alphabetical order of last name.",
        "context": "CREATE TABLE Teachers (first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT first_name ,  last_name FROM Teachers ORDER BY last_name",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find all information about student addresses, and sort by monthly rental in descending order.",
        "context": "CREATE TABLE Student_Addresses (monthly_rental VARCHAR)",
        "answer": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the id and first name of the student that has the most number of assessment notes?",
        "context": "CREATE TABLE Students (first_name VARCHAR, student_id VARCHAR); CREATE TABLE Assessment_Notes (student_id VARCHAR)",
        "answer": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
        "context": "CREATE TABLE Assessment_Notes (teacher_id VARCHAR); CREATE TABLE Teachers (first_name VARCHAR, teacher_id VARCHAR)",
        "answer": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the id and last name of the student that has the most behavior incidents?",
        "context": "CREATE TABLE Students (last_name VARCHAR, student_id VARCHAR); CREATE TABLE Behavior_Incident (student_id VARCHAR)",
        "answer": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?",
        "context": "CREATE TABLE Detention (teacher_id VARCHAR, detention_type_code VARCHAR); CREATE TABLE Teachers (last_name VARCHAR, teacher_id VARCHAR)",
        "answer": "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
        "context": "CREATE TABLE Students (first_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Addresses (student_id VARCHAR)",
        "answer": "SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the id and city of the student address with the highest average monthly rental.",
        "context": "CREATE TABLE Student_Addresses (address_id VARCHAR); CREATE TABLE Addresses (city VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What are the code and description of the most frequent behavior incident type?",
        "context": "CREATE TABLE Ref_Incident_Type (incident_type_description VARCHAR, incident_type_code VARCHAR); CREATE TABLE Behavior_Incident (incident_type_code VARCHAR)",
        "answer": "SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What are the code and description of the least frequent detention type ?",
        "context": "CREATE TABLE Ref_Detention_Type (detention_type_description VARCHAR, detention_type_code VARCHAR); CREATE TABLE Detention (detention_type_code VARCHAR)",
        "answer": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the dates of assessment notes for students with first name \"Fanny\".",
        "context": "CREATE TABLE Students (student_id VARCHAR, first_name VARCHAR); CREATE TABLE Assessment_Notes (date_of_notes VARCHAR, student_id VARCHAR)",
        "answer": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the texts of assessment notes for teachers with last name \"Schuster\".",
        "context": "CREATE TABLE Assessment_Notes (text_of_notes VARCHAR, teacher_id VARCHAR); CREATE TABLE Teachers (teacher_id VARCHAR, last_name VARCHAR)",
        "answer": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".",
        "context": "CREATE TABLE Behavior_Incident (date_incident_start VARCHAR, student_id VARCHAR); CREATE TABLE Students (student_id VARCHAR, last_name VARCHAR)",
        "answer": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the start and end dates of detentions of teachers with last name \"Schultz\".",
        "context": "CREATE TABLE Detention (datetime_detention_start VARCHAR, teacher_id VARCHAR); CREATE TABLE Teachers (teacher_id VARCHAR, last_name VARCHAR)",
        "answer": "SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schultz\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What are the id and zip code of the address with the highest monthly rental?",
        "context": "CREATE TABLE Student_Addresses (address_id VARCHAR); CREATE TABLE Addresses (zip_postcode VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What is the cell phone number of the student whose address has the lowest monthly rental?",
        "context": "CREATE TABLE Students (cell_mobile_number VARCHAR, student_id VARCHAR); CREATE TABLE Student_Addresses (student_id VARCHAR, monthly_rental VARCHAR)",
        "answer": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What are the monthly rentals of student addresses in Texas state?",
        "context": "CREATE TABLE Addresses (address_id VARCHAR, state_province_county VARCHAR); CREATE TABLE Student_Addresses (monthly_rental VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What are the first names and last names of students with address in Wisconsin state?",
        "context": "CREATE TABLE Addresses (address_id VARCHAR, state_province_county VARCHAR); CREATE TABLE Students (first_name VARCHAR, last_name VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Wisconsin\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What are the line 1 and average monthly rentals of all student addresses?",
        "context": "CREATE TABLE Addresses (line_1 VARCHAR, address_id VARCHAR); CREATE TABLE Student_Addresses (monthly_rental INTEGER, address_id VARCHAR)",
        "answer": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
        "context": "CREATE TABLE Teachers (address_id VARCHAR, first_name VARCHAR); CREATE TABLE Addresses (zip_postcode VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What are the email addresses of teachers whose address has zip code \"918\"?",
        "context": "CREATE TABLE Addresses (address_id VARCHAR, zip_postcode VARCHAR); CREATE TABLE Teachers (email_address VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "How many students are not involved in any behavior incident?",
        "context": "CREATE TABLE STUDENTS (student_id VARCHAR); CREATE TABLE Behavior_Incident (student_id VARCHAR)",
        "answer": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Find the last names of teachers who are not involved in any detention.",
        "context": "CREATE TABLE Teachers (last_name VARCHAR); CREATE TABLE Teachers (last_name VARCHAR, teacher_id VARCHAR); CREATE TABLE Detention (teacher_id VARCHAR)",
        "answer": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "What are the line 1 of addresses shared by some students and some teachers?",
        "context": "CREATE TABLE Teachers (address_id VARCHAR); CREATE TABLE Students (address_id VARCHAR); CREATE TABLE Addresses (line_1 VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
        "db_id": "behavior_monitoring"
    },
    {
        "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "context": "CREATE TABLE Assets (asset_id VARCHAR, asset_details VARCHAR); CREATE TABLE Asset_Parts (asset_id VARCHAR); CREATE TABLE Fault_Log (asset_id VARCHAR)",
        "answer": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2",
        "db_id": "assets_maintenance"
    },
    {
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "context": "CREATE TABLE Assets (maintenance_contract_id VARCHAR); CREATE TABLE Maintenance_Contracts (maintenance_contract_id VARCHAR)",
        "answer": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "db_id": "assets_maintenance"
    },
    {
        "question": "How many assets does each third party company supply? List the count and the company id.",
        "context": "CREATE TABLE Assets (supplier_company_id VARCHAR); CREATE TABLE Third_Party_Companies (company_id VARCHAR)",
        "answer": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "context": "CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id VARCHAR); CREATE TABLE Maintenance_Engineers (company_id VARCHAR); CREATE TABLE Third_Party_Companies (company_id VARCHAR, company_name VARCHAR)",
        "answer": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2",
        "db_id": "assets_maintenance"
    },
    {
        "question": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?",
        "context": "CREATE TABLE Engineer_Visits (contact_staff_id VARCHAR); CREATE TABLE Staff (staff_name VARCHAR, staff_id VARCHAR); CREATE TABLE Fault_Log (recorded_by_staff_id VARCHAR)",
        "answer": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which engineer has visited the most times? Show the engineer id, first name and last name.",
        "context": "CREATE TABLE Maintenance_Engineers (engineer_id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE Engineer_Visits (Id VARCHAR)",
        "answer": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which parts have more than 2 faults? Show the part name and id.",
        "context": "CREATE TABLE Parts (part_name VARCHAR, part_id VARCHAR); CREATE TABLE Part_Faults (part_id VARCHAR)",
        "answer": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2",
        "db_id": "assets_maintenance"
    },
    {
        "question": "List all every engineer's first name, last name, details and coresponding skill description.",
        "context": "CREATE TABLE Maintenance_Engineers (first_name VARCHAR, last_name VARCHAR, other_details VARCHAR, engineer_id VARCHAR); CREATE TABLE Engineer_Skills (engineer_id VARCHAR, skill_id VARCHAR); CREATE TABLE Skills (skill_description VARCHAR, skill_id VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "db_id": "assets_maintenance"
    },
    {
        "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "context": "CREATE TABLE Skills_Required_To_Fix (part_fault_id VARCHAR, skill_id VARCHAR); CREATE TABLE Part_Faults (fault_short_name VARCHAR, part_fault_id VARCHAR); CREATE TABLE Skills (skill_description VARCHAR, skill_id VARCHAR)",
        "answer": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "db_id": "assets_maintenance"
    },
    {
        "question": "How many assets can each parts be used in? List the part name and the number.",
        "context": "CREATE TABLE Parts (part_name VARCHAR, part_id VARCHAR); CREATE TABLE Asset_Parts (part_id VARCHAR)",
        "answer": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
        "db_id": "assets_maintenance"
    },
    {
        "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
        "context": "CREATE TABLE Fault_Log (fault_description VARCHAR, fault_log_entry_id VARCHAR); CREATE TABLE Fault_Log_Parts (fault_status VARCHAR, fault_log_entry_id VARCHAR)",
        "answer": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id",
        "db_id": "assets_maintenance"
    },
    {
        "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
        "context": "CREATE TABLE Fault_Log (fault_log_entry_id VARCHAR); CREATE TABLE Engineer_Visits (fault_log_entry_id VARCHAR)",
        "answer": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "assets_maintenance"
    },
    {
        "question": "What are all the distinct last names of all the engineers?",
        "context": "CREATE TABLE Maintenance_Engineers (last_name VARCHAR)",
        "answer": "SELECT DISTINCT last_name FROM Maintenance_Engineers",
        "db_id": "assets_maintenance"
    },
    {
        "question": "How many fault status codes are recorded in the fault log parts table?",
        "context": "CREATE TABLE Fault_Log_Parts (fault_status VARCHAR)",
        "answer": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "context": "CREATE TABLE Engineer_Visits (first_name VARCHAR, last_name VARCHAR, engineer_id VARCHAR); CREATE TABLE Maintenance_Engineers (first_name VARCHAR, last_name VARCHAR, engineer_id VARCHAR)",
        "answer": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
        "db_id": "assets_maintenance"
    },
    {
        "question": "List the asset id, details, make and model for every asset.",
        "context": "CREATE TABLE Assets (asset_id VARCHAR, asset_details VARCHAR, asset_make VARCHAR, asset_model VARCHAR)",
        "answer": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "db_id": "assets_maintenance"
    },
    {
        "question": "When was the first asset acquired?",
        "context": "CREATE TABLE Assets (asset_acquired_date VARCHAR)",
        "answer": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which part fault requires the most number of skills to fix? List part id and name.",
        "context": "CREATE TABLE Part_Faults (part_id VARCHAR, part_fault_id VARCHAR); CREATE TABLE Skills_Required_To_Fix (part_fault_id VARCHAR); CREATE TABLE Parts (part_id VARCHAR, part_name VARCHAR)",
        "answer": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which kind of part has the least number of faults? List the part name.",
        "context": "CREATE TABLE Parts (part_name VARCHAR, part_id VARCHAR); CREATE TABLE Part_Faults (part_id VARCHAR)",
        "answer": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
        "context": "CREATE TABLE Engineer_Visits (engineer_id VARCHAR); CREATE TABLE Maintenance_Engineers (engineer_id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "context": "CREATE TABLE Engineer_Visits (contact_staff_id VARCHAR, engineer_id VARCHAR); CREATE TABLE Staff (staff_name VARCHAR, staff_id VARCHAR); CREATE TABLE Maintenance_Engineers (first_name VARCHAR, last_name VARCHAR, engineer_id VARCHAR)",
        "answer": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "context": "CREATE TABLE Fault_Log (fault_log_entry_id VARCHAR, fault_description VARCHAR, fault_log_entry_datetime VARCHAR); CREATE TABLE Fault_Log_Parts (fault_log_entry_id VARCHAR)",
        "answer": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "context": "CREATE TABLE Skills (skill_id VARCHAR, skill_description VARCHAR); CREATE TABLE Skills_Required_To_Fix (skill_id VARCHAR)",
        "answer": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "assets_maintenance"
    },
    {
        "question": "What are all the distinct asset models?",
        "context": "CREATE TABLE Assets (asset_model VARCHAR)",
        "answer": "SELECT DISTINCT asset_model FROM Assets",
        "db_id": "assets_maintenance"
    },
    {
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "context": "CREATE TABLE Assets (asset_make VARCHAR, asset_model VARCHAR, asset_details VARCHAR, asset_disposed_date VARCHAR)",
        "answer": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "context": "CREATE TABLE Parts (part_id VARCHAR, chargeable_amount VARCHAR)",
        "answer": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which company started the earliest the maintenance contract? Show the company name.",
        "context": "CREATE TABLE Third_Party_Companies (company_name VARCHAR, company_id VARCHAR); CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id VARCHAR, contract_start_date VARCHAR)",
        "answer": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
        "db_id": "assets_maintenance"
    },
    {
        "question": "What is the description of the type of the company who concluded its contracts most recently?",
        "context": "CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id VARCHAR, contract_end_date VARCHAR); CREATE TABLE Third_Party_Companies (company_name VARCHAR, company_id VARCHAR, company_type_code VARCHAR); CREATE TABLE Ref_Company_Types (company_type_code VARCHAR)",
        "answer": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which gender makes up the majority of the staff?",
        "context": "CREATE TABLE staff (gender VARCHAR)",
        "answer": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1",
        "db_id": "assets_maintenance"
    },
    {
        "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "context": "CREATE TABLE Engineer_Visits (contact_staff_id VARCHAR); CREATE TABLE Staff (staff_name VARCHAR, staff_id VARCHAR)",
        "answer": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name",
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which assets did not incur any fault log? List the asset model.",
        "context": "CREATE TABLE Fault_Log (asset_model VARCHAR, asset_id VARCHAR); CREATE TABLE Assets (asset_model VARCHAR, asset_id VARCHAR)",
        "answer": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)",
        "db_id": "assets_maintenance"
    },
    {
        "question": "list the local authorities and services provided by all stations.",
        "context": "CREATE TABLE station (local_authority VARCHAR, services VARCHAR)",
        "answer": "SELECT local_authority ,  services FROM station",
        "db_id": "station_weather"
    },
    {
        "question": "show all train numbers and names ordered by their time from early to late.",
        "context": "CREATE TABLE train (train_number VARCHAR, name VARCHAR, TIME VARCHAR)",
        "answer": "SELECT train_number ,  name FROM train ORDER BY TIME",
        "db_id": "station_weather"
    },
    {
        "question": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "context": "CREATE TABLE train (TIME VARCHAR, train_number VARCHAR, destination VARCHAR)",
        "answer": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME",
        "db_id": "station_weather"
    },
    {
        "question": "How many trains have 'Express' in their names?",
        "context": "CREATE TABLE train (name VARCHAR)",
        "answer": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
        "db_id": "station_weather"
    },
    {
        "question": "Find the number and time of the train that goes from Chennai to Guruvayur.",
        "context": "CREATE TABLE train (train_number VARCHAR, TIME VARCHAR, origin VARCHAR, destination VARCHAR)",
        "answer": "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'",
        "db_id": "station_weather"
    },
    {
        "question": "Find the number of trains starting from each origin.",
        "context": "CREATE TABLE train (origin VARCHAR)",
        "answer": "SELECT origin ,  count(*) FROM train GROUP BY origin",
        "db_id": "station_weather"
    },
    {
        "question": "Find the name of the train whose route runs through greatest number of stations.",
        "context": "CREATE TABLE route (train_id VARCHAR); CREATE TABLE train (name VARCHAR, id VARCHAR)",
        "answer": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "station_weather"
    },
    {
        "question": "Find the number of trains for each station, as well as the station network name and services.",
        "context": "CREATE TABLE route (station_id VARCHAR); CREATE TABLE station (network_name VARCHAR, services VARCHAR, id VARCHAR)",
        "answer": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
        "db_id": "station_weather"
    },
    {
        "question": "What is the average high temperature for each day of week?",
        "context": "CREATE TABLE weekly_weather (day_of_week VARCHAR, high_temperature INTEGER)",
        "answer": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week",
        "db_id": "station_weather"
    },
    {
        "question": "Give me the maximum low temperature and average precipitation at the Amersham station.",
        "context": "CREATE TABLE weekly_weather (low_temperature INTEGER, precipitation INTEGER, station_id VARCHAR); CREATE TABLE station (id VARCHAR, network_name VARCHAR)",
        "answer": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\"",
        "db_id": "station_weather"
    },
    {
        "question": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "context": "CREATE TABLE station (id VARCHAR, local_authority VARCHAR); CREATE TABLE route (station_id VARCHAR, train_id VARCHAR); CREATE TABLE train (name VARCHAR, time VARCHAR, id VARCHAR)",
        "answer": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"",
        "db_id": "station_weather"
    },
    {
        "question": "How many different services are provided by all stations?",
        "context": "CREATE TABLE station (services VARCHAR)",
        "answer": "SELECT count(DISTINCT services) FROM station",
        "db_id": "station_weather"
    },
    {
        "question": "Find the id and local authority of the station with has the highest average high temperature.",
        "context": "CREATE TABLE weekly_weather (station_id VARCHAR); CREATE TABLE station (id VARCHAR, local_authority VARCHAR)",
        "answer": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1",
        "db_id": "station_weather"
    },
    {
        "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "context": "CREATE TABLE weekly_weather (station_id VARCHAR, precipitation INTEGER); CREATE TABLE station (id VARCHAR, local_authority VARCHAR)",
        "answer": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
        "db_id": "station_weather"
    },
    {
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "context": "CREATE TABLE weekly_weather (low_temperature INTEGER, wind_speed_mph INTEGER)",
        "answer": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "db_id": "station_weather"
    },
    {
        "question": "Find the origins from which more than 1 train starts.",
        "context": "CREATE TABLE train (origin VARCHAR)",
        "answer": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1",
        "db_id": "station_weather"
    },
    {
        "question": "Find the number of professors in accounting department.",
        "context": "CREATE TABLE professor (dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR)",
        "answer": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"",
        "db_id": "college_1"
    },
    {
        "question": "How many professors are teaching class with code ACCT-211?",
        "context": "CREATE TABLE CLASS (PROF_NUM VARCHAR, CRS_CODE VARCHAR)",
        "answer": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
        "db_id": "college_1"
    },
    {
        "question": "What is the first and last name of the professor in biology department?",
        "context": "CREATE TABLE professor (dept_code VARCHAR, EMP_NUM VARCHAR); CREATE TABLE department (dept_code VARCHAR); CREATE TABLE employee (EMP_FNAME VARCHAR, EMP_LNAME VARCHAR, EMP_NUM VARCHAR)",
        "answer": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"",
        "db_id": "college_1"
    },
    {
        "question": "What are the first names and date of birth of professors teaching course ACCT-211?",
        "context": "CREATE TABLE CLASS (PROF_NUM VARCHAR); CREATE TABLE employee (EMP_FNAME VARCHAR, EMP_DOB VARCHAR, EMP_NUM VARCHAR)",
        "answer": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"",
        "db_id": "college_1"
    },
    {
        "question": "How many classes are professor whose last name is Graztevski has?",
        "context": "CREATE TABLE CLASS (PROF_NUM VARCHAR); CREATE TABLE employee (EMP_NUM VARCHAR, EMP_LNAME VARCHAR)",
        "answer": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'",
        "db_id": "college_1"
    },
    {
        "question": "What is the code of the school where the accounting department belongs to?",
        "context": "CREATE TABLE department (school_code VARCHAR, dept_name VARCHAR)",
        "answer": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"",
        "db_id": "college_1"
    },
    {
        "question": "How many credits does course CIS-220 have, and what its description?",
        "context": "CREATE TABLE course (crs_credit VARCHAR, crs_description VARCHAR, crs_code VARCHAR)",
        "answer": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'",
        "db_id": "college_1"
    },
    {
        "question": "what is the address of history department?",
        "context": "CREATE TABLE department (dept_address VARCHAR, dept_name VARCHAR)",
        "answer": "SELECT dept_address FROM department WHERE dept_name  =  'History'",
        "db_id": "college_1"
    },
    {
        "question": "How many different locations does the school with code BUS has?",
        "context": "CREATE TABLE department (dept_address VARCHAR, school_code VARCHAR)",
        "answer": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'",
        "db_id": "college_1"
    },
    {
        "question": "How many different locations does each school have?",
        "context": "CREATE TABLE department (school_code VARCHAR, dept_address VARCHAR)",
        "answer": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",
        "db_id": "college_1"
    },
    {
        "question": "Find the description and credit for the course QM-261?",
        "context": "CREATE TABLE course (crs_credit VARCHAR, crs_description VARCHAR, crs_code VARCHAR)",
        "answer": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",
        "db_id": "college_1"
    },
    {
        "question": "Find the number of departments in each school.",
        "context": "CREATE TABLE department (school_code VARCHAR, dept_name VARCHAR)",
        "answer": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code",
        "db_id": "college_1"
    },
    {
        "question": "Find the number of different departments in each school whose number of different departments is less than 5.",
        "context": "CREATE TABLE department (school_code VARCHAR, dept_name VARCHAR)",
        "answer": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",
        "db_id": "college_1"
    },
    {
        "question": "How many sections does each course has?",
        "context": "CREATE TABLE CLASS (crs_code VARCHAR)",
        "answer": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code",
        "db_id": "college_1"
    },
    {
        "question": "What is the total credit does each department offer?",
        "context": "CREATE TABLE course (dept_code VARCHAR, crs_credit INTEGER)",
        "answer": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",
        "db_id": "college_1"
    },
    {
        "question": "Find the number of classes offered for all class rooms that held at least 2 classes.",
        "context": "CREATE TABLE CLASS (class_room VARCHAR)",
        "answer": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
        "db_id": "college_1"
    },
    {
        "question": "Find the number of classes in each department.",
        "context": "CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE course (crs_code VARCHAR)",
        "answer": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code",
        "db_id": "college_1"
    },
    {
        "question": "Find the number of classes in each school.",
        "context": "CREATE TABLE department (school_code VARCHAR, dept_code VARCHAR); CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE course (crs_code VARCHAR, dept_code VARCHAR)",
        "answer": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code",
        "db_id": "college_1"
    },
    {
        "question": "What is the number of professors for different school?",
        "context": "CREATE TABLE department (school_code VARCHAR, dept_code VARCHAR); CREATE TABLE professor (dept_code VARCHAR)",
        "answer": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code",
        "db_id": "college_1"
    },
    {
        "question": "Find the count and code of the job has most employees.",
        "context": "CREATE TABLE employee (emp_jobcode VARCHAR)",
        "answer": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
        "db_id": "college_1"
    },
    {
        "question": "Which school has the smallest amount of professors?",
        "context": "CREATE TABLE department (school_code VARCHAR, dept_code VARCHAR); CREATE TABLE professor (dept_code VARCHAR)",
        "answer": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
        "db_id": "college_1"
    },
    {
        "question": "Find the number of professors with a Ph.D. degree in each department.",
        "context": "CREATE TABLE professor (dept_code VARCHAR, prof_high_degree VARCHAR)",
        "answer": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code",
        "db_id": "college_1"
    },
    {
        "question": "Find the number of students for each department.",
        "context": "CREATE TABLE student (dept_code VARCHAR)",
        "answer": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code",
        "db_id": "college_1"
    },
    {
        "question": "Find the total number of hours have done for all students in each department.",
        "context": "CREATE TABLE student (dept_code VARCHAR, stu_hrs INTEGER)",
        "answer": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code",
        "db_id": "college_1"
    },
    {
        "question": "Find the max, average, and minimum gpa of all students in each department.",
        "context": "CREATE TABLE student (dept_code VARCHAR, stu_gpa INTEGER)",
        "answer": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code",
        "db_id": "college_1"
    },
    {
        "question": "What is the name and the average gpa of department whose students have the highest average gpa?",
        "context": "CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE student (stu_gpa INTEGER, dept_code VARCHAR)",
        "answer": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",
        "db_id": "college_1"
    },
    {
        "question": "how many schools exist in total?",
        "context": "CREATE TABLE department (school_code VARCHAR)",
        "answer": "SELECT count(DISTINCT school_code) FROM department",
        "db_id": "college_1"
    },
    {
        "question": "How many different classes are there?",
        "context": "CREATE TABLE CLASS (class_code VARCHAR)",
        "answer": "SELECT count(DISTINCT class_code) FROM CLASS",
        "db_id": "college_1"
    },
    {
        "question": "How many courses are offered?",
        "context": "CREATE TABLE CLASS (crs_code VARCHAR)",
        "answer": "SELECT count(DISTINCT crs_code) FROM CLASS",
        "db_id": "college_1"
    },
    {
        "question": "How many departments does the college has?",
        "context": "CREATE TABLE department (dept_name VARCHAR)",
        "answer": "SELECT count(DISTINCT dept_name) FROM department",
        "db_id": "college_1"
    },
    {
        "question": "How many courses are offered by the Computer Info. Systems department?",
        "context": "CREATE TABLE course (dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR)",
        "answer": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"",
        "db_id": "college_1"
    },
    {
        "question": "How many sections does course ACCT-211 has?",
        "context": "CREATE TABLE CLASS (class_section VARCHAR, crs_code VARCHAR)",
        "answer": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'",
        "db_id": "college_1"
    },
    {
        "question": "Find the total credits of all classes offered by each department.",
        "context": "CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE course (dept_code VARCHAR, crs_credit INTEGER, crs_code VARCHAR)",
        "answer": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code",
        "db_id": "college_1"
    },
    {
        "question": "Find the name of the department that offers the largest number of credits of all classes.",
        "context": "CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE course (dept_code VARCHAR, crs_code VARCHAR, crs_credit INTEGER)",
        "answer": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
        "db_id": "college_1"
    },
    {
        "question": "How many students enrolled in class ACCT-211?",
        "context": "CREATE TABLE enroll (class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR)",
        "answer": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
        "db_id": "college_1"
    },
    {
        "question": "What is the first name of each student enrolled in class ACCT-211?",
        "context": "CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR)",
        "answer": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'",
        "db_id": "college_1"
    },
    {
        "question": "What is the first name of students enrolled in class ACCT-211 and got grade C?",
        "context": "CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR, enroll_grade VARCHAR)",
        "answer": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'",
        "db_id": "college_1"
    },
    {
        "question": "How many professors do have a Ph.D. degree?",
        "context": "CREATE TABLE professor (prof_high_degree VARCHAR)",
        "answer": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'",
        "db_id": "college_1"
    },
    {
        "question": "How many students are enrolled in the class taught by some professor from the accounting department?",
        "context": "CREATE TABLE enroll (class_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE course (crs_code VARCHAR, dept_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR)",
        "answer": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'",
        "db_id": "college_1"
    },
    {
        "question": "What is the name of the department that has the largest number of students enrolled?",
        "context": "CREATE TABLE enroll (class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE course (dept_code VARCHAR, crs_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)",
        "answer": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "college_1"
    },
    {
        "question": "list names of all departments ordered by their names.",
        "context": "CREATE TABLE department (dept_name VARCHAR)",
        "answer": "SELECT dept_name FROM department ORDER BY dept_name",
        "db_id": "college_1"
    },
    {
        "question": "List the codes of all courses that take place in room KLR209.",
        "context": "CREATE TABLE CLASS (class_code VARCHAR, class_room VARCHAR)",
        "answer": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'",
        "db_id": "college_1"
    },
    {
        "question": "List the first name of all employees with job code PROF ordered by their date of birth.",
        "context": "CREATE TABLE employee (emp_fname VARCHAR, emp_jobcode VARCHAR, emp_dob VARCHAR)",
        "answer": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob",
        "db_id": "college_1"
    },
    {
        "question": "Find the first names and offices of all professors sorted by alphabetical order of their first name.",
        "context": "CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)",
        "answer": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname",
        "db_id": "college_1"
    },
    {
        "question": "What is the first and last name of the oldest employee?",
        "context": "CREATE TABLE employee (emp_fname VARCHAR, emp_lname VARCHAR, emp_dob VARCHAR)",
        "answer": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
        "db_id": "college_1"
    },
    {
        "question": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?",
        "context": "CREATE TABLE student (stu_fname VARCHAR, stu_lname VARCHAR, stu_gpa INTEGER, stu_dob VARCHAR)",
        "answer": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
        "db_id": "college_1"
    },
    {
        "question": "What is the first name of students who got grade C in any class?",
        "context": "CREATE TABLE student (stu_num VARCHAR); CREATE TABLE enroll (stu_num VARCHAR)",
        "answer": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'",
        "db_id": "college_1"
    },
    {
        "question": "What is the name of department where has the smallest number of professors?",
        "context": "CREATE TABLE professor (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)",
        "answer": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1",
        "db_id": "college_1"
    },
    {
        "question": "What is the name of department where has the largest number of professors with a Ph.D. degree?",
        "context": "CREATE TABLE professor (dept_code VARCHAR, prof_high_degree VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)",
        "answer": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "college_1"
    },
    {
        "question": "What are the first names of the professors who do not teach a class.",
        "context": "CREATE TABLE employee (emp_fname VARCHAR, emp_jobcode VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)",
        "answer": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num",
        "db_id": "college_1"
    },
    {
        "question": "What is the first names of the professors from the history department who do not teach a class.",
        "context": "CREATE TABLE professor (emp_num VARCHAR, dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)",
        "answer": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num",
        "db_id": "college_1"
    },
    {
        "question": "What is the last name and office of the professor from the history department?",
        "context": "CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE employee (emp_lname VARCHAR, emp_num VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR)",
        "answer": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'",
        "db_id": "college_1"
    },
    {
        "question": "What is department name and office for the professor whose last name is Heffington?",
        "context": "CREATE TABLE employee (emp_num VARCHAR, emp_lname VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR)",
        "answer": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'",
        "db_id": "college_1"
    },
    {
        "question": "Find the last name and hire date of the professor who is in office DRE 102.",
        "context": "CREATE TABLE professor (emp_num VARCHAR, prof_office VARCHAR); CREATE TABLE employee (emp_lname VARCHAR, emp_hiredate VARCHAR, emp_num VARCHAR)",
        "answer": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'",
        "db_id": "college_1"
    },
    {
        "question": "What is the code of the course which the student whose last name is Smithson took?",
        "context": "CREATE TABLE student (stu_num VARCHAR, stu_lname VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR); CREATE TABLE CLASS (crs_code VARCHAR, class_code VARCHAR)",
        "answer": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'",
        "db_id": "college_1"
    },
    {
        "question": "What are the description and credit of the course which the student whose last name is Smithson took?",
        "context": "CREATE TABLE student (stu_num VARCHAR, stu_lname VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_credit VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR)",
        "answer": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'",
        "db_id": "college_1"
    },
    {
        "question": "How many professors who has a either Ph.D. or MA degree?",
        "context": "CREATE TABLE professor (prof_high_degree VARCHAR)",
        "answer": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'",
        "db_id": "college_1"
    },
    {
        "question": "How many professors who are from either Accounting or Biology department?",
        "context": "CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE professor (dept_code VARCHAR)",
        "answer": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'",
        "db_id": "college_1"
    },
    {
        "question": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.",
        "context": "CREATE TABLE CLASS (prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)",
        "answer": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'",
        "db_id": "college_1"
    },
    {
        "question": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments",
        "context": "CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE course (crs_code VARCHAR, dept_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR)",
        "answer": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'",
        "db_id": "college_1"
    },
    {
        "question": "What is the average gpa of the students enrolled in the course with code ACCT-211?",
        "context": "CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_gpa INTEGER, stu_num VARCHAR)",
        "answer": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'",
        "db_id": "college_1"
    },
    {
        "question": "What is the first name, gpa and phone number of the top 5 students with highest gpa?",
        "context": "CREATE TABLE student (stu_gpa VARCHAR, stu_phone VARCHAR, stu_fname VARCHAR)",
        "answer": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "db_id": "college_1"
    },
    {
        "question": "What is the department name of the students with lowest gpa belongs to?",
        "context": "CREATE TABLE student (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)",
        "answer": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1",
        "db_id": "college_1"
    },
    {
        "question": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.",
        "context": "CREATE TABLE student (stu_fname VARCHAR, stu_gpa INTEGER)",
        "answer": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",
        "db_id": "college_1"
    },
    {
        "question": "Find the name and address of the department that has the highest number of students.",
        "context": "CREATE TABLE student (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_address VARCHAR, dept_code VARCHAR)",
        "answer": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "college_1"
    },
    {
        "question": "Find the name, address, number of students in the departments that have the top 3 highest number of students.",
        "context": "CREATE TABLE student (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_address VARCHAR, dept_code VARCHAR)",
        "answer": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
        "db_id": "college_1"
    },
    {
        "question": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.",
        "context": "CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR, prof_high_degree VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)",
        "answer": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'",
        "db_id": "college_1"
    },
    {
        "question": "Find the first names of all instructors who have taught some course and the course code.",
        "context": "CREATE TABLE CLASS (crs_code VARCHAR, prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)",
        "answer": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num",
        "db_id": "college_1"
    },
    {
        "question": "Find the first names of all instructors who have taught some course and the course description.",
        "context": "CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR, crs_code VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)",
        "answer": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code",
        "db_id": "college_1"
    },
    {
        "question": "Find the first names and offices of all instructors who have taught some course and also find the course description.",
        "context": "CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR, crs_code VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)",
        "answer": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num",
        "db_id": "college_1"
    },
    {
        "question": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.",
        "context": "CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR, crs_code VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR)",
        "answer": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code",
        "db_id": "college_1"
    },
    {
        "question": "Find names of all students who took some course and the course description.",
        "context": "CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_lname VARCHAR, stu_num VARCHAR)",
        "answer": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code",
        "db_id": "college_1"
    },
    {
        "question": "Find names of all students who took some course and got A or C.",
        "context": "CREATE TABLE enroll (stu_num VARCHAR, enroll_grade VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_lname VARCHAR, stu_num VARCHAR)",
        "answer": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",
        "db_id": "college_1"
    },
    {
        "question": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.",
        "context": "CREATE TABLE CLASS (class_room VARCHAR, prof_num VARCHAR); CREATE TABLE professor (emp_num VARCHAR, dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)",
        "answer": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'",
        "db_id": "college_1"
    },
    {
        "question": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.",
        "context": "CREATE TABLE professor (prof_high_degree VARCHAR, emp_num VARCHAR, dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR)",
        "answer": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'",
        "db_id": "college_1"
    },
    {
        "question": "What is the last name of the student who got a grade A in the class with code 10018.",
        "context": "CREATE TABLE enroll (stu_num VARCHAR, enroll_grade VARCHAR, class_code VARCHAR); CREATE TABLE student (stu_lname VARCHAR, stu_num VARCHAR)",
        "answer": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018",
        "db_id": "college_1"
    },
    {
        "question": "Find the first name and office of history professor who did not get a Ph.D. degree.",
        "context": "CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR, prof_high_degree VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)",
        "answer": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
        "db_id": "college_1"
    },
    {
        "question": "Find the first names of professors who are teaching more than one class.",
        "context": "CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR)",
        "answer": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1",
        "db_id": "college_1"
    },
    {
        "question": "Find the first names of students who took exactly one class.",
        "context": "CREATE TABLE enroll (stu_num VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR)",
        "answer": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1",
        "db_id": "college_1"
    },
    {
        "question": "Find the name of department that offers the class whose description has the word \"Statistics\".",
        "context": "CREATE TABLE course (dept_code VARCHAR, crs_description VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)",
        "answer": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'",
        "db_id": "college_1"
    },
    {
        "question": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?",
        "context": "CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR, stu_lname VARCHAR)",
        "answer": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'",
        "db_id": "college_1"
    },
    {
        "question": "How many clubs are there?",
        "context": "CREATE TABLE club (Id VARCHAR)",
        "answer": "SELECT count(*) FROM club",
        "db_id": "sports_competition"
    },
    {
        "question": "List the distinct region of clubs in ascending alphabetical order.",
        "context": "CREATE TABLE club (Region VARCHAR)",
        "answer": "SELECT DISTINCT Region FROM club ORDER BY Region ASC",
        "db_id": "sports_competition"
    },
    {
        "question": "What is the average number of gold medals for clubs?",
        "context": "CREATE TABLE club_rank (Gold INTEGER)",
        "answer": "SELECT avg(Gold) FROM club_rank",
        "db_id": "sports_competition"
    },
    {
        "question": "What are the types and countries of competitions?",
        "context": "CREATE TABLE competition (Competition_type VARCHAR, Country VARCHAR)",
        "answer": "SELECT Competition_type ,  Country FROM competition",
        "db_id": "sports_competition"
    },
    {
        "question": "What are the distinct years in which the competitions type is not \"Tournament\"?",
        "context": "CREATE TABLE competition (YEAR VARCHAR, Competition_type VARCHAR)",
        "answer": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"",
        "db_id": "sports_competition"
    },
    {
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "context": "CREATE TABLE club_rank (Silver INTEGER)",
        "answer": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "db_id": "sports_competition"
    },
    {
        "question": "How many clubs have total medals less than 10?",
        "context": "CREATE TABLE club_rank (Total INTEGER)",
        "answer": "SELECT count(*) FROM club_rank WHERE Total  <  10",
        "db_id": "sports_competition"
    },
    {
        "question": "List all club names in ascending order of start year.",
        "context": "CREATE TABLE club (name VARCHAR, Start_year VARCHAR)",
        "answer": "SELECT name FROM club ORDER BY Start_year ASC",
        "db_id": "sports_competition"
    },
    {
        "question": "List all club names in descending alphabetical order.",
        "context": "CREATE TABLE club (name VARCHAR)",
        "answer": "SELECT name FROM club ORDER BY name DESC",
        "db_id": "sports_competition"
    },
    {
        "question": "Please show the names and the players of clubs.",
        "context": "CREATE TABLE club (name VARCHAR, Club_ID VARCHAR); CREATE TABLE player (Player_id VARCHAR, Club_ID VARCHAR)",
        "answer": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
        "db_id": "sports_competition"
    },
    {
        "question": "Show the names of clubs that have players with position \"Right Wing\".",
        "context": "CREATE TABLE club (name VARCHAR, Club_ID VARCHAR); CREATE TABLE player (Club_ID VARCHAR, Position VARCHAR)",
        "answer": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"",
        "db_id": "sports_competition"
    },
    {
        "question": "What is the average points of players from club with name \"AIB\".",
        "context": "CREATE TABLE player (Points INTEGER, Club_ID VARCHAR); CREATE TABLE club (Club_ID VARCHAR, name VARCHAR)",
        "answer": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"",
        "db_id": "sports_competition"
    },
    {
        "question": "List the position of players and the average number of points of players of each position.",
        "context": "CREATE TABLE player (POSITION VARCHAR, Points INTEGER)",
        "answer": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION",
        "db_id": "sports_competition"
    },
    {
        "question": "List the position of players with average number of points scored by players of that position bigger than 20.",
        "context": "CREATE TABLE player (POSITION VARCHAR, name VARCHAR, Points INTEGER)",
        "answer": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "db_id": "sports_competition"
    },
    {
        "question": "List the types of competition and the number of competitions of each type.",
        "context": "CREATE TABLE competition (Competition_type VARCHAR)",
        "answer": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type",
        "db_id": "sports_competition"
    },
    {
        "question": "List the most common type of competition.",
        "context": "CREATE TABLE competition (Competition_type VARCHAR)",
        "answer": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "sports_competition"
    },
    {
        "question": "List the types of competition that have at most five competitions of that type.",
        "context": "CREATE TABLE competition (Competition_type VARCHAR)",
        "answer": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5",
        "db_id": "sports_competition"
    },
    {
        "question": "List the names of clubs that do not have any players.",
        "context": "CREATE TABLE player (name VARCHAR, Club_ID VARCHAR); CREATE TABLE CLub (name VARCHAR, Club_ID VARCHAR)",
        "answer": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
        "db_id": "sports_competition"
    },
    {
        "question": "What are the positions with both players having more than 20 points and less than 10 points.",
        "context": "CREATE TABLE player (POSITION VARCHAR, Points INTEGER)",
        "answer": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10",
        "db_id": "sports_competition"
    },
    {
        "question": "Show total points of all players.",
        "context": "CREATE TABLE player (Points INTEGER)",
        "answer": "SELECT sum(Points) FROM player",
        "db_id": "sports_competition"
    },
    {
        "question": "how many different positions are there?",
        "context": "CREATE TABLE player (POSITION VARCHAR)",
        "answer": "SELECT count(DISTINCT POSITION) FROM player",
        "db_id": "sports_competition"
    },
    {
        "question": "what are the name of players who get more than the average points.",
        "context": "CREATE TABLE player (name VARCHAR, points INTEGER)",
        "answer": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)",
        "db_id": "sports_competition"
    },
    {
        "question": "find the number of players whose points are lower than 30 in each position.",
        "context": "CREATE TABLE player (POSITION VARCHAR, points INTEGER)",
        "answer": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION",
        "db_id": "sports_competition"
    },
    {
        "question": "which country did participated in the most number of Tournament competitions?",
        "context": "CREATE TABLE competition (country VARCHAR, competition_type VARCHAR)",
        "answer": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "db_id": "sports_competition"
    },
    {
        "question": "which countries did participated in both Friendly and Tournament type competitions.",
        "context": "CREATE TABLE competition (country VARCHAR, competition_type VARCHAR)",
        "answer": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'",
        "db_id": "sports_competition"
    },
    {
        "question": "Find the countries that have never participated in any competition with Friendly type.",
        "context": "CREATE TABLE competition (country VARCHAR, competition_type VARCHAR)",
        "answer": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'",
        "db_id": "sports_competition"
    },
    {
        "question": "How many furniture components are there in total?",
        "context": "CREATE TABLE furniture (num_of_component INTEGER)",
        "answer": "SELECT sum(num_of_component) FROM furniture",
        "db_id": "manufacturer"
    },
    {
        "question": "Return the name and id of the furniture with the highest market rate.",
        "context": "CREATE TABLE furniture (name VARCHAR, furniture_id VARCHAR, market_rate VARCHAR)",
        "answer": "SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",
        "db_id": "manufacturer"
    },
    {
        "question": "find the total market rate of the furnitures that have the top 2 market shares.",
        "context": "CREATE TABLE furniture (market_rate INTEGER)",
        "answer": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2",
        "db_id": "manufacturer"
    },
    {
        "question": "Find the component amounts and names of all furnitures that have more than 10 components.",
        "context": "CREATE TABLE furniture (Num_of_Component INTEGER, name VARCHAR)",
        "answer": "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10",
        "db_id": "manufacturer"
    },
    {
        "question": "Find the name and component amount of the least popular furniture.",
        "context": "CREATE TABLE furniture (name VARCHAR, Num_of_Component VARCHAR, market_rate VARCHAR)",
        "answer": "SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
        "db_id": "manufacturer"
    },
    {
        "question": "Find the names of furnitures whose prices are lower than the highest price.",
        "context": "CREATE TABLE furniture_manufacte (Furniture_ID VARCHAR, Price_in_Dollar INTEGER); CREATE TABLE furniture (name VARCHAR, Furniture_ID VARCHAR); CREATE TABLE furniture_manufacte (Price_in_Dollar INTEGER)",
        "answer": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)",
        "db_id": "manufacturer"
    },
    {
        "question": "Which manufacturer has the most number of shops? List its name and year of opening.",
        "context": "CREATE TABLE manufacturer (open_year VARCHAR, name VARCHAR, num_of_shops VARCHAR)",
        "answer": "SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
        "db_id": "manufacturer"
    },
    {
        "question": "Find the average number of factories for the manufacturers that have more than 20 shops.",
        "context": "CREATE TABLE manufacturer (Num_of_Factories INTEGER, num_of_shops INTEGER)",
        "answer": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20",
        "db_id": "manufacturer"
    },
    {
        "question": "List all manufacturer names and ids ordered by their opening year.",
        "context": "CREATE TABLE manufacturer (name VARCHAR, manufacturer_id VARCHAR, open_year VARCHAR)",
        "answer": "SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year",
        "db_id": "manufacturer"
    },
    {
        "question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.",
        "context": "CREATE TABLE manufacturer (name VARCHAR, open_year VARCHAR, num_of_shops VARCHAR, Num_of_Factories VARCHAR)",
        "answer": "SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10",
        "db_id": "manufacturer"
    },
    {
        "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
        "context": "CREATE TABLE manufacturer (num_of_shops INTEGER, Num_of_Factories INTEGER, open_year INTEGER)",
        "answer": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990",
        "db_id": "manufacturer"
    },
    {
        "question": "Find the id and number of shops for the company that produces the most expensive furniture.",
        "context": "CREATE TABLE manufacturer (manufacturer_id VARCHAR, num_of_shops VARCHAR); CREATE TABLE furniture_manufacte (manufacturer_id VARCHAR, Price_in_Dollar VARCHAR)",
        "answer": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
        "db_id": "manufacturer"
    },
    {
        "question": "Find the number of funiture types produced by each manufacturer as well as the company names.",
        "context": "CREATE TABLE furniture_manufacte (manufacturer_id VARCHAR); CREATE TABLE manufacturer (name VARCHAR, manufacturer_id VARCHAR)",
        "answer": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id",
        "db_id": "manufacturer"
    },
    {
        "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
        "context": "CREATE TABLE furniture_manufacte (price_in_dollar VARCHAR, Furniture_ID VARCHAR); CREATE TABLE furniture (name VARCHAR, Furniture_ID VARCHAR)",
        "answer": "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID",
        "db_id": "manufacturer"
    },
    {
        "question": "Find the market shares and names of furnitures which no any company is producing in our records.",
        "context": "CREATE TABLE furniture (Market_Rate VARCHAR, name VARCHAR, Furniture_ID VARCHAR); CREATE TABLE furniture_manufacte (Market_Rate VARCHAR, name VARCHAR, Furniture_ID VARCHAR)",
        "answer": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
        "db_id": "manufacturer"
    },
    {
        "question": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.",
        "context": "CREATE TABLE furniture_manufacte (Furniture_ID VARCHAR, manufacturer_id VARCHAR); CREATE TABLE manufacturer (name VARCHAR, manufacturer_id VARCHAR); CREATE TABLE furniture (Furniture_ID VARCHAR, num_of_component INTEGER)",
        "answer": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10",
        "db_id": "manufacturer"
    },
    {
        "question": "Display the first name and department name for each employee.",
        "context": "CREATE TABLE departments (department_name VARCHAR, department_id VARCHAR); CREATE TABLE employees (first_name VARCHAR, department_id VARCHAR)",
        "answer": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
        "db_id": "hr_1"
    },
    {
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, salary INTEGER)",
        "answer": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "db_id": "hr_1"
    },
    {
        "question": "Display the first name, and department number for all employees whose last name is \"McEwen\".",
        "context": "CREATE TABLE employees (first_name VARCHAR, department_id VARCHAR, last_name VARCHAR)",
        "answer": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "db_id": "hr_1"
    },
    {
        "question": "Return all the information for all employees without any department number.",
        "context": "CREATE TABLE employees (department_id VARCHAR)",
        "answer": "SELECT * FROM employees WHERE department_id  =  \"null\"",
        "db_id": "hr_1"
    },
    {
        "question": "Display all the information about the department Marketing.",
        "context": "CREATE TABLE departments (department_name VARCHAR)",
        "answer": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "db_id": "hr_1"
    },
    {
        "question": "when is the hire date for those employees whose first name does not containing the letter M?",
        "context": "CREATE TABLE employees (hire_date VARCHAR, first_name VARCHAR)",
        "answer": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "db_id": "hr_1"
    },
    {
        "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR, salary VARCHAR, department_id VARCHAR)",
        "answer": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "db_id": "hr_1"
    },
    {
        "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR, salary VARCHAR, department_id VARCHAR)",
        "answer": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "db_id": "hr_1"
    },
    {
        "question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
        "context": "CREATE TABLE employees (phone_number VARCHAR, salary INTEGER)",
        "answer": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
        "db_id": "hr_1"
    },
    {
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "context": "CREATE TABLE employees (department_id VARCHAR, salary VARCHAR, commission_pct VARCHAR)",
        "answer": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "db_id": "hr_1"
    },
    {
        "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, salary VARCHAR, commission_pct VARCHAR)",
        "answer": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "db_id": "hr_1"
    },
    {
        "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, salary VARCHAR)",
        "answer": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
        "db_id": "hr_1"
    },
    {
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "context": "CREATE TABLE employees (job_id VARCHAR, hire_date INTEGER)",
        "answer": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "db_id": "hr_1"
    },
    {
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, department_id VARCHAR)",
        "answer": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "db_id": "hr_1"
    },
    {
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "context": "CREATE TABLE employees (salary VARCHAR, manager_id VARCHAR)",
        "answer": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "db_id": "hr_1"
    },
    {
        "question": "display all the details from Employees table for those employees who was hired before 2002-06-21.",
        "context": "CREATE TABLE employees (hire_date INTEGER)",
        "answer": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'",
        "db_id": "hr_1"
    },
    {
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "context": "CREATE TABLE employees (salary VARCHAR, first_name VARCHAR)",
        "answer": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "db_id": "hr_1"
    },
    {
        "question": "display those employees who joined after 7th September, 1987.",
        "context": "CREATE TABLE employees (hire_date INTEGER)",
        "answer": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "db_id": "hr_1"
    },
    {
        "question": "display the job title of jobs which minimum salary is greater than 9000.",
        "context": "CREATE TABLE jobs (job_title VARCHAR, min_salary INTEGER)",
        "answer": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "db_id": "hr_1"
    },
    {
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "context": "CREATE TABLE jobs (job_title VARCHAR, max_salary INTEGER, min_salary VARCHAR)",
        "answer": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "db_id": "hr_1"
    },
    {
        "question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
        "context": "CREATE TABLE employees (email VARCHAR, department_id VARCHAR, commission_pct VARCHAR, salary VARCHAR)",
        "answer": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
        "db_id": "hr_1"
    },
    {
        "question": "display the employee ID for each employee and the date on which he ended his previous job.",
        "context": "CREATE TABLE job_history (employee_id VARCHAR, end_date INTEGER)",
        "answer": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "db_id": "hr_1"
    },
    {
        "question": "display those departments where more than ten employees work who got a commission percentage.",
        "context": "CREATE TABLE employees (department_id VARCHAR, commission_pct VARCHAR)",
        "answer": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "db_id": "hr_1"
    },
    {
        "question": "Find the ids of the departments where any manager is managing 4 or more employees.",
        "context": "CREATE TABLE employees (department_id VARCHAR, manager_id VARCHAR, employee_id VARCHAR)",
        "answer": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "db_id": "hr_1"
    },
    {
        "question": "display the average salary of employees for each department who gets a commission percentage.",
        "context": "CREATE TABLE employees (department_id VARCHAR, salary INTEGER, commission_pct VARCHAR)",
        "answer": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "db_id": "hr_1"
    },
    {
        "question": "display the country ID and number of cities for each country.",
        "context": "CREATE TABLE locations (country_id VARCHAR)",
        "answer": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",
        "db_id": "hr_1"
    },
    {
        "question": "display job ID for those jobs that were done by two or more for more than 300 days.",
        "context": "CREATE TABLE job_history (job_id VARCHAR, end_date VARCHAR, start_date VARCHAR)",
        "answer": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
        "db_id": "hr_1"
    },
    {
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "context": "CREATE TABLE job_history (employee_id VARCHAR)",
        "answer": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "db_id": "hr_1"
    },
    {
        "question": "Find employee with ID and name of the country presently where (s)he is working.",
        "context": "CREATE TABLE countries (country_name VARCHAR, country_id VARCHAR); CREATE TABLE departments (department_id VARCHAR, location_id VARCHAR); CREATE TABLE locations (location_id VARCHAR, country_id VARCHAR); CREATE TABLE employees (employee_id VARCHAR, department_id VARCHAR)",
        "answer": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "db_id": "hr_1"
    },
    {
        "question": "display the department name and number of employees in each of the department.",
        "context": "CREATE TABLE departments (department_name VARCHAR, department_id VARCHAR); CREATE TABLE employees (department_id VARCHAR)",
        "answer": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name",
        "db_id": "hr_1"
    },
    {
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "context": "CREATE TABLE job_history (employee_id VARCHAR); CREATE TABLE employees (employee_id VARCHAR, salary VARCHAR)",
        "answer": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "db_id": "hr_1"
    },
    {
        "question": "display job title and average salary of employees.",
        "context": "CREATE TABLE jobs (job_title VARCHAR, job_id VARCHAR); CREATE TABLE employees (job_id VARCHAR)",
        "answer": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
        "db_id": "hr_1"
    },
    {
        "question": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, salary INTEGER, employee_id VARCHAR)",
        "answer": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",
        "db_id": "hr_1"
    },
    {
        "question": "return the smallest salary for every departments.",
        "context": "CREATE TABLE employees (department_id VARCHAR, salary INTEGER)",
        "answer": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
        "db_id": "hr_1"
    },
    {
        "question": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, department_id VARCHAR, salary INTEGER)",
        "answer": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
        "db_id": "hr_1"
    },
    {
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "context": "CREATE TABLE employees (employee_id VARCHAR, salary INTEGER)",
        "answer": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "db_id": "hr_1"
    },
    {
        "question": "display the employee id and salary of all employees who report to Payam (first name).",
        "context": "CREATE TABLE employees (employee_id VARCHAR, salary VARCHAR, manager_id VARCHAR, first_name VARCHAR)",
        "answer": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )",
        "db_id": "hr_1"
    },
    {
        "question": "find the name of all departments that do actually have one or more employees assigned to them.",
        "context": "CREATE TABLE departments (department_name VARCHAR, department_id VARCHAR); CREATE TABLE employees (department_id VARCHAR)",
        "answer": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
        "db_id": "hr_1"
    },
    {
        "question": "get the details of employees who manage a department.",
        "context": "CREATE TABLE departments (department_id VARCHAR, manager_id VARCHAR); CREATE TABLE employees (department_id VARCHAR, employee_id VARCHAR)",
        "answer": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "db_id": "hr_1"
    },
    {
        "question": "Find the job ID for those jobs which average salary is above 8000.",
        "context": "CREATE TABLE employees (job_id VARCHAR, salary INTEGER)",
        "answer": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "db_id": "hr_1"
    },
    {
        "question": "display the employee ID and job name for all those jobs in department 80.",
        "context": "CREATE TABLE jobs (job_title VARCHAR, job_id VARCHAR); CREATE TABLE employees (employee_id VARCHAR, job_id VARCHAR, department_id VARCHAR)",
        "answer": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "db_id": "hr_1"
    },
    {
        "question": "What is the first name and job id for all employees in the Finance department?",
        "context": "CREATE TABLE departments (department_id VARCHAR, department_name VARCHAR); CREATE TABLE employees (first_name VARCHAR, job_id VARCHAR, department_id VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
        "db_id": "hr_1"
    },
    {
        "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.",
        "context": "CREATE TABLE employees (salary INTEGER)",
        "answer": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "db_id": "hr_1"
    },
    {
        "question": "Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.",
        "context": "CREATE TABLE departments (department_id VARCHAR, manager_id INTEGER); CREATE TABLE employees (department_id VARCHAR, manager_id INTEGER)",
        "answer": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "db_id": "hr_1"
    },
    {
        "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR, department_id VARCHAR)",
        "answer": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
        "db_id": "hr_1"
    },
    {
        "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR, department_id VARCHAR)",
        "answer": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
        "db_id": "hr_1"
    },
    {
        "question": "display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a \u2019T\u2019.",
        "context": "CREATE TABLE employees (employee_id VARCHAR, first_name VARCHAR, last_name VARCHAR, department_id VARCHAR)",
        "answer": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
        "db_id": "hr_1"
    },
    {
        "question": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.",
        "context": "CREATE TABLE employees (employee_id VARCHAR, first_name VARCHAR, last_name VARCHAR, salary INTEGER, department_id VARCHAR)",
        "answer": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
        "db_id": "hr_1"
    },
    {
        "question": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.",
        "context": "CREATE TABLE employees (employee_id VARCHAR, job_id VARCHAR, salary INTEGER)",
        "answer": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )",
        "db_id": "hr_1"
    },
    {
        "question": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.",
        "context": "CREATE TABLE employees (employee_id VARCHAR, first_name VARCHAR, last_name VARCHAR, job_id VARCHAR, salary INTEGER)",
        "answer": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",
        "db_id": "hr_1"
    },
    {
        "question": "display the department id and the total salary for those departments which contains at least two employees.",
        "context": "CREATE TABLE employees (department_id VARCHAR, salary INTEGER)",
        "answer": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",
        "db_id": "hr_1"
    },
    {
        "question": "display all the information of those employees who did not have any job in the past.",
        "context": "CREATE TABLE job_history (employee_id VARCHAR); CREATE TABLE employees (employee_id VARCHAR)",
        "answer": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "db_id": "hr_1"
    },
    {
        "question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, salary INTEGER, department_id VARCHAR)",
        "answer": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
        "db_id": "hr_1"
    },
    {
        "question": "display the first and last name, department, city, and state province for each employee.",
        "context": "CREATE TABLE departments (department_name VARCHAR, department_id VARCHAR, location_id VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, department_id VARCHAR); CREATE TABLE locations (city VARCHAR, state_province VARCHAR, location_id VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
        "db_id": "hr_1"
    },
    {
        "question": "display those employees who contain a letter z to their first name and also display their last name, city.",
        "context": "CREATE TABLE locations (city VARCHAR, location_id VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, department_id VARCHAR); CREATE TABLE departments (department_id VARCHAR, location_id VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
        "db_id": "hr_1"
    },
    {
        "question": "display the department name, city, and state province for each department.",
        "context": "CREATE TABLE locations (city VARCHAR, state_province VARCHAR, location_id VARCHAR); CREATE TABLE departments (department_name VARCHAR, location_id VARCHAR)",
        "answer": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
        "db_id": "hr_1"
    },
    {
        "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
        "context": "CREATE TABLE countries (country_name VARCHAR, country_id VARCHAR); CREATE TABLE departments (department_id VARCHAR, location_id VARCHAR); CREATE TABLE locations (location_id VARCHAR, country_id VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, employee_id VARCHAR, department_id VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "db_id": "hr_1"
    },
    {
        "question": "display the department name and number of employees in each of the department.",
        "context": "CREATE TABLE employees (department_id VARCHAR); CREATE TABLE departments (department_id VARCHAR)",
        "answer": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",
        "db_id": "hr_1"
    },
    {
        "question": "display the full name (first and last name), and salary of those employees who working in any department located in London.",
        "context": "CREATE TABLE locations (location_id VARCHAR, city VARCHAR); CREATE TABLE employees (department_id VARCHAR); CREATE TABLE departments (department_id VARCHAR, location_id VARCHAR)",
        "answer": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
        "db_id": "hr_1"
    },
    {
        "question": "What is the name of the song that was released in the most recent year?",
        "context": "CREATE TABLE song (song_name VARCHAR, releasedate VARCHAR)",
        "answer": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "db_id": "music_1"
    },
    {
        "question": "What is the id of the longest song?",
        "context": "CREATE TABLE files (f_id VARCHAR, duration VARCHAR)",
        "answer": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "db_id": "music_1"
    },
    {
        "question": "Find the names of all English songs.",
        "context": "CREATE TABLE song (song_name VARCHAR, languages VARCHAR)",
        "answer": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "db_id": "music_1"
    },
    {
        "question": "What are the id of songs whose format is mp3.",
        "context": "CREATE TABLE files (f_id VARCHAR, formats VARCHAR)",
        "answer": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "db_id": "music_1"
    },
    {
        "question": "List the name and country of origin for all singers who have produced songs with rating above 9.",
        "context": "CREATE TABLE song (artist_name VARCHAR, rating INTEGER); CREATE TABLE artist (artist_name VARCHAR, country VARCHAR)",
        "answer": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
        "db_id": "music_1"
    },
    {
        "question": "List the file size and format for all songs that have resolution lower than 800.",
        "context": "CREATE TABLE song (f_id VARCHAR, resolution INTEGER); CREATE TABLE files (file_size VARCHAR, formats VARCHAR, f_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "db_id": "music_1"
    },
    {
        "question": "What is the name of the artist who produced the shortest song?",
        "context": "CREATE TABLE files (f_id VARCHAR, duration VARCHAR); CREATE TABLE song (artist_name VARCHAR, f_id VARCHAR)",
        "answer": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "db_id": "music_1"
    },
    {
        "question": "What are the names and countries of origin for the artists who produced the top three highly rated songs.",
        "context": "CREATE TABLE song (artist_name VARCHAR, rating VARCHAR); CREATE TABLE artist (artist_name VARCHAR, country VARCHAR)",
        "answer": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "db_id": "music_1"
    },
    {
        "question": "How many songs have 4 minute duration?",
        "context": "CREATE TABLE files (duration VARCHAR)",
        "answer": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "db_id": "music_1"
    },
    {
        "question": "How many artists are from Bangladesh?",
        "context": "CREATE TABLE artist (country VARCHAR)",
        "answer": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
        "db_id": "music_1"
    },
    {
        "question": "What is the average rating of songs produced by female artists?",
        "context": "CREATE TABLE song (rating INTEGER, artist_name VARCHAR); CREATE TABLE artist (artist_name VARCHAR, gender VARCHAR)",
        "answer": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "db_id": "music_1"
    },
    {
        "question": "What is the most popular file format?",
        "context": "CREATE TABLE files (formats VARCHAR)",
        "answer": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1",
        "db_id": "music_1"
    },
    {
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "context": "CREATE TABLE artist (artist_name VARCHAR, country VARCHAR, languages VARCHAR); CREATE TABLE song (artist_name VARCHAR, country VARCHAR, languages VARCHAR)",
        "answer": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "db_id": "music_1"
    },
    {
        "question": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
        "context": "CREATE TABLE song (f_id VARCHAR, formats VARCHAR, resolution INTEGER); CREATE TABLE files (f_id VARCHAR, formats VARCHAR, resolution INTEGER)",
        "answer": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "db_id": "music_1"
    },
    {
        "question": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "context": "CREATE TABLE artist (country VARCHAR, artist_name VARCHAR, gender VARCHAR); CREATE TABLE song (artist_name VARCHAR, languages VARCHAR)",
        "answer": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "db_id": "music_1"
    },
    {
        "question": "What is the average duration of songs that have mp3 format and resolution below 800?",
        "context": "CREATE TABLE files (duration INTEGER, f_id VARCHAR, formats VARCHAR); CREATE TABLE song (f_id VARCHAR, resolution VARCHAR)",
        "answer": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "db_id": "music_1"
    },
    {
        "question": "What is the number of artists for each gender?",
        "context": "CREATE TABLE artist (gender VARCHAR)",
        "answer": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "db_id": "music_1"
    },
    {
        "question": "What is the average rating of songs for each language?",
        "context": "CREATE TABLE song (languages VARCHAR, rating INTEGER)",
        "answer": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "db_id": "music_1"
    },
    {
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "context": "CREATE TABLE artist (gender VARCHAR, artist_name VARCHAR); CREATE TABLE song (artist_name VARCHAR, resolution VARCHAR)",
        "answer": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "db_id": "music_1"
    },
    {
        "question": "For each file format, return the number of artists who released songs in that format.",
        "context": "CREATE TABLE files (formats VARCHAR)",
        "answer": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "db_id": "music_1"
    },
    {
        "question": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
        "context": "CREATE TABLE song (song_name VARCHAR, resolution INTEGER, languages VARCHAR)",
        "answer": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "db_id": "music_1"
    },
    {
        "question": "What are the names of all songs that have a lower rating than some song of blues genre?",
        "context": "CREATE TABLE song (song_name VARCHAR, rating INTEGER, genre_is VARCHAR)",
        "answer": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")",
        "db_id": "music_1"
    },
    {
        "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "context": "CREATE TABLE song (artist_name VARCHAR, song_name VARCHAR); CREATE TABLE artist (artist_name VARCHAR, country VARCHAR)",
        "answer": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "db_id": "music_1"
    },
    {
        "question": "List the name and gender for all artists who released songs in March.",
        "context": "CREATE TABLE song (artist_name VARCHAR, releasedate VARCHAR); CREATE TABLE artist (artist_name VARCHAR, gender VARCHAR)",
        "answer": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "db_id": "music_1"
    },
    {
        "question": "List the names of all genres in alphabetical oder, together with its ratings.",
        "context": "CREATE TABLE genre (g_name VARCHAR, rating VARCHAR)",
        "answer": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "db_id": "music_1"
    },
    {
        "question": "Give me a list of the names of all songs ordered by their resolution.",
        "context": "CREATE TABLE song (song_name VARCHAR, resolution VARCHAR)",
        "answer": "SELECT song_name FROM song ORDER BY resolution",
        "db_id": "music_1"
    },
    {
        "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
        "context": "CREATE TABLE song (f_id VARCHAR, formats VARCHAR, resolution INTEGER); CREATE TABLE files (f_id VARCHAR, formats VARCHAR, resolution INTEGER)",
        "answer": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "db_id": "music_1"
    },
    {
        "question": "List the names of all songs that have 4 minute duration or are in English.",
        "context": "CREATE TABLE files (f_id VARCHAR, duration VARCHAR); CREATE TABLE song (song_name VARCHAR, f_id VARCHAR); CREATE TABLE song (song_name VARCHAR, languages VARCHAR)",
        "answer": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "db_id": "music_1"
    },
    {
        "question": "What is the language used most often in the songs?",
        "context": "CREATE TABLE song (languages VARCHAR)",
        "answer": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "db_id": "music_1"
    },
    {
        "question": "What is the language that was used most often in songs with resolution above 500?",
        "context": "CREATE TABLE song (artist_name VARCHAR, languages VARCHAR, resolution INTEGER)",
        "answer": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "db_id": "music_1"
    },
    {
        "question": "What are the names of artists who are Male and are from UK?",
        "context": "CREATE TABLE artist (artist_name VARCHAR, country VARCHAR, gender VARCHAR)",
        "answer": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "db_id": "music_1"
    },
    {
        "question": "Find the names of songs whose genre is modern or language is English.",
        "context": "CREATE TABLE song (song_name VARCHAR, genre_is VARCHAR, languages VARCHAR)",
        "answer": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "db_id": "music_1"
    },
    {
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "context": "CREATE TABLE song (song_name VARCHAR, resolution INTEGER); CREATE TABLE song (song_name VARCHAR, f_id VARCHAR); CREATE TABLE files (f_id VARCHAR, formats VARCHAR)",
        "answer": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "db_id": "music_1"
    },
    {
        "question": "Return the names of singers who are from UK and released an English song.",
        "context": "CREATE TABLE song (artist_name VARCHAR, languages VARCHAR); CREATE TABLE artist (artist_name VARCHAR); CREATE TABLE artist (artist_name VARCHAR, country VARCHAR)",
        "answer": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "db_id": "music_1"
    },
    {
        "question": "What are the average rating and resolution of songs that are in Bangla?",
        "context": "CREATE TABLE song (rating INTEGER, resolution INTEGER, languages VARCHAR)",
        "answer": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "db_id": "music_1"
    },
    {
        "question": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?",
        "context": "CREATE TABLE files (f_id VARCHAR, duration VARCHAR); CREATE TABLE song (resolution INTEGER, f_id VARCHAR)",
        "answer": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
        "db_id": "music_1"
    },
    {
        "question": "What are the maximum duration and resolution of songs grouped and ordered by languages?",
        "context": "CREATE TABLE song (languages VARCHAR, resolution INTEGER, f_id VARCHAR); CREATE TABLE files (duration INTEGER, f_id VARCHAR)",
        "answer": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "db_id": "music_1"
    },
    {
        "question": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "context": "CREATE TABLE song (genre_is VARCHAR, rating INTEGER, f_id VARCHAR); CREATE TABLE files (duration INTEGER, f_id VARCHAR)",
        "answer": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "db_id": "music_1"
    },
    {
        "question": "Find the names and number of works of all artists who have at least one English songs.",
        "context": "CREATE TABLE song (artist_name VARCHAR, languages VARCHAR); CREATE TABLE artist (artist_name VARCHAR)",
        "answer": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "db_id": "music_1"
    },
    {
        "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
        "context": "CREATE TABLE song (artist_name VARCHAR, resolution INTEGER); CREATE TABLE artist (artist_name VARCHAR, country VARCHAR)",
        "answer": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "db_id": "music_1"
    },
    {
        "question": "Find the names and number of works of the three artists who have produced the most songs.",
        "context": "CREATE TABLE song (artist_name VARCHAR); CREATE TABLE artist (artist_name VARCHAR)",
        "answer": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "db_id": "music_1"
    },
    {
        "question": "Find the country of origin for the artist who made the least number of songs?",
        "context": "CREATE TABLE song (artist_name VARCHAR); CREATE TABLE artist (country VARCHAR, artist_name VARCHAR)",
        "answer": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
        "db_id": "music_1"
    },
    {
        "question": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "context": "CREATE TABLE song (song_name VARCHAR, rating INTEGER, languages VARCHAR)",
        "answer": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "db_id": "music_1"
    },
    {
        "question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?",
        "context": "CREATE TABLE song (f_id VARCHAR, resolution INTEGER, rating INTEGER)",
        "answer": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "db_id": "music_1"
    },
    {
        "question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?",
        "context": "CREATE TABLE song (f_id VARCHAR, resolution INTEGER, genre_is VARCHAR)",
        "answer": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "db_id": "music_1"
    },
    {
        "question": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.",
        "context": "CREATE TABLE song (artist_name VARCHAR, languages VARCHAR); CREATE TABLE artist (artist_name VARCHAR)",
        "answer": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "db_id": "music_1"
    },
    {
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "context": "CREATE TABLE song (f_id VARCHAR, genre_is VARCHAR, artist_name VARCHAR, languages VARCHAR, rating VARCHAR)",
        "answer": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "db_id": "music_1"
    },
    {
        "question": "List the duration, file size and format of songs whose genre is pop, ordered by title?",
        "context": "CREATE TABLE song (f_id VARCHAR, genre_is VARCHAR, song_name VARCHAR); CREATE TABLE files (duration VARCHAR, file_size VARCHAR, formats VARCHAR, f_id VARCHAR)",
        "answer": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name",
        "db_id": "music_1"
    },
    {
        "question": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "context": "CREATE TABLE song (artist_name VARCHAR, languages VARCHAR, rating INTEGER)",
        "answer": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "db_id": "music_1"
    },
    {
        "question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
        "context": "CREATE TABLE artist (artist_name VARCHAR, country VARCHAR, rating INTEGER); CREATE TABLE song (artist_name VARCHAR, country VARCHAR, rating INTEGER)",
        "answer": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "db_id": "music_1"
    },
    {
        "question": "what is the full name and id of the college with the largest number of baseball players?",
        "context": "CREATE TABLE player_college (college_id VARCHAR); CREATE TABLE college (name_full VARCHAR, college_id VARCHAR)",
        "answer": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "What is average salary of the players in the team named 'Boston Red Stockings' ?",
        "context": "CREATE TABLE salary (salary INTEGER, team_id VARCHAR); CREATE TABLE team (team_id_br VARCHAR, name VARCHAR)",
        "answer": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'",
        "db_id": "baseball_1"
    },
    {
        "question": "What are first and last names of players participating in all star game in 1998?",
        "context": "CREATE TABLE all_star (player_id VARCHAR); CREATE TABLE player (player_id VARCHAR)",
        "answer": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
        "db_id": "baseball_1"
    },
    {
        "question": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.",
        "context": "CREATE TABLE player (name_first VARCHAR, name_last VARCHAR, player_id VARCHAR); CREATE TABLE all_star (player_id VARCHAR)",
        "answer": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "How many players enter hall of fame each year?",
        "context": "CREATE TABLE hall_of_fame (yearid VARCHAR)",
        "answer": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;",
        "db_id": "baseball_1"
    },
    {
        "question": "What is the average number of attendance at home games for each year?",
        "context": "CREATE TABLE home_game (YEAR VARCHAR, attendance INTEGER)",
        "answer": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;",
        "db_id": "baseball_1"
    },
    {
        "question": "In 2014, what are the id and rank of the team that has the largest average number of attendance?",
        "context": "CREATE TABLE team (team_id VARCHAR, rank VARCHAR); CREATE TABLE home_game (team_id VARCHAR, year VARCHAR, attendance INTEGER)",
        "answer": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "What are the manager's first name, last name and id who won the most manager award?",
        "context": "CREATE TABLE player (name_first VARCHAR, name_last VARCHAR, player_id VARCHAR); CREATE TABLE manager_award (player_id VARCHAR)",
        "answer": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "How many parks are there in the state of NY?",
        "context": "CREATE TABLE park (state VARCHAR)",
        "answer": "SELECT count(*) FROM park WHERE state  =  'NY';",
        "db_id": "baseball_1"
    },
    {
        "question": "Which 3 players won the most player awards? List their full name and id.",
        "context": "CREATE TABLE player (name_first VARCHAR, name_last VARCHAR, player_id VARCHAR); CREATE TABLE player_award (player_id VARCHAR)",
        "answer": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",
        "db_id": "baseball_1"
    },
    {
        "question": "List three countries which are the origins of the least players.",
        "context": "CREATE TABLE player (birth_country VARCHAR)",
        "answer": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
        "db_id": "baseball_1"
    },
    {
        "question": "Find all the players' first name and last name who have empty death record.",
        "context": "CREATE TABLE player (name_first VARCHAR, name_last VARCHAR, death_year VARCHAR)",
        "answer": "SELECT name_first ,  name_last FROM player WHERE death_year = '';",
        "db_id": "baseball_1"
    },
    {
        "question": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.",
        "context": "CREATE TABLE player (birth_country VARCHAR, bats VARCHAR)",
        "answer": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';",
        "db_id": "baseball_1"
    },
    {
        "question": "What is the average height of the players from the college named 'Yale University'?",
        "context": "CREATE TABLE player_college (player_id VARCHAR, college_id VARCHAR); CREATE TABLE player (height INTEGER, player_id VARCHAR); CREATE TABLE college (college_id VARCHAR, name_full VARCHAR)",
        "answer": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
        "db_id": "baseball_1"
    },
    {
        "question": "What is the highest salary among each team? List the team name, id and maximum salary.",
        "context": "CREATE TABLE salary (salary INTEGER, team_id VARCHAR); CREATE TABLE team (name VARCHAR, team_id VARCHAR)",
        "answer": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;",
        "db_id": "baseball_1"
    },
    {
        "question": "What are the name and id of the team offering the lowest average salary?",
        "context": "CREATE TABLE team (name VARCHAR, team_id VARCHAR); CREATE TABLE salary (team_id VARCHAR, salary INTEGER)",
        "answer": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "Find the players' first name and last name who won award both in 1960 and in 1961.",
        "context": "CREATE TABLE player (name_first VARCHAR, name_last VARCHAR); CREATE TABLE player_award (year VARCHAR)",
        "answer": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
        "db_id": "baseball_1"
    },
    {
        "question": "List players' first name and last name who have weight greater than 220 or height shorter than 75.",
        "context": "CREATE TABLE player (name_first VARCHAR, name_last VARCHAR, weight VARCHAR, height VARCHAR)",
        "answer": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75",
        "db_id": "baseball_1"
    },
    {
        "question": "List the maximum scores of the team Boston Red Stockings when the team won in postseason?",
        "context": "CREATE TABLE team (team_id_br VARCHAR, name VARCHAR); CREATE TABLE postseason (wins INTEGER, team_id_winner VARCHAR)",
        "answer": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';",
        "db_id": "baseball_1"
    },
    {
        "question": "How many times did Boston Red Stockings lose in 2009 postseason?",
        "context": "CREATE TABLE postseason (team_id_loser VARCHAR, year VARCHAR); CREATE TABLE team (team_id_br VARCHAR, name VARCHAR)",
        "answer": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;",
        "db_id": "baseball_1"
    },
    {
        "question": "What are the name and id of the team with the most victories in 2008 postseason?",
        "context": "CREATE TABLE postseason (team_id_winner VARCHAR, year VARCHAR); CREATE TABLE team (name VARCHAR, team_id_br VARCHAR)",
        "answer": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?",
        "context": "CREATE TABLE team (team_id_br VARCHAR, name VARCHAR); CREATE TABLE postseason (year VARCHAR, team_id_winner VARCHAR)",
        "answer": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year",
        "db_id": "baseball_1"
    },
    {
        "question": "What is the total number of postseason games that team Boston Red Stockings participated in?",
        "context": "CREATE TABLE postseason (team_id_winner VARCHAR, team_id_loser VARCHAR); CREATE TABLE team (team_id_br VARCHAR, name VARCHAR)",
        "answer": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );",
        "db_id": "baseball_1"
    },
    {
        "question": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?",
        "context": "CREATE TABLE postseason (YEAR VARCHAR, ties VARCHAR)",
        "answer": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;",
        "db_id": "baseball_1"
    },
    {
        "question": "What is the total salary paid by team Boston Red Stockings in 2010?",
        "context": "CREATE TABLE salary (salary INTEGER, team_id VARCHAR, year VARCHAR); CREATE TABLE team (team_id_br VARCHAR, name VARCHAR)",
        "answer": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010",
        "db_id": "baseball_1"
    },
    {
        "question": "How many players were in the team Boston Red Stockings in 2000?",
        "context": "CREATE TABLE salary (team_id VARCHAR, year VARCHAR); CREATE TABLE team (team_id_br VARCHAR, name VARCHAR)",
        "answer": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000",
        "db_id": "baseball_1"
    },
    {
        "question": "List the 3 highest salaries of the players in 2001?",
        "context": "CREATE TABLE salary (salary VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;",
        "db_id": "baseball_1"
    },
    {
        "question": "What were all the salary values of players in 2010 and 2001?",
        "context": "CREATE TABLE salary (salary VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001",
        "db_id": "baseball_1"
    },
    {
        "question": "In which year did the least people enter hall of fame?",
        "context": "CREATE TABLE hall_of_fame (yearid VARCHAR)",
        "answer": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "How many parks are there in Atlanta city?",
        "context": "CREATE TABLE park (city VARCHAR)",
        "answer": "SELECT count(*) FROM park WHERE city = 'Atlanta';",
        "db_id": "baseball_1"
    },
    {
        "question": "How many games were played in park \"Columbia Park\" in 1907?",
        "context": "CREATE TABLE park (park_id VARCHAR, park_name VARCHAR); CREATE TABLE home_game (park_id VARCHAR, year VARCHAR)",
        "answer": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';",
        "db_id": "baseball_1"
    },
    {
        "question": "How many games were played in city Atlanta in 2000?",
        "context": "CREATE TABLE park (park_id VARCHAR, city VARCHAR); CREATE TABLE home_game (park_id VARCHAR, year VARCHAR)",
        "answer": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';",
        "db_id": "baseball_1"
    },
    {
        "question": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?",
        "context": "CREATE TABLE team (team_id_br VARCHAR, name VARCHAR); CREATE TABLE home_game (attendance INTEGER, team_id VARCHAR, year VARCHAR)",
        "answer": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;",
        "db_id": "baseball_1"
    },
    {
        "question": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?",
        "context": "CREATE TABLE salary (salary INTEGER, player_id VARCHAR, year VARCHAR); CREATE TABLE player (player_id VARCHAR, name_first VARCHAR, name_last VARCHAR)",
        "answer": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;",
        "db_id": "baseball_1"
    },
    {
        "question": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.",
        "context": "CREATE TABLE player (name_first VARCHAR, name_last VARCHAR, player_id VARCHAR); CREATE TABLE team (team_id_br VARCHAR, name VARCHAR); CREATE TABLE salary (player_id VARCHAR, team_id VARCHAR, year VARCHAR)",
        "answer": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
        "db_id": "baseball_1"
    },
    {
        "question": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?",
        "context": "CREATE TABLE team (team_id_br VARCHAR, name VARCHAR); CREATE TABLE home_game (games INTEGER, team_id VARCHAR, year VARCHAR)",
        "answer": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "db_id": "baseball_1"
    },
    {
        "question": "Which team had the least number of attendances in home games in 1980?",
        "context": "CREATE TABLE home_game (team_id VARCHAR, year VARCHAR, attendance VARCHAR); CREATE TABLE team (name VARCHAR, team_id_br VARCHAR)",
        "answer": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "List the names of states that have more than 2 parks.",
        "context": "CREATE TABLE park (state VARCHAR)",
        "answer": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
        "db_id": "baseball_1"
    },
    {
        "question": "How many team franchises are active, with active value 'Y'?",
        "context": "CREATE TABLE team_franchise (active VARCHAR)",
        "answer": "SELECT count(*) FROM team_franchise WHERE active = 'Y';",
        "db_id": "baseball_1"
    },
    {
        "question": "Which cities have 2 to 4 parks?",
        "context": "CREATE TABLE park (city VARCHAR)",
        "answer": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
        "db_id": "baseball_1"
    },
    {
        "question": "Which park had most attendances in 2008?",
        "context": "CREATE TABLE park (park_name VARCHAR, park_id VARCHAR); CREATE TABLE home_game (park_id VARCHAR, year VARCHAR, attendance VARCHAR)",
        "answer": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "context": "CREATE TABLE camera_lens (focal_length_mm INTEGER)",
        "answer": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15",
        "db_id": "mountain_photos"
    },
    {
        "question": "Find the brand and name for each camera lens, and sort in descending order of maximum aperture.",
        "context": "CREATE TABLE camera_lens (brand VARCHAR, name VARCHAR, max_aperture VARCHAR)",
        "answer": "SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC",
        "db_id": "mountain_photos"
    },
    {
        "question": "List the id, color scheme, and name for all the photos.",
        "context": "CREATE TABLE photos (id VARCHAR, color VARCHAR, name VARCHAR)",
        "answer": "SELECT id ,  color ,  name FROM photos",
        "db_id": "mountain_photos"
    },
    {
        "question": "What are the maximum and average height of the mountains?",
        "context": "CREATE TABLE mountain (height INTEGER)",
        "answer": "SELECT max(height) ,  avg(height) FROM mountain",
        "db_id": "mountain_photos"
    },
    {
        "question": "What are the average prominence of the mountains in country 'Morocco'?",
        "context": "CREATE TABLE mountain (prominence INTEGER, country VARCHAR)",
        "answer": "SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'",
        "db_id": "mountain_photos"
    },
    {
        "question": "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?",
        "context": "CREATE TABLE mountain (name VARCHAR, height VARCHAR, prominence VARCHAR, range VARCHAR)",
        "answer": "SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'",
        "db_id": "mountain_photos"
    },
    {
        "question": "What are the id and name of the photos for mountains?",
        "context": "CREATE TABLE photos (mountain_id VARCHAR); CREATE TABLE mountain (id VARCHAR, name VARCHAR, height INTEGER)",
        "answer": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000",
        "db_id": "mountain_photos"
    },
    {
        "question": "What are the id and name of the mountains that have at least 2 photos?",
        "context": "CREATE TABLE mountain (id VARCHAR, name VARCHAR); CREATE TABLE photos (mountain_id VARCHAR)",
        "answer": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",
        "db_id": "mountain_photos"
    },
    {
        "question": "What are the names of the cameras that have taken picture of the most mountains?",
        "context": "CREATE TABLE camera_lens (name VARCHAR, id VARCHAR); CREATE TABLE photos (camera_lens_id VARCHAR)",
        "answer": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "mountain_photos"
    },
    {
        "question": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?",
        "context": "CREATE TABLE photos (camera_lens_id VARCHAR); CREATE TABLE camera_lens (name VARCHAR, id VARCHAR, brand VARCHAR)",
        "answer": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'",
        "db_id": "mountain_photos"
    },
    {
        "question": "How many different kinds of lens brands are there?",
        "context": "CREATE TABLE camera_lens (brand VARCHAR)",
        "answer": "SELECT count(DISTINCT brand) FROM camera_lens",
        "db_id": "mountain_photos"
    },
    {
        "question": "How many camera lenses are not used in taking any photos?",
        "context": "CREATE TABLE photos (id VARCHAR, camera_lens_id VARCHAR); CREATE TABLE camera_lens (id VARCHAR, camera_lens_id VARCHAR)",
        "answer": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "db_id": "mountain_photos"
    },
    {
        "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
        "context": "CREATE TABLE mountain (id VARCHAR, country VARCHAR); CREATE TABLE photos (camera_lens_id VARCHAR, mountain_id VARCHAR)",
        "answer": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'",
        "db_id": "mountain_photos"
    },
    {
        "question": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'",
        "context": "CREATE TABLE mountain (id VARCHAR, range VARCHAR); CREATE TABLE photos (mountain_id VARCHAR, camera_lens_id VARCHAR); CREATE TABLE camera_lens (brand VARCHAR, id VARCHAR)",
        "answer": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'",
        "db_id": "mountain_photos"
    },
    {
        "question": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.",
        "context": "CREATE TABLE camera_lens (id VARCHAR, brand VARCHAR); CREATE TABLE mountain (name VARCHAR, prominence VARCHAR, id VARCHAR); CREATE TABLE photos (mountain_id VARCHAR, camera_lens_id VARCHAR); CREATE TABLE mountain (name VARCHAR, prominence VARCHAR)",
        "answer": "SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'",
        "db_id": "mountain_photos"
    },
    {
        "question": "List the camera lens names containing substring \"Digital\".",
        "context": "CREATE TABLE camera_lens (name VARCHAR)",
        "answer": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
        "db_id": "mountain_photos"
    },
    {
        "question": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.",
        "context": "CREATE TABLE photos (camera_lens_id VARCHAR); CREATE TABLE camera_lens (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)",
        "db_id": "mountain_photos"
    },
    {
        "question": "Find the names of channels that are not owned by CCTV.",
        "context": "CREATE TABLE channel (name VARCHAR, OWNER VARCHAR)",
        "answer": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
        "db_id": "program_share"
    },
    {
        "question": "List all channel names ordered by their rating in percent from big to small.",
        "context": "CREATE TABLE channel (name VARCHAR, rating_in_percent VARCHAR)",
        "answer": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
        "db_id": "program_share"
    },
    {
        "question": "What is the owner of the channel that has the highest rating ratio?",
        "context": "CREATE TABLE channel (OWNER VARCHAR, rating_in_percent VARCHAR)",
        "answer": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1",
        "db_id": "program_share"
    },
    {
        "question": "how many programs are there?",
        "context": "CREATE TABLE program (Id VARCHAR)",
        "answer": "SELECT count(*) FROM program",
        "db_id": "program_share"
    },
    {
        "question": "list all the names of programs, ordering by launch time.",
        "context": "CREATE TABLE program (name VARCHAR, launch VARCHAR)",
        "answer": "SELECT name FROM program ORDER BY launch",
        "db_id": "program_share"
    },
    {
        "question": "List the name, origin and owner of each program.",
        "context": "CREATE TABLE program (name VARCHAR, origin VARCHAR, OWNER VARCHAR)",
        "answer": "SELECT name ,  origin ,  OWNER FROM program",
        "db_id": "program_share"
    },
    {
        "question": "find the name of the program that was launched most recently.",
        "context": "CREATE TABLE program (name VARCHAR, launch VARCHAR)",
        "answer": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "db_id": "program_share"
    },
    {
        "question": "find the total percentage share of all channels owned by CCTV.",
        "context": "CREATE TABLE channel (Share_in_percent INTEGER, OWNER VARCHAR)",
        "answer": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'",
        "db_id": "program_share"
    },
    {
        "question": "Find the names of the channels that are broadcast in the morning.",
        "context": "CREATE TABLE channel (name VARCHAR, channel_id VARCHAR); CREATE TABLE broadcast (channel_id VARCHAR, time_of_day VARCHAR)",
        "answer": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'",
        "db_id": "program_share"
    },
    {
        "question": "what are the names of the channels that broadcast in both morning and night?",
        "context": "CREATE TABLE channel (name VARCHAR, channel_id VARCHAR); CREATE TABLE broadcast (channel_id VARCHAR, time_of_day VARCHAR)",
        "answer": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'",
        "db_id": "program_share"
    },
    {
        "question": "how many programs are broadcast in each time section of the day?",
        "context": "CREATE TABLE broadcast (time_of_day VARCHAR)",
        "answer": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day",
        "db_id": "program_share"
    },
    {
        "question": "find the number of different programs that are broadcast during night time.",
        "context": "CREATE TABLE broadcast (program_id VARCHAR, time_of_day VARCHAR)",
        "answer": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'",
        "db_id": "program_share"
    },
    {
        "question": "Find the names of programs that are never broadcasted in the morning.",
        "context": "CREATE TABLE broadcast (program_id VARCHAR, Time_of_day VARCHAR); CREATE TABLE program (name VARCHAR, program_id VARCHAR); CREATE TABLE program (name VARCHAR)",
        "answer": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"",
        "db_id": "program_share"
    },
    {
        "question": "find the program owners that have some programs in both morning and night time.",
        "context": "CREATE TABLE broadcast (program_id VARCHAR, Time_of_day VARCHAR); CREATE TABLE program (owner VARCHAR, program_id VARCHAR)",
        "answer": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "db_id": "program_share"
    },
    {
        "question": "List all program origins in the alphabetical order.",
        "context": "CREATE TABLE program (origin VARCHAR)",
        "answer": "SELECT origin FROM program ORDER BY origin",
        "db_id": "program_share"
    },
    {
        "question": "what is the number of different channel owners?",
        "context": "CREATE TABLE channel (OWNER VARCHAR)",
        "answer": "SELECT count(DISTINCT OWNER) FROM channel",
        "db_id": "program_share"
    },
    {
        "question": "find the names of programs whose origin is not in Beijing.",
        "context": "CREATE TABLE program (name VARCHAR, origin VARCHAR)",
        "answer": "SELECT name FROM program WHERE origin != 'Beijing'",
        "db_id": "program_share"
    },
    {
        "question": "What are the names of the channels owned by CCTV or HBS?",
        "context": "CREATE TABLE channel (name VARCHAR, OWNER VARCHAR)",
        "answer": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'",
        "db_id": "program_share"
    },
    {
        "question": "Find the total rating ratio for each channel owner.",
        "context": "CREATE TABLE channel (OWNER VARCHAR, Rating_in_percent INTEGER)",
        "answer": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER",
        "db_id": "program_share"
    },
    {
        "question": "Find the name of the program that is broadcast most frequently.",
        "context": "CREATE TABLE program (name VARCHAR, program_id VARCHAR); CREATE TABLE broadcast (program_id VARCHAR)",
        "answer": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "program_share"
    },
    {
        "question": "How many courses are there in total?",
        "context": "CREATE TABLE COURSES (Id VARCHAR)",
        "answer": "SELECT count(*) FROM COURSES",
        "db_id": "e_learning"
    },
    {
        "question": "Find the total number of courses offered.",
        "context": "CREATE TABLE Courses (Id VARCHAR)",
        "answer": "SELECT count(*) FROM COURSES",
        "db_id": "e_learning"
    },
    {
        "question": "What are the descriptions of the courses with name \"database\"?",
        "context": "CREATE TABLE COURSES (course_description VARCHAR, course_name VARCHAR)",
        "answer": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"",
        "db_id": "e_learning"
    },
    {
        "question": "What are the addresses of the course authors or tutors with personal name \"Cathrine\"",
        "context": "CREATE TABLE Course_Authors_and_Tutors (address_line_1 VARCHAR, personal_name VARCHAR)",
        "answer": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "db_id": "e_learning"
    },
    {
        "question": "List the addresses of all the course authors or tutors.",
        "context": "CREATE TABLE Course_Authors_and_Tutors (address_line_1 VARCHAR)",
        "answer": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
        "db_id": "e_learning"
    },
    {
        "question": "List all the login names and family names of course author and tutors.",
        "context": "CREATE TABLE Course_Authors_and_Tutors (login_name VARCHAR, family_name VARCHAR)",
        "answer": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "db_id": "e_learning"
    },
    {
        "question": "List all the dates of enrollment and completion of students.",
        "context": "CREATE TABLE Student_Course_Enrolment (date_of_enrolment VARCHAR, date_of_completion VARCHAR)",
        "answer": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "db_id": "e_learning"
    },
    {
        "question": "How many distinct students are enrolled in courses?",
        "context": "CREATE TABLE Student_Course_Enrolment (student_id VARCHAR)",
        "answer": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment",
        "db_id": "e_learning"
    },
    {
        "question": "How many distinct courses are enrolled in by students?",
        "context": "CREATE TABLE Student_Course_Enrolment (course_id VARCHAR)",
        "answer": "SELECT count(course_id) FROM Student_Course_Enrolment",
        "db_id": "e_learning"
    },
    {
        "question": "Find the dates of the tests taken with result \"Pass\".",
        "context": "CREATE TABLE Student_Tests_Taken (date_test_taken VARCHAR, test_result VARCHAR)",
        "answer": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"",
        "db_id": "e_learning"
    },
    {
        "question": "How many tests have result \"Fail\"?",
        "context": "CREATE TABLE Student_Tests_Taken (test_result VARCHAR)",
        "answer": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
        "db_id": "e_learning"
    },
    {
        "question": "What are the login names of the students with family name \"Ward\"?",
        "context": "CREATE TABLE Students (login_name VARCHAR, family_name VARCHAR)",
        "answer": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"",
        "db_id": "e_learning"
    },
    {
        "question": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?",
        "context": "CREATE TABLE Students (date_of_latest_logon VARCHAR, family_name VARCHAR)",
        "answer": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"",
        "db_id": "e_learning"
    },
    {
        "question": "How many students have personal names that contain the word \"son\"?",
        "context": "CREATE TABLE Students (personal_name VARCHAR)",
        "answer": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"",
        "db_id": "e_learning"
    },
    {
        "question": "List all the subject names.",
        "context": "CREATE TABLE SUBJECTS (subject_name VARCHAR)",
        "answer": "SELECT subject_name FROM SUBJECTS",
        "db_id": "e_learning"
    },
    {
        "question": "List all the information about course authors and tutors in alphabetical order of the personal name.",
        "context": "CREATE TABLE Course_Authors_and_Tutors (personal_name VARCHAR)",
        "answer": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "db_id": "e_learning"
    },
    {
        "question": "List the personal names and family names of all the students in alphabetical order of family name.",
        "context": "CREATE TABLE Students (personal_name VARCHAR, family_name VARCHAR)",
        "answer": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name",
        "db_id": "e_learning"
    },
    {
        "question": "List each test result and its count in descending order of count.",
        "context": "CREATE TABLE Student_Tests_Taken (test_result VARCHAR)",
        "answer": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
        "db_id": "e_learning"
    },
    {
        "question": "Find the login name of the course author that teaches the course with name \"advanced database\".",
        "context": "CREATE TABLE Courses (author_id VARCHAR, course_name VARCHAR); CREATE TABLE Course_Authors_and_Tutors (login_name VARCHAR, author_id VARCHAR)",
        "answer": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"",
        "db_id": "e_learning"
    },
    {
        "question": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".",
        "context": "CREATE TABLE Courses (author_id VARCHAR, course_name VARCHAR); CREATE TABLE Course_Authors_and_Tutors (address_line_1 VARCHAR, author_id VARCHAR)",
        "answer": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"",
        "db_id": "e_learning"
    },
    {
        "question": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
        "context": "CREATE TABLE Courses (author_id VARCHAR); CREATE TABLE Course_Authors_and_Tutors (personal_name VARCHAR, family_name VARCHAR, author_id VARCHAR)",
        "answer": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "e_learning"
    },
    {
        "question": "Find the addresses and author IDs of the course authors that teach at least two courses.",
        "context": "CREATE TABLE Courses (author_id VARCHAR); CREATE TABLE Course_Authors_and_Tutors (address_line_1 VARCHAR, author_id VARCHAR)",
        "answer": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",
        "db_id": "e_learning"
    },
    {
        "question": "Find the names of courses taught by the tutor who has personal name \"Julio\".",
        "context": "CREATE TABLE Course_Authors_and_Tutors (author_id VARCHAR, personal_name VARCHAR); CREATE TABLE Courses (course_name VARCHAR, author_id VARCHAR)",
        "answer": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"",
        "db_id": "e_learning"
    },
    {
        "question": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".",
        "context": "CREATE TABLE Courses (course_name VARCHAR, course_description VARCHAR, subject_id VARCHAR); CREATE TABLE Subjects (subject_id VARCHAR, subject_name VARCHAR)",
        "answer": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"",
        "db_id": "e_learning"
    },
    {
        "question": "Find the subject ID, subject name, and the corresponding number of available courses for each subject.",
        "context": "CREATE TABLE Courses (subject_id VARCHAR); CREATE TABLE Subjects (subject_name VARCHAR, subject_id VARCHAR)",
        "answer": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id",
        "db_id": "e_learning"
    },
    {
        "question": "Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.",
        "context": "CREATE TABLE Courses (subject_id VARCHAR); CREATE TABLE Subjects (subject_name VARCHAR, subject_id VARCHAR)",
        "answer": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC",
        "db_id": "e_learning"
    },
    {
        "question": "What is the date of enrollment of the course named \"Spanish\"?",
        "context": "CREATE TABLE Student_Course_Enrolment (date_of_enrolment VARCHAR, course_id VARCHAR); CREATE TABLE Courses (course_id VARCHAR, course_name VARCHAR)",
        "answer": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"",
        "db_id": "e_learning"
    },
    {
        "question": "What is the name of the course that has the most student enrollment?",
        "context": "CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Student_Course_Enrolment (course_id VARCHAR)",
        "answer": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "e_learning"
    },
    {
        "question": "What are the names of the courses that have exactly 1 student enrollment?",
        "context": "CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Student_Course_Enrolment (course_id VARCHAR)",
        "answer": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
        "db_id": "e_learning"
    },
    {
        "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
        "context": "CREATE TABLE Student_Course_Enrolment (course_id VARCHAR); CREATE TABLE Courses (course_description VARCHAR, course_name VARCHAR, course_id VARCHAR)",
        "answer": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2",
        "db_id": "e_learning"
    },
    {
        "question": "What is the name of each course and the corresponding number of student enrollment?",
        "context": "CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Student_Course_Enrolment (course_id VARCHAR)",
        "answer": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "db_id": "e_learning"
    },
    {
        "question": "What are the enrollment dates of all the tests that have result \"Pass\"?",
        "context": "CREATE TABLE Student_Tests_Taken (registration_id VARCHAR, test_result VARCHAR); CREATE TABLE Student_Course_Enrolment (date_of_enrolment VARCHAR, registration_id VARCHAR)",
        "answer": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"",
        "db_id": "e_learning"
    },
    {
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "context": "CREATE TABLE Student_Tests_Taken (registration_id VARCHAR, test_result VARCHAR); CREATE TABLE Student_Course_Enrolment (date_of_completion VARCHAR, registration_id VARCHAR)",
        "answer": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "db_id": "e_learning"
    },
    {
        "question": "List the dates of enrollment and completion of the student with personal name \"Karson\".",
        "context": "CREATE TABLE Student_Course_Enrolment (date_of_enrolment VARCHAR, date_of_completion VARCHAR, student_id VARCHAR); CREATE TABLE Students (student_id VARCHAR, personal_name VARCHAR)",
        "answer": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"",
        "db_id": "e_learning"
    },
    {
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "context": "CREATE TABLE Student_Course_Enrolment (date_of_enrolment VARCHAR, date_of_completion VARCHAR, student_id VARCHAR); CREATE TABLE Students (student_id VARCHAR, family_name VARCHAR, personal_name VARCHAR)",
        "answer": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "db_id": "e_learning"
    },
    {
        "question": "Find the student ID and login name of the student with the most course enrollments",
        "context": "CREATE TABLE Student_Course_Enrolment (student_id VARCHAR); CREATE TABLE Students (login_name VARCHAR, student_id VARCHAR)",
        "answer": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "e_learning"
    },
    {
        "question": "Find the student ID and personal name of the student with at least two enrollments.",
        "context": "CREATE TABLE Student_Course_Enrolment (student_id VARCHAR); CREATE TABLE Students (personal_name VARCHAR, student_id VARCHAR)",
        "answer": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2",
        "db_id": "e_learning"
    },
    {
        "question": "Find the student ID and middle name for all the students with at most two enrollments.",
        "context": "CREATE TABLE Student_Course_Enrolment (student_id VARCHAR); CREATE TABLE Students (middle_name VARCHAR, student_id VARCHAR)",
        "answer": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",
        "db_id": "e_learning"
    },
    {
        "question": "Find the personal names of students not enrolled in any course.",
        "context": "CREATE TABLE Student_Course_Enrolment (student_id VARCHAR); CREATE TABLE Students (personal_name VARCHAR); CREATE TABLE Students (personal_name VARCHAR, student_id VARCHAR)",
        "answer": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id",
        "db_id": "e_learning"
    },
    {
        "question": "How many students did not have any course enrollment?",
        "context": "CREATE TABLE Students (student_id VARCHAR); CREATE TABLE Student_Course_Enrolment (student_id VARCHAR)",
        "answer": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)",
        "db_id": "e_learning"
    },
    {
        "question": "Find the common login name of course authors and students.",
        "context": "CREATE TABLE Course_Authors_and_Tutors (login_name VARCHAR); CREATE TABLE Students (login_name VARCHAR)",
        "answer": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
        "db_id": "e_learning"
    },
    {
        "question": "Find the common personal name of course authors and students.",
        "context": "CREATE TABLE Course_Authors_and_Tutors (personal_name VARCHAR); CREATE TABLE Students (personal_name VARCHAR)",
        "answer": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
        "db_id": "e_learning"
    },
    {
        "question": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.",
        "context": "CREATE TABLE Settlements (Claim_id VARCHAR); CREATE TABLE Claims (Amount_Claimed INTEGER); CREATE TABLE Claims (Date_Claim_Made VARCHAR, Claim_id VARCHAR, Amount_Claimed INTEGER)",
        "answer": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )",
        "db_id": "insurance_policies"
    },
    {
        "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.",
        "context": "CREATE TABLE Customers (customer_details VARCHAR, customer_id VARCHAR, Customer_id VARCHAR); CREATE TABLE Customer_Policies (customer_id VARCHAR, policy_id VARCHAR); CREATE TABLE Claims (policy_id VARCHAR)",
        "answer": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",
        "db_id": "insurance_policies"
    },
    {
        "question": "List the method, date and amount of all the payments, in ascending order of date.",
        "context": "CREATE TABLE Payments (Payment_Method_Code VARCHAR, Date_Payment_Made VARCHAR, Amount_Payment VARCHAR)",
        "answer": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
        "db_id": "insurance_policies"
    },
    {
        "question": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.",
        "context": "CREATE TABLE Claims (Amount_Settled VARCHAR, Amount_Claimed VARCHAR)",
        "answer": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
        "db_id": "insurance_policies"
    },
    {
        "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
        "context": "CREATE TABLE Claims (Amount_Settled VARCHAR, Amount_Claimed VARCHAR)",
        "answer": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
        "db_id": "insurance_policies"
    },
    {
        "question": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
        "context": "CREATE TABLE Claims (Date_Claim_Made VARCHAR, Date_Claim_Settled VARCHAR, Amount_Claimed INTEGER)",
        "answer": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )",
        "db_id": "insurance_policies"
    },
    {
        "question": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.",
        "context": "CREATE TABLE Claims (Date_Claim_Made VARCHAR, Amount_Settled INTEGER)",
        "answer": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )",
        "db_id": "insurance_policies"
    },
    {
        "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "context": "CREATE TABLE Settlements (claim_id VARCHAR); CREATE TABLE Claims (Claim_id VARCHAR, claim_id VARCHAR)",
        "answer": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id",
        "db_id": "insurance_policies"
    },
    {
        "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
        "context": "CREATE TABLE Claims (claim_id VARCHAR, date_claim_made VARCHAR); CREATE TABLE Settlements (claim_id VARCHAR)",
        "answer": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "insurance_policies"
    },
    {
        "question": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.",
        "context": "CREATE TABLE Settlements (claim_id VARCHAR); CREATE TABLE Claims (claim_id VARCHAR, Date_Claim_Settled VARCHAR)",
        "answer": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",
        "db_id": "insurance_policies"
    },
    {
        "question": "Of all the claims, what was the earliest date when any claim was made?",
        "context": "CREATE TABLE Claims (Date_Claim_Made VARCHAR)",
        "answer": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
        "db_id": "insurance_policies"
    },
    {
        "question": "What is the total amount of settlement made for all the settlements?",
        "context": "CREATE TABLE Settlements (Amount_Settled INTEGER)",
        "answer": "SELECT sum(Amount_Settled) FROM Settlements",
        "db_id": "insurance_policies"
    },
    {
        "question": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "context": "CREATE TABLE Customers (customer_details VARCHAR, customer_id VARCHAR, Customer_id VARCHAR); CREATE TABLE Customer_Policies (Customer_id VARCHAR)",
        "answer": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1",
        "db_id": "insurance_policies"
    },
    {
        "question": "What are the claim dates and settlement dates of all the settlements?",
        "context": "CREATE TABLE Settlements (Date_Claim_Made VARCHAR, Date_Claim_Settled VARCHAR)",
        "answer": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements",
        "db_id": "insurance_policies"
    },
    {
        "question": "What is the most popular payment method?",
        "context": "CREATE TABLE Payments (Payment_Method_Code VARCHAR)",
        "answer": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "insurance_policies"
    },
    {
        "question": "With which kind of payment method were the least number of payments processed?",
        "context": "CREATE TABLE Payments (Payment_Method_Code VARCHAR)",
        "answer": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
        "db_id": "insurance_policies"
    },
    {
        "question": "What is the total amount of payment?",
        "context": "CREATE TABLE Payments (Amount_Payment INTEGER)",
        "answer": "SELECT sum(Amount_Payment) FROM Payments",
        "db_id": "insurance_policies"
    },
    {
        "question": "What are all the distinct details of the customers?",
        "context": "CREATE TABLE Customers (customer_details VARCHAR)",
        "answer": "SELECT DISTINCT customer_details FROM Customers",
        "db_id": "insurance_policies"
    },
    {
        "question": "Which kind of policy type was chosen by the most customers?",
        "context": "CREATE TABLE Customer_Policies (Policy_Type_Code VARCHAR)",
        "answer": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "insurance_policies"
    },
    {
        "question": "How many settlements are there in total?",
        "context": "CREATE TABLE Settlements (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Settlements",
        "db_id": "insurance_policies"
    },
    {
        "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.",
        "context": "CREATE TABLE Payments (Payment_ID VARCHAR, Date_Payment_Made VARCHAR, Amount_Payment VARCHAR, Payment_Method_Code VARCHAR)",
        "answer": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'",
        "db_id": "insurance_policies"
    },
    {
        "question": "List the details of the customers who do not have any policies.",
        "context": "CREATE TABLE Customer_Policies (customer_id VARCHAR); CREATE TABLE Customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_details VARCHAR)",
        "answer": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id",
        "db_id": "insurance_policies"
    },
    {
        "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.",
        "context": "CREATE TABLE Claims (claim_id VARCHAR, date_claim_made VARCHAR, Date_Claim_Settled VARCHAR, Claim_id VARCHAR); CREATE TABLE Settlements (Claim_id VARCHAR)",
        "answer": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1",
        "db_id": "insurance_policies"
    },
    {
        "question": "Find the total claimed amount of all the claims.",
        "context": "CREATE TABLE Claims (Amount_Claimed INTEGER)",
        "answer": "SELECT sum(Amount_Claimed) FROM Claims",
        "db_id": "insurance_policies"
    },
    {
        "question": "Which department has the largest number of employees?",
        "context": "CREATE TABLE department (name VARCHAR, departmentID VARCHAR)",
        "answer": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;",
        "db_id": "hospital_1"
    },
    {
        "question": "What is the employee id of the head whose department has the least number of employees?",
        "context": "CREATE TABLE department (head VARCHAR, departmentID VARCHAR)",
        "answer": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
        "db_id": "hospital_1"
    },
    {
        "question": "what is the name and position of the head whose department has least number of employees?",
        "context": "CREATE TABLE department (head VARCHAR); CREATE TABLE physician (name VARCHAR, position VARCHAR, EmployeeID VARCHAR)",
        "answer": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
        "db_id": "hospital_1"
    },
    {
        "question": "What are names of patients who made an appointment?",
        "context": "CREATE TABLE appointment (patient VARCHAR); CREATE TABLE patient (ssn VARCHAR)",
        "answer": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "db_id": "hospital_1"
    },
    {
        "question": "what are name and phone number of patients who had more than one appointment?",
        "context": "CREATE TABLE appointment (patient VARCHAR); CREATE TABLE patient (ssn VARCHAR)",
        "answer": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the id of the appointment with the most recent start date?",
        "context": "CREATE TABLE appointment (appointmentid VARCHAR, START VARCHAR)",
        "answer": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
        "db_id": "hospital_1"
    },
    {
        "question": "List the name of physicians who took some appointment.",
        "context": "CREATE TABLE appointment (Physician VARCHAR); CREATE TABLE physician (name VARCHAR, EmployeeID VARCHAR)",
        "answer": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "db_id": "hospital_1"
    },
    {
        "question": "List the name of physicians who never took any appointment.",
        "context": "CREATE TABLE physician (name VARCHAR); CREATE TABLE appointment (Physician VARCHAR); CREATE TABLE physician (name VARCHAR, EmployeeID VARCHAR)",
        "answer": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the names of all physicians and their primary affiliated departments' names.",
        "context": "CREATE TABLE department (name VARCHAR, DepartmentID VARCHAR); CREATE TABLE affiliated_with (physician VARCHAR, department VARCHAR, PrimaryAffiliation VARCHAR); CREATE TABLE physician (name VARCHAR, EmployeeID VARCHAR)",
        "answer": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "db_id": "hospital_1"
    },
    {
        "question": "What is the name of the patient who made the most recent appointment?",
        "context": "CREATE TABLE patient (name VARCHAR, ssn VARCHAR); CREATE TABLE appointment (patient VARCHAR, start VARCHAR)",
        "answer": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
        "db_id": "hospital_1"
    },
    {
        "question": "How many patients stay in room 112?",
        "context": "CREATE TABLE stay (patient VARCHAR, room VARCHAR)",
        "answer": "SELECT count(patient) FROM stay WHERE room  =  112",
        "db_id": "hospital_1"
    },
    {
        "question": "How many patients' prescriptions are made by physician John Dorian?",
        "context": "CREATE TABLE patient (SSN VARCHAR); CREATE TABLE prescribes (patient VARCHAR, physician VARCHAR); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR)",
        "answer": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the name of medication used on the patient who stays in room 111?",
        "context": "CREATE TABLE Prescribes (Patient VARCHAR, Medication VARCHAR); CREATE TABLE Medication (name VARCHAR, Code VARCHAR); CREATE TABLE patient (SSN VARCHAR); CREATE TABLE stay (Patient VARCHAR)",
        "answer": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the patient who most recently stayed in room 111.",
        "context": "CREATE TABLE stay (patient VARCHAR, room VARCHAR, staystart VARCHAR)",
        "answer": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "db_id": "hospital_1"
    },
    {
        "question": "What is the name of the nurse has the most appointments?",
        "context": "CREATE TABLE nurse (name VARCHAR, employeeid VARCHAR); CREATE TABLE appointment (prepnurse VARCHAR)",
        "answer": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "db_id": "hospital_1"
    },
    {
        "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
        "context": "CREATE TABLE patient (PCP VARCHAR); CREATE TABLE physician (name VARCHAR, employeeid VARCHAR)",
        "answer": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the name of physicians who are in charge of more than one patient.",
        "context": "CREATE TABLE patient (PCP VARCHAR); CREATE TABLE physician (name VARCHAR, employeeid VARCHAR)",
        "answer": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the number of rooms located on each block floor.",
        "context": "CREATE TABLE room (blockfloor VARCHAR, blockcode VARCHAR); CREATE TABLE BLOCK (blockfloor VARCHAR, blockcode VARCHAR)",
        "answer": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the number of rooms for different block code?",
        "context": "CREATE TABLE room (blockfloor VARCHAR, blockcode VARCHAR); CREATE TABLE BLOCK (blockcode VARCHAR, blockfloor VARCHAR)",
        "answer": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "db_id": "hospital_1"
    },
    {
        "question": "What are the unique block codes that have available rooms?",
        "context": "CREATE TABLE room (blockcode VARCHAR, unavailable VARCHAR)",
        "answer": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "db_id": "hospital_1"
    },
    {
        "question": "How many different types of rooms are there?",
        "context": "CREATE TABLE room (roomtype VARCHAR)",
        "answer": "SELECT count(DISTINCT roomtype) FROM room",
        "db_id": "hospital_1"
    },
    {
        "question": "What is the names of the physicians who prescribe medication Thesisin?",
        "context": "CREATE TABLE physician (name VARCHAR, employeeid VARCHAR); CREATE TABLE prescribes (physician VARCHAR, medication VARCHAR); CREATE TABLE medication (code VARCHAR, name VARCHAR)",
        "answer": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "context": "CREATE TABLE medication (code VARCHAR, Brand VARCHAR); CREATE TABLE prescribes (physician VARCHAR, medication VARCHAR); CREATE TABLE physician (name VARCHAR, position VARCHAR, employeeid VARCHAR)",
        "answer": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the number of medications prescribed for each brand.",
        "context": "CREATE TABLE medication (name VARCHAR, brand VARCHAR, code VARCHAR); CREATE TABLE prescribes (medication VARCHAR)",
        "answer": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the name of physicians whose position title contains the word 'senior'.",
        "context": "CREATE TABLE physician (name VARCHAR, POSITION VARCHAR)",
        "answer": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the patient who has the most recent undergoing treatment?",
        "context": "CREATE TABLE undergoes (patient VARCHAR, dateundergoes VARCHAR)",
        "answer": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
        "context": "CREATE TABLE undergoes (patient VARCHAR, Stay VARCHAR); CREATE TABLE stay (StayID VARCHAR, room VARCHAR); CREATE TABLE patient (name VARCHAR, SSN VARCHAR)",
        "answer": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111",
        "db_id": "hospital_1"
    },
    {
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "context": "CREATE TABLE nurse (name VARCHAR)",
        "answer": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the names of nurses who are nursing an undergoing treatment.",
        "context": "CREATE TABLE undergoes (AssistingNurse VARCHAR); CREATE TABLE nurse (name VARCHAR, EmployeeID VARCHAR)",
        "answer": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID",
        "db_id": "hospital_1"
    },
    {
        "question": "List the names of all distinct medications, ordered in an alphabetical order.",
        "context": "CREATE TABLE medication (name VARCHAR)",
        "answer": "SELECT DISTINCT name FROM medication ORDER BY name",
        "db_id": "hospital_1"
    },
    {
        "question": "What are the names of the physician who prescribed the highest dose?",
        "context": "CREATE TABLE prescribes (physician VARCHAR, dose VARCHAR); CREATE TABLE physician (name VARCHAR, employeeid VARCHAR)",
        "answer": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "db_id": "hospital_1"
    },
    {
        "question": "List the physicians' employee ids together with their primary affiliation departments' ids.",
        "context": "CREATE TABLE affiliated_with (physician VARCHAR, department VARCHAR, primaryaffiliation VARCHAR)",
        "answer": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "db_id": "hospital_1"
    },
    {
        "question": "List the names of departments where some physicians are primarily affiliated with.",
        "context": "CREATE TABLE affiliated_with (department VARCHAR); CREATE TABLE department (name VARCHAR, departmentid VARCHAR)",
        "answer": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1",
        "db_id": "hospital_1"
    },
    {
        "question": "What nurses are on call with block floor 1 and block code 1? Tell me their names.",
        "context": "CREATE TABLE on_call (nurse VARCHAR, blockfloor VARCHAR, blockcode VARCHAR)",
        "answer": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1",
        "db_id": "hospital_1"
    },
    {
        "question": "What are the highest cost, lowest cost and average cost of procedures?",
        "context": "CREATE TABLE procedures (cost INTEGER)",
        "answer": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures",
        "db_id": "hospital_1"
    },
    {
        "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.",
        "context": "CREATE TABLE procedures (name VARCHAR, cost VARCHAR)",
        "answer": "SELECT name ,  cost FROM procedures ORDER BY cost DESC",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the three most expensive procedures.",
        "context": "CREATE TABLE procedures (name VARCHAR, cost VARCHAR)",
        "answer": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the physicians who are trained in a procedure that costs more than 5000.",
        "context": "CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE physician (name VARCHAR, employeeid VARCHAR); CREATE TABLE procedures (code VARCHAR, cost INTEGER)",
        "answer": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the physician who was trained in the most expensive procedure?",
        "context": "CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE physician (name VARCHAR, employeeid VARCHAR); CREATE TABLE procedures (code VARCHAR, cost VARCHAR)",
        "answer": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1",
        "db_id": "hospital_1"
    },
    {
        "question": "What is the average cost of procedures that physician John Wen was trained in?",
        "context": "CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE procedures (cost INTEGER, code VARCHAR); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR)",
        "answer": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the names of procedures which physician John Wen was trained in.",
        "context": "CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR); CREATE TABLE procedures (name VARCHAR, code VARCHAR)",
        "answer": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "db_id": "hospital_1"
    },
    {
        "question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
        "context": "CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE procedures (name VARCHAR, cost INTEGER); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR); CREATE TABLE procedures (name VARCHAR, code VARCHAR)",
        "answer": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
        "context": "CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE procedures (name VARCHAR, cost INTEGER); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR); CREATE TABLE procedures (name VARCHAR, code VARCHAR)",
        "answer": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.",
        "context": "CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE procedures (name VARCHAR, cost INTEGER); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR); CREATE TABLE procedures (name VARCHAR, code VARCHAR)",
        "answer": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.",
        "context": "CREATE TABLE affiliated_with (physician VARCHAR, department VARCHAR); CREATE TABLE department (DepartmentID VARCHAR, name VARCHAR); CREATE TABLE physician (name VARCHAR, EmployeeID VARCHAR)",
        "answer": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
        "context": "CREATE TABLE affiliated_with (physician VARCHAR, department VARCHAR); CREATE TABLE department (DepartmentID VARCHAR, name VARCHAR); CREATE TABLE physician (name VARCHAR, EmployeeID VARCHAR)",
        "answer": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the names of patients who are not using the medication of Procrastin-X.",
        "context": "CREATE TABLE Prescribes (Patient VARCHAR, Medication VARCHAR); CREATE TABLE Medication (Code VARCHAR, name VARCHAR); CREATE TABLE patient (name VARCHAR, SSN VARCHAR); CREATE TABLE patient (name VARCHAR)",
        "answer": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the number of patients who are not using the medication of Procrastin-X.",
        "context": "CREATE TABLE Prescribes (patient VARCHAR, Medication VARCHAR); CREATE TABLE patient (SSN VARCHAR); CREATE TABLE Medication (Code VARCHAR, name VARCHAR)",
        "answer": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "db_id": "hospital_1"
    },
    {
        "question": "How many appointments are there?",
        "context": "CREATE TABLE appointment (Id VARCHAR)",
        "answer": "SELECT count(*) FROM appointment",
        "db_id": "hospital_1"
    },
    {
        "question": "Find the names of nurses who are on call.",
        "context": "CREATE TABLE on_call (nurse VARCHAR); CREATE TABLE nurse (name VARCHAR, EmployeeID VARCHAR)",
        "answer": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse",
        "db_id": "hospital_1"
    },
    {
        "question": "How many ships are there?",
        "context": "CREATE TABLE ship (Id VARCHAR)",
        "answer": "SELECT count(*) FROM ship",
        "db_id": "ship_mission"
    },
    {
        "question": "List the name of ships in ascending order of tonnage.",
        "context": "CREATE TABLE ship (Name VARCHAR, Tonnage VARCHAR)",
        "answer": "SELECT Name FROM ship ORDER BY Tonnage ASC",
        "db_id": "ship_mission"
    },
    {
        "question": "What are the type and nationality of ships?",
        "context": "CREATE TABLE ship (TYPE VARCHAR, Nationality VARCHAR)",
        "answer": "SELECT TYPE ,  Nationality FROM ship",
        "db_id": "ship_mission"
    },
    {
        "question": "List the name of ships whose nationality is not \"United States\".",
        "context": "CREATE TABLE ship (Name VARCHAR, Nationality VARCHAR)",
        "answer": "SELECT Name FROM ship WHERE Nationality != \"United States\"",
        "db_id": "ship_mission"
    },
    {
        "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
        "context": "CREATE TABLE ship (Name VARCHAR, Nationality VARCHAR)",
        "answer": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"",
        "db_id": "ship_mission"
    },
    {
        "question": "What is the name of the ship with the largest tonnage?",
        "context": "CREATE TABLE ship (Name VARCHAR, Tonnage VARCHAR)",
        "answer": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1",
        "db_id": "ship_mission"
    },
    {
        "question": "Show different types of ships and the number of ships of each type.",
        "context": "CREATE TABLE ship (TYPE VARCHAR)",
        "answer": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE",
        "db_id": "ship_mission"
    },
    {
        "question": "Please show the most common type of ships.",
        "context": "CREATE TABLE ship (TYPE VARCHAR)",
        "answer": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "ship_mission"
    },
    {
        "question": "List the nations that have more than two ships.",
        "context": "CREATE TABLE ship (Nationality VARCHAR)",
        "answer": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2",
        "db_id": "ship_mission"
    },
    {
        "question": "Show different types of ships and the average tonnage of ships of each type.",
        "context": "CREATE TABLE ship (TYPE VARCHAR, Tonnage INTEGER)",
        "answer": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE",
        "db_id": "ship_mission"
    },
    {
        "question": "Show codes and fates of missions, and names of ships involved.",
        "context": "CREATE TABLE mission (Code VARCHAR, Fate VARCHAR, Ship_ID VARCHAR); CREATE TABLE ship (Name VARCHAR, Ship_ID VARCHAR)",
        "answer": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
        "db_id": "ship_mission"
    },
    {
        "question": "Show names of ships involved in a mission launched after 1928.",
        "context": "CREATE TABLE mission (Ship_ID VARCHAR, Launched_Year INTEGER); CREATE TABLE ship (Name VARCHAR, Ship_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928",
        "db_id": "ship_mission"
    },
    {
        "question": "Show the distinct fate of missions that involve ships with nationality \"United States\"",
        "context": "CREATE TABLE mission (Fate VARCHAR, Ship_ID VARCHAR); CREATE TABLE ship (Ship_ID VARCHAR, Nationality VARCHAR)",
        "answer": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"",
        "db_id": "ship_mission"
    },
    {
        "question": "List the name of ships that are not involved in any mission",
        "context": "CREATE TABLE mission (Name VARCHAR, Ship_ID VARCHAR); CREATE TABLE ship (Name VARCHAR, Ship_ID VARCHAR)",
        "answer": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)",
        "db_id": "ship_mission"
    },
    {
        "question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
        "context": "CREATE TABLE ship (TYPE VARCHAR, Tonnage INTEGER)",
        "answer": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000",
        "db_id": "ship_mission"
    },
    {
        "question": "Find the number of students in total.",
        "context": "CREATE TABLE list (Id VARCHAR)",
        "answer": "SELECT count(*) FROM list",
        "db_id": "student_1"
    },
    {
        "question": "Find the last names of students studying in room 111.",
        "context": "CREATE TABLE list (lastname VARCHAR, classroom VARCHAR)",
        "answer": "SELECT lastname FROM list WHERE classroom  =  111",
        "db_id": "student_1"
    },
    {
        "question": "Find the first names of students studying in room 108.",
        "context": "CREATE TABLE list (firstname VARCHAR, classroom VARCHAR)",
        "answer": "SELECT firstname FROM list WHERE classroom  =  108",
        "db_id": "student_1"
    },
    {
        "question": "What are the first names of students studying in room 107?",
        "context": "CREATE TABLE list (firstname VARCHAR, classroom VARCHAR)",
        "answer": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107",
        "db_id": "student_1"
    },
    {
        "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.",
        "context": "CREATE TABLE list (classroom VARCHAR, grade VARCHAR)",
        "answer": "SELECT DISTINCT classroom ,  grade FROM list",
        "db_id": "student_1"
    },
    {
        "question": "Which grade is studying in classroom 103?",
        "context": "CREATE TABLE list (grade VARCHAR, classroom VARCHAR)",
        "answer": "SELECT DISTINCT grade FROM list WHERE classroom  =  103",
        "db_id": "student_1"
    },
    {
        "question": "Find the grade studying in room 105.",
        "context": "CREATE TABLE list (grade VARCHAR, classroom VARCHAR)",
        "answer": "SELECT DISTINCT grade FROM list WHERE classroom  =  105",
        "db_id": "student_1"
    },
    {
        "question": "Which classrooms are used by grade 4?",
        "context": "CREATE TABLE list (classroom VARCHAR, grade VARCHAR)",
        "answer": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "db_id": "student_1"
    },
    {
        "question": "Which classrooms are used by grade 5?",
        "context": "CREATE TABLE list (classroom VARCHAR, grade VARCHAR)",
        "answer": "SELECT DISTINCT classroom FROM list WHERE grade  =  5",
        "db_id": "student_1"
    },
    {
        "question": "Find the last names of the teachers that teach fifth grade.",
        "context": "CREATE TABLE list (classroom VARCHAR); CREATE TABLE teachers (lastname VARCHAR, classroom VARCHAR)",
        "answer": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
        "db_id": "student_1"
    },
    {
        "question": "Find the first names of the teachers that teach first grade.",
        "context": "CREATE TABLE list (classroom VARCHAR); CREATE TABLE teachers (firstname VARCHAR, classroom VARCHAR)",
        "answer": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
        "db_id": "student_1"
    },
    {
        "question": "Find the first names of all the teachers that teach in classroom 110.",
        "context": "CREATE TABLE teachers (firstname VARCHAR, classroom VARCHAR)",
        "answer": "SELECT firstname FROM teachers WHERE classroom  =  110",
        "db_id": "student_1"
    },
    {
        "question": "Find the last names of teachers teaching in classroom 109.",
        "context": "CREATE TABLE teachers (lastname VARCHAR, classroom VARCHAR)",
        "answer": "SELECT lastname FROM teachers WHERE classroom  =  109",
        "db_id": "student_1"
    },
    {
        "question": "Report the first name and last name of all the teachers.",
        "context": "CREATE TABLE teachers (firstname VARCHAR, lastname VARCHAR)",
        "answer": "SELECT DISTINCT firstname ,  lastname FROM teachers",
        "db_id": "student_1"
    },
    {
        "question": "Report the first name and last name of all the students.",
        "context": "CREATE TABLE list (firstname VARCHAR, lastname VARCHAR)",
        "answer": "SELECT DISTINCT firstname ,  lastname FROM list",
        "db_id": "student_1"
    },
    {
        "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "context": "CREATE TABLE list (firstname VARCHAR, lastname VARCHAR, classroom VARCHAR); CREATE TABLE teachers (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)",
        "answer": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "db_id": "student_1"
    },
    {
        "question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "context": "CREATE TABLE list (firstname VARCHAR, lastname VARCHAR, classroom VARCHAR); CREATE TABLE teachers (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)",
        "answer": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"",
        "db_id": "student_1"
    },
    {
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "context": "CREATE TABLE teachers (firstname VARCHAR, lastname VARCHAR, classroom VARCHAR); CREATE TABLE list (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)",
        "answer": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "db_id": "student_1"
    },
    {
        "question": "Find the last names of all the teachers that teach GELL TAMI.",
        "context": "CREATE TABLE teachers (lastname VARCHAR, classroom VARCHAR); CREATE TABLE list (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)",
        "answer": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
        "db_id": "student_1"
    },
    {
        "question": "How many students does LORIA ONDERSMA teaches?",
        "context": "CREATE TABLE list (classroom VARCHAR); CREATE TABLE teachers (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)",
        "answer": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"",
        "db_id": "student_1"
    },
    {
        "question": "How many students does KAWA GORDON teaches?",
        "context": "CREATE TABLE list (classroom VARCHAR); CREATE TABLE teachers (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)",
        "answer": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"",
        "db_id": "student_1"
    },
    {
        "question": "Find the number of students taught by TARRING LEIA.",
        "context": "CREATE TABLE list (classroom VARCHAR); CREATE TABLE teachers (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)",
        "answer": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"",
        "db_id": "student_1"
    },
    {
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "context": "CREATE TABLE teachers (classroom VARCHAR); CREATE TABLE list (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)",
        "answer": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "db_id": "student_1"
    },
    {
        "question": "How many teachers does the student named MADLOCK RAY have?",
        "context": "CREATE TABLE teachers (classroom VARCHAR); CREATE TABLE list (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)",
        "answer": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
        "db_id": "student_1"
    },
    {
        "question": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
        "context": "CREATE TABLE list (firstname VARCHAR, lastname VARCHAR, classroom VARCHAR, grade VARCHAR); CREATE TABLE teachers (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)",
        "answer": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "db_id": "student_1"
    },
    {
        "question": "Find the last names of the students in third grade that are not taught by COVIN JEROME.",
        "context": "CREATE TABLE list (lastname VARCHAR, classroom VARCHAR, grade VARCHAR); CREATE TABLE teachers (classroom VARCHAR, lastname VARCHAR, firstname VARCHAR)",
        "answer": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
        "db_id": "student_1"
    },
    {
        "question": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
        "context": "CREATE TABLE list (grade VARCHAR, classroom VARCHAR)",
        "answer": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
        "db_id": "student_1"
    },
    {
        "question": "For each classroom, report the classroom number and the number of grades using it.",
        "context": "CREATE TABLE list (classroom VARCHAR, grade VARCHAR)",
        "answer": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "db_id": "student_1"
    },
    {
        "question": "Which classroom has the most students?",
        "context": "CREATE TABLE list (classroom VARCHAR)",
        "answer": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_1"
    },
    {
        "question": "Report the number of students in each classroom.",
        "context": "CREATE TABLE list (classroom VARCHAR)",
        "answer": "SELECT classroom ,  count(*) FROM list GROUP BY classroom",
        "db_id": "student_1"
    },
    {
        "question": "For each grade 0 classroom, report the total number of students.",
        "context": "CREATE TABLE list (classroom VARCHAR, grade VARCHAR)",
        "answer": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "db_id": "student_1"
    },
    {
        "question": "Report the total number of students for each fourth-grade classroom.",
        "context": "CREATE TABLE list (classroom VARCHAR, grade VARCHAR)",
        "answer": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "db_id": "student_1"
    },
    {
        "question": "Find the name of the teacher who teaches the largest number of students.",
        "context": "CREATE TABLE list (classroom VARCHAR); CREATE TABLE teachers (firstname VARCHAR, lastname VARCHAR, classroom VARCHAR)",
        "answer": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_1"
    },
    {
        "question": "Find the number of students in one classroom.",
        "context": "CREATE TABLE list (classroom VARCHAR)",
        "answer": "SELECT count(*) ,  classroom FROM list GROUP BY classroom",
        "db_id": "student_1"
    },
    {
        "question": "How many companies are headquartered in the US?",
        "context": "CREATE TABLE company (Headquarters VARCHAR)",
        "answer": "SELECT count(*) FROM company WHERE Headquarters  =  'USA'",
        "db_id": "company_employee"
    },
    {
        "question": "List the names of companies by ascending number of sales.",
        "context": "CREATE TABLE company (Name VARCHAR, Sales_in_Billion VARCHAR)",
        "answer": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC",
        "db_id": "company_employee"
    },
    {
        "question": "What are the headquarters and industries of all companies?",
        "context": "CREATE TABLE company (Headquarters VARCHAR, Industry VARCHAR)",
        "answer": "SELECT Headquarters ,  Industry FROM company",
        "db_id": "company_employee"
    },
    {
        "question": "Show the names of companies in the banking or retailing industry?",
        "context": "CREATE TABLE company (Name VARCHAR, Industry VARCHAR)",
        "answer": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"",
        "db_id": "company_employee"
    },
    {
        "question": "What is the maximum and minimum market value of companies?",
        "context": "CREATE TABLE company (Market_Value_in_Billion INTEGER)",
        "answer": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company",
        "db_id": "company_employee"
    },
    {
        "question": "What is the headquarter of the company with the largest sales?",
        "context": "CREATE TABLE company (Headquarters VARCHAR, Sales_in_Billion VARCHAR)",
        "answer": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1",
        "db_id": "company_employee"
    },
    {
        "question": "Show the most common headquarter for companies.",
        "context": "CREATE TABLE company (Headquarters VARCHAR)",
        "answer": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "company_employee"
    },
    {
        "question": "Show the headquarters that have at least two companies.",
        "context": "CREATE TABLE company (Headquarters VARCHAR)",
        "answer": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2",
        "db_id": "company_employee"
    },
    {
        "question": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.",
        "context": "CREATE TABLE company (Headquarters VARCHAR, Industry VARCHAR)",
        "answer": "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\"",
        "db_id": "company_employee"
    },
    {
        "question": "Show the names of companies and of employees.",
        "context": "CREATE TABLE company (Name VARCHAR, Company_ID VARCHAR); CREATE TABLE employment (People_ID VARCHAR, Company_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID",
        "db_id": "company_employee"
    },
    {
        "question": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "context": "CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE company (Name VARCHAR, Company_ID VARCHAR); CREATE TABLE employment (People_ID VARCHAR, Company_ID VARCHAR, Year_working VARCHAR)",
        "answer": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working",
        "db_id": "company_employee"
    },
    {
        "question": "Show the names of employees that work for companies with sales bigger than 200.",
        "context": "CREATE TABLE employment (People_ID VARCHAR, Company_ID VARCHAR); CREATE TABLE company (Company_ID VARCHAR, Sales_in_Billion INTEGER); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200",
        "db_id": "company_employee"
    },
    {
        "question": "Show the names of companies and the number of employees they have",
        "context": "CREATE TABLE company (Name VARCHAR, Company_ID VARCHAR); CREATE TABLE people (People_ID VARCHAR); CREATE TABLE employment (People_ID VARCHAR, Company_ID VARCHAR)",
        "answer": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",
        "db_id": "company_employee"
    },
    {
        "question": "List the names of people that are not employed by any company",
        "context": "CREATE TABLE employment (Name VARCHAR, People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)",
        "answer": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)",
        "db_id": "company_employee"
    },
    {
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "context": "CREATE TABLE company (name VARCHAR, Sales_in_Billion INTEGER, Profits_in_Billion VARCHAR)",
        "answer": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "db_id": "company_employee"
    },
    {
        "question": "How many film are there?",
        "context": "CREATE TABLE film (Id VARCHAR)",
        "answer": "SELECT count(*) FROM film",
        "db_id": "film_rank"
    },
    {
        "question": "List the distinct director of all films.",
        "context": "CREATE TABLE film (Director VARCHAR)",
        "answer": "SELECT DISTINCT Director FROM film",
        "db_id": "film_rank"
    },
    {
        "question": "What is the average ticket sales gross in dollars of films?",
        "context": "CREATE TABLE film (Gross_in_dollar INTEGER)",
        "answer": "SELECT avg(Gross_in_dollar) FROM film",
        "db_id": "film_rank"
    },
    {
        "question": "What are the low and high estimates of film markets?",
        "context": "CREATE TABLE film_market_estimation (Low_Estimate VARCHAR, High_Estimate VARCHAR)",
        "answer": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "db_id": "film_rank"
    },
    {
        "question": "What are the types of film market estimations in year 1995?",
        "context": "CREATE TABLE film_market_estimation (TYPE VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995",
        "db_id": "film_rank"
    },
    {
        "question": "What are the maximum and minimum number of cities in all markets.",
        "context": "CREATE TABLE market (Number_cities INTEGER)",
        "answer": "SELECT max(Number_cities) ,  min(Number_cities) FROM market",
        "db_id": "film_rank"
    },
    {
        "question": "How many markets have number of cities smaller than 300?",
        "context": "CREATE TABLE market (Number_cities INTEGER)",
        "answer": "SELECT count(*) FROM market WHERE Number_cities  <  300",
        "db_id": "film_rank"
    },
    {
        "question": "List all countries of markets in ascending alphabetical order.",
        "context": "CREATE TABLE market (Country VARCHAR)",
        "answer": "SELECT Country FROM market ORDER BY Country ASC",
        "db_id": "film_rank"
    },
    {
        "question": "List all countries of markets in descending order of number of cities.",
        "context": "CREATE TABLE market (Country VARCHAR, Number_cities VARCHAR)",
        "answer": "SELECT Country FROM market ORDER BY Number_cities DESC",
        "db_id": "film_rank"
    },
    {
        "question": "Please show the titles of films and the types of market estimations.",
        "context": "CREATE TABLE film (Title VARCHAR, Film_ID VARCHAR); CREATE TABLE film_market_estimation (Type VARCHAR, Film_ID VARCHAR)",
        "answer": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID",
        "db_id": "film_rank"
    },
    {
        "question": "Show the distinct director of films with market estimation in the year of 1995.",
        "context": "CREATE TABLE film (Director VARCHAR, Film_ID VARCHAR); CREATE TABLE film_market_estimation (Film_ID VARCHAR, Year VARCHAR)",
        "answer": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995",
        "db_id": "film_rank"
    },
    {
        "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?",
        "context": "CREATE TABLE market (Number_cities INTEGER, Market_ID VARCHAR); CREATE TABLE film_market_estimation (Market_ID VARCHAR, Low_Estimate INTEGER)",
        "answer": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
        "db_id": "film_rank"
    },
    {
        "question": "Please list the countries and years of film market estimations.",
        "context": "CREATE TABLE film_market_estimation (Year VARCHAR, Market_ID VARCHAR); CREATE TABLE market (Country VARCHAR, Market_ID VARCHAR)",
        "answer": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",
        "db_id": "film_rank"
    },
    {
        "question": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.",
        "context": "CREATE TABLE film_market_estimation (Year VARCHAR, Market_ID VARCHAR); CREATE TABLE market (Market_ID VARCHAR, Country VARCHAR)",
        "answer": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC",
        "db_id": "film_rank"
    },
    {
        "question": "List the studios of each film and the number of films produced by that studio.",
        "context": "CREATE TABLE film (Studio VARCHAR)",
        "answer": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio",
        "db_id": "film_rank"
    },
    {
        "question": "List the name of film studio that have the most number of films.",
        "context": "CREATE TABLE film (Studio VARCHAR)",
        "answer": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "film_rank"
    },
    {
        "question": "List the names of studios that have at least two films.",
        "context": "CREATE TABLE film (Studio VARCHAR)",
        "answer": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2",
        "db_id": "film_rank"
    },
    {
        "question": "List the title of films that do not have any market estimation.",
        "context": "CREATE TABLE film_market_estimation (Title VARCHAR, Film_ID VARCHAR); CREATE TABLE film (Title VARCHAR, Film_ID VARCHAR)",
        "answer": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
        "db_id": "film_rank"
    },
    {
        "question": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
        "context": "CREATE TABLE film (Studio VARCHAR, Director VARCHAR)",
        "answer": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "db_id": "film_rank"
    },
    {
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "context": "CREATE TABLE film (title VARCHAR, Studio VARCHAR)",
        "answer": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "db_id": "film_rank"
    },
    {
        "question": "Show the studios that have not produced films with director \"Walter Hill\".",
        "context": "CREATE TABLE film (Studio VARCHAR, Director VARCHAR)",
        "answer": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "db_id": "film_rank"
    },
    {
        "question": "List the studios which average gross is above 4500000.",
        "context": "CREATE TABLE film (Studio VARCHAR, Gross_in_dollar INTEGER)",
        "answer": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
        "db_id": "film_rank"
    },
    {
        "question": "What is the title of the film that has the highest high market estimation.",
        "context": "CREATE TABLE film_market_estimation (Film_ID VARCHAR); CREATE TABLE film (Film_ID VARCHAR)",
        "answer": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
        "db_id": "film_rank"
    },
    {
        "question": "What are the titles and directors of the films were never presented in China?",
        "context": "CREATE TABLE film (title VARCHAR, director VARCHAR, film_id VARCHAR, country VARCHAR); CREATE TABLE market (Market_ID VARCHAR); CREATE TABLE film_market_estimation (market_id VARCHAR)",
        "answer": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')",
        "db_id": "film_rank"
    },
    {
        "question": "How many calendar items do we have?",
        "context": "CREATE TABLE Ref_calendar (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Ref_calendar",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show all calendar dates and day Numbers.",
        "context": "CREATE TABLE Ref_calendar (calendar_date VARCHAR, day_Number VARCHAR)",
        "answer": "SELECT calendar_date ,  day_Number FROM Ref_calendar",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the number of document types.",
        "context": "CREATE TABLE Ref_document_types (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Ref_document_types",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "List all document type codes and document type names.",
        "context": "CREATE TABLE Ref_document_types (document_type_code VARCHAR, document_type_name VARCHAR)",
        "answer": "SELECT document_type_code ,  document_type_name FROM Ref_document_types",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What is the name and description for document type code RV?",
        "context": "CREATE TABLE Ref_document_types (document_type_name VARCHAR, document_type_description VARCHAR, document_type_code VARCHAR)",
        "answer": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What is the document type code for document type \"Paper\"?",
        "context": "CREATE TABLE Ref_document_types (document_type_code VARCHAR, document_type_name VARCHAR)",
        "answer": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the number of documents with document type code CV or BK.",
        "context": "CREATE TABLE All_documents (document_type_code VARCHAR)",
        "answer": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What is the date when the document \"Marry CV\" was stored?",
        "context": "CREATE TABLE All_documents (date_stored VARCHAR, Document_name VARCHAR)",
        "answer": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What is the day Number and date of all the documents?",
        "context": "CREATE TABLE All_documents (Date_Stored VARCHAR, date_stored VARCHAR); CREATE TABLE Ref_calendar (day_Number VARCHAR, calendar_date VARCHAR)",
        "answer": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What is the document type name for the document with name \"How to read a book\"?",
        "context": "CREATE TABLE Ref_document_types (document_type_name VARCHAR, document_type_code VARCHAR); CREATE TABLE All_documents (document_type_code VARCHAR, document_name VARCHAR)",
        "answer": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the number of locations.",
        "context": "CREATE TABLE Ref_locations (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Ref_locations",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "List all location codes and location names.",
        "context": "CREATE TABLE Ref_locations (location_code VARCHAR, location_name VARCHAR)",
        "answer": "SELECT location_code ,  location_name FROM Ref_locations",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What are the name and description for location code x?",
        "context": "CREATE TABLE Ref_locations (location_name VARCHAR, location_description VARCHAR, location_code VARCHAR)",
        "answer": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What is the location code for the country \"Canada\"?",
        "context": "CREATE TABLE Ref_locations (location_code VARCHAR, location_name VARCHAR)",
        "answer": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "How many roles are there?",
        "context": "CREATE TABLE ROLES (Id VARCHAR)",
        "answer": "SELECT count(*) FROM ROLES",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "List all role codes, role names, and role descriptions.",
        "context": "CREATE TABLE ROLES (role_code VARCHAR, role_name VARCHAR, role_description VARCHAR)",
        "answer": "SELECT role_code ,  role_name ,  role_description FROM ROLES",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What are the name and description for role code \"MG\"?",
        "context": "CREATE TABLE ROLES (role_name VARCHAR, role_description VARCHAR, role_code VARCHAR)",
        "answer": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the description for role name \"Proof Reader\".",
        "context": "CREATE TABLE ROLES (role_description VARCHAR, role_name VARCHAR)",
        "answer": "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the name, role code, and date of birth for the employee with name 'Armani'.",
        "context": "CREATE TABLE Employees (employee_name VARCHAR, role_code VARCHAR, date_of_birth VARCHAR, employee_Name VARCHAR)",
        "answer": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What is the id for the employee called Ebba?",
        "context": "CREATE TABLE Employees (employee_ID VARCHAR, employee_name VARCHAR)",
        "answer": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the names of all the employees with role \"HR\".",
        "context": "CREATE TABLE Employees (employee_name VARCHAR, role_code VARCHAR)",
        "answer": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show all role codes and the number of employees in each role.",
        "context": "CREATE TABLE Employees (role_code VARCHAR)",
        "answer": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What is the role code with the largest number of employees?",
        "context": "CREATE TABLE Employees (role_code VARCHAR)",
        "answer": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show all role codes with at least 3 employees.",
        "context": "CREATE TABLE Employees (role_code VARCHAR)",
        "answer": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the role code with the least employees.",
        "context": "CREATE TABLE Employees (role_code VARCHAR)",
        "answer": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What is the role name and role description for employee called Ebba?",
        "context": "CREATE TABLE Employees (role_code VARCHAR, employee_name VARCHAR); CREATE TABLE ROLES (role_name VARCHAR, role_description VARCHAR, role_code VARCHAR)",
        "answer": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the names of employees with role name Editor.",
        "context": "CREATE TABLE ROLES (role_code VARCHAR, role_name VARCHAR); CREATE TABLE Employees (employee_name VARCHAR, role_code VARCHAR)",
        "answer": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
        "context": "CREATE TABLE Employees (employee_id VARCHAR, role_code VARCHAR); CREATE TABLE ROLES (role_code VARCHAR, role_name VARCHAR)",
        "answer": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What are the different location codes for documents?",
        "context": "CREATE TABLE Document_locations (location_code VARCHAR)",
        "answer": "SELECT DISTINCT location_code FROM Document_locations",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the location name for document \"Robin CV\".",
        "context": "CREATE TABLE Ref_locations (location_name VARCHAR, location_code VARCHAR); CREATE TABLE All_documents (document_id VARCHAR, document_name VARCHAR); CREATE TABLE Document_locations (document_id VARCHAR, location_code VARCHAR)",
        "answer": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the location code, the starting date and ending data in that location for all the documents.",
        "context": "CREATE TABLE Document_locations (location_code VARCHAR, date_in_location_from VARCHAR, date_in_locaton_to VARCHAR)",
        "answer": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?",
        "context": "CREATE TABLE All_documents (document_id VARCHAR, document_name VARCHAR); CREATE TABLE Document_locations (date_in_location_from VARCHAR, date_in_locaton_to VARCHAR, document_id VARCHAR)",
        "answer": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the location codes and the number of documents in each location.",
        "context": "CREATE TABLE Document_locations (location_code VARCHAR)",
        "answer": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What is the location code with the most documents?",
        "context": "CREATE TABLE Document_locations (location_code VARCHAR)",
        "answer": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the location codes with at least 3 documents.",
        "context": "CREATE TABLE Document_locations (location_code VARCHAR)",
        "answer": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the location name and code with the least documents.",
        "context": "CREATE TABLE Document_locations (location_code VARCHAR); CREATE TABLE Ref_locations (location_name VARCHAR, location_code VARCHAR)",
        "answer": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "context": "CREATE TABLE Employees (employee_name VARCHAR, employee_id VARCHAR); CREATE TABLE Documents_to_be_destroyed (Destruction_Authorised_by_Employee_ID VARCHAR, Destroyed_by_Employee_ID VARCHAR)",
        "answer": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the id of each employee and the number of document destruction authorised by that employee.",
        "context": "CREATE TABLE Documents_to_be_destroyed (Destruction_Authorised_by_Employee_ID VARCHAR)",
        "answer": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the employee ids and the number of documents destroyed by each employee.",
        "context": "CREATE TABLE Documents_to_be_destroyed (Destroyed_by_Employee_ID VARCHAR)",
        "answer": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the ids of the employees who don't authorize destruction for any document.",
        "context": "CREATE TABLE Documents_to_be_destroyed (employee_id VARCHAR, Destruction_Authorised_by_Employee_ID VARCHAR); CREATE TABLE Employees (employee_id VARCHAR, Destruction_Authorised_by_Employee_ID VARCHAR)",
        "answer": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the ids of all employees who have authorized destruction.",
        "context": "CREATE TABLE Documents_to_be_destroyed (Destruction_Authorised_by_Employee_ID VARCHAR)",
        "answer": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the ids of all employees who have destroyed a document.",
        "context": "CREATE TABLE Documents_to_be_destroyed (Destroyed_by_Employee_ID VARCHAR)",
        "answer": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the ids of all employees who don't destroy any document.",
        "context": "CREATE TABLE Employees (employee_id VARCHAR, Destroyed_by_Employee_ID VARCHAR); CREATE TABLE Documents_to_be_destroyed (employee_id VARCHAR, Destroyed_by_Employee_ID VARCHAR)",
        "answer": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.",
        "context": "CREATE TABLE Documents_to_be_destroyed (Destroyed_by_Employee_ID VARCHAR, Destruction_Authorised_by_Employee_ID VARCHAR)",
        "answer": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "What are the names of all clubs?",
        "context": "CREATE TABLE club (clubname VARCHAR)",
        "answer": "SELECT clubname FROM club",
        "db_id": "club_1"
    },
    {
        "question": "How many students are there?",
        "context": "CREATE TABLE STUDENT (Id VARCHAR)",
        "answer": "SELECT count(*) FROM student",
        "db_id": "club_1"
    },
    {
        "question": "What are the first names of all the students?",
        "context": "CREATE TABLE student (fname VARCHAR)",
        "answer": "SELECT DISTINCT fname FROM student",
        "db_id": "club_1"
    },
    {
        "question": "Find the last names of the members of the club \"Bootup Baltimore\".",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (lname VARCHAR, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)",
        "answer": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
        "db_id": "club_1"
    },
    {
        "question": "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (lname VARCHAR, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)",
        "answer": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"",
        "db_id": "club_1"
    },
    {
        "question": "How many members does the club \"Tennis Club\" has?",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE student (stuid VARCHAR)",
        "answer": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "db_id": "club_1"
    },
    {
        "question": "Find the number of members of club \"Pen and Paper Gaming\".",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE student (stuid VARCHAR)",
        "answer": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
        "db_id": "club_1"
    },
    {
        "question": "How many clubs does \"Linda Smith\" belong to?",
        "context": "CREATE TABLE student (stuid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubid VARCHAR)",
        "answer": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
        "db_id": "club_1"
    },
    {
        "question": "Find the number of clubs where \"Tracy Kim\" is a member.",
        "context": "CREATE TABLE student (stuid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubid VARCHAR)",
        "answer": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
        "db_id": "club_1"
    },
    {
        "question": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (fname VARCHAR, lname VARCHAR, stuid VARCHAR, sex VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)",
        "answer": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "db_id": "club_1"
    },
    {
        "question": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (fname VARCHAR, lname VARCHAR, stuid VARCHAR, sex VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)",
        "answer": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"",
        "db_id": "club_1"
    },
    {
        "question": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE student (fname VARCHAR, lname VARCHAR, stuid VARCHAR, major VARCHAR)",
        "answer": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"",
        "db_id": "club_1"
    },
    {
        "question": "Which club has the most members majoring in \"600\"?",
        "context": "CREATE TABLE student (stuid VARCHAR, major VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR)",
        "answer": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
        "db_id": "club_1"
    },
    {
        "question": "Find the name of the club that has the most female students.",
        "context": "CREATE TABLE student (stuid VARCHAR, sex VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR)",
        "answer": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
        "db_id": "club_1"
    },
    {
        "question": "What is the description of the club named \"Tennis Club\"?",
        "context": "CREATE TABLE club (clubdesc VARCHAR, clubname VARCHAR)",
        "answer": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"",
        "db_id": "club_1"
    },
    {
        "question": "Find the description of the club \"Pen and Paper Gaming\".",
        "context": "CREATE TABLE club (clubdesc VARCHAR, clubname VARCHAR)",
        "answer": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"",
        "db_id": "club_1"
    },
    {
        "question": "What is the location of the club named \"Tennis Club\"?",
        "context": "CREATE TABLE club (clublocation VARCHAR, clubname VARCHAR)",
        "answer": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"",
        "db_id": "club_1"
    },
    {
        "question": "Find the location of the club \"Pen and Paper Gaming\".",
        "context": "CREATE TABLE club (clublocation VARCHAR, clubname VARCHAR)",
        "answer": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"",
        "db_id": "club_1"
    },
    {
        "question": "Where is the club \"Hopkins Student Enterprises\" located?",
        "context": "CREATE TABLE club (clublocation VARCHAR, clubname VARCHAR)",
        "answer": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"",
        "db_id": "club_1"
    },
    {
        "question": "Find the name of all the clubs at \"AKW\".",
        "context": "CREATE TABLE club (clubname VARCHAR, clublocation VARCHAR)",
        "answer": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"",
        "db_id": "club_1"
    },
    {
        "question": "How many clubs are located at \"HHH\"?",
        "context": "CREATE TABLE club (clublocation VARCHAR)",
        "answer": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"",
        "db_id": "club_1"
    },
    {
        "question": "What are the first and last name of the president of the club \"Bootup Baltimore\"?",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (fname VARCHAR, lname VARCHAR, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR, position VARCHAR)",
        "answer": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "db_id": "club_1"
    },
    {
        "question": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (fname VARCHAR, lname VARCHAR, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR, position VARCHAR)",
        "answer": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "db_id": "club_1"
    },
    {
        "question": "How many different roles are there in the club \"Bootup Baltimore\"?",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE member_of_club (position VARCHAR, clubid VARCHAR)",
        "answer": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"",
        "db_id": "club_1"
    },
    {
        "question": "How many members of \"Bootup Baltimore\" are older than 18?",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (stuid VARCHAR, age VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)",
        "answer": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18",
        "db_id": "club_1"
    },
    {
        "question": "How many members of club \"Bootup Baltimore\" are younger than 18?",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (stuid VARCHAR, age VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)",
        "answer": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18",
        "db_id": "club_1"
    },
    {
        "question": "Find the names of all the clubs that have at least a member from the city with city code \"BAL\".",
        "context": "CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR); CREATE TABLE student (stuid VARCHAR, city_code VARCHAR)",
        "answer": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"",
        "db_id": "club_1"
    },
    {
        "question": "Find the names of the clubs that have at least a member from the city with city code \"HOU\".",
        "context": "CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR); CREATE TABLE student (stuid VARCHAR, city_code VARCHAR)",
        "answer": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"",
        "db_id": "club_1"
    },
    {
        "question": "How many clubs does the student named \"Eric Tai\" belong to?",
        "context": "CREATE TABLE student (stuid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR)",
        "answer": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "db_id": "club_1"
    },
    {
        "question": "List the clubs having \"Davis Steven\" as a member.",
        "context": "CREATE TABLE student (stuid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR)",
        "answer": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
        "db_id": "club_1"
    },
    {
        "question": "List the clubs that have at least a member with advisor \"1121\".",
        "context": "CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR); CREATE TABLE student (stuid VARCHAR, advisor VARCHAR)",
        "answer": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121",
        "db_id": "club_1"
    },
    {
        "question": "What is the average age of the members of the club \"Bootup Baltimore\"?",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)",
        "answer": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
        "db_id": "club_1"
    },
    {
        "question": "Find the average age of members of the club \"Hopkins Student Enterprises\".",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)",
        "answer": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"",
        "db_id": "club_1"
    },
    {
        "question": "Retrieve the average age of members of the club \"Tennis Club\".",
        "context": "CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)",
        "answer": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "db_id": "club_1"
    },
    {
        "question": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?",
        "context": "CREATE TABLE grants (grant_amount VARCHAR, grant_end_date INTEGER); CREATE TABLE Grants (grant_amount VARCHAR, grant_id VARCHAR); CREATE TABLE Documents (grant_id VARCHAR, sent_date INTEGER)",
        "answer": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "List the project details of the project both producing patent and paper as outcomes.",
        "context": "CREATE TABLE Project_outcomes (project_id VARCHAR, outcome_code VARCHAR); CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR)",
        "answer": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "What is the total grant amount of the organisations described as research?",
        "context": "CREATE TABLE organisation_Types (organisation_type VARCHAR, organisation_type_description VARCHAR); CREATE TABLE Grants (organisation_id VARCHAR); CREATE TABLE Organisations (organisation_id VARCHAR, organisation_type VARCHAR)",
        "answer": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "List from which date and to which date these staff work: project staff of the project which hires the most staffs",
        "context": "CREATE TABLE Project_Staff (date_from VARCHAR, date_to VARCHAR, project_id VARCHAR, role_code VARCHAR)",
        "answer": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "Find the organisation ids and details of the organisations which are involved in",
        "context": "CREATE TABLE Grants (organisation_id VARCHAR, grant_amount INTEGER); CREATE TABLE Organisations (organisation_id VARCHAR, organisation_details VARCHAR)",
        "answer": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "What is the organisation type and id of the organisation which has the most number of research staff?",
        "context": "CREATE TABLE Research_Staff (employer_organisation_id VARCHAR); CREATE TABLE Organisations (organisation_type VARCHAR, organisation_id VARCHAR)",
        "answer": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "Which organisation type hires most research staff?",
        "context": "CREATE TABLE Research_Staff (employer_organisation_id VARCHAR); CREATE TABLE Organisations (organisation_type VARCHAR, organisation_id VARCHAR)",
        "answer": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described",
        "context": "CREATE TABLE organisation_Types (organisation_type VARCHAR, organisation_type_description VARCHAR); CREATE TABLE Grants (grant_id VARCHAR, organisation_id VARCHAR, grant_amount VARCHAR); CREATE TABLE Organisations (organisation_id VARCHAR, organisation_type VARCHAR); CREATE TABLE documents (sent_date VARCHAR, grant_id VARCHAR)",
        "answer": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?",
        "context": "CREATE TABLE Documents (response_received_date VARCHAR, document_type_code VARCHAR, grant_id VARCHAR); CREATE TABLE Document_Types (document_type_code VARCHAR, document_description VARCHAR); CREATE TABLE Grants (grant_id VARCHAR, grant_amount VARCHAR)",
        "answer": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "List the project details of the projects which did not hire any staff for a researcher role.",
        "context": "CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR, role_code VARCHAR); CREATE TABLE Project_Staff (project_details VARCHAR, project_id VARCHAR, role_code VARCHAR)",
        "answer": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",
        "context": "CREATE TABLE Projects (project_id VARCHAR, project_details VARCHAR); CREATE TABLE Project_outcomes (project_id VARCHAR); CREATE TABLE Tasks (task_details VARCHAR, task_id VARCHAR, project_id VARCHAR)",
        "answer": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "When do all the researcher role staff start to work, and when do they stop working?",
        "context": "CREATE TABLE Project_Staff (date_from VARCHAR, date_to VARCHAR, role_code VARCHAR)",
        "answer": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "How many kinds of roles are there for the staff?",
        "context": "CREATE TABLE Project_Staff (role_code VARCHAR)",
        "answer": "SELECT count(DISTINCT role_code) FROM Project_Staff",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "What is the total amount of grants given by each organisations? Also list the organisation id.",
        "context": "CREATE TABLE Grants (organisation_id VARCHAR, grant_amount INTEGER)",
        "answer": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "List the project details of the projects with the research outcome described with the substring 'Published'.",
        "context": "CREATE TABLE Research_outcomes (outcome_code VARCHAR, outcome_description VARCHAR); CREATE TABLE Project_outcomes (project_id VARCHAR, outcome_code VARCHAR); CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR)",
        "answer": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "How many staff does each project has? List the project id and the number in an ascending order.",
        "context": "CREATE TABLE Project_Staff (project_id VARCHAR); CREATE TABLE Projects (project_id VARCHAR)",
        "answer": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "What is the complete description of the researcher role.",
        "context": "CREATE TABLE Staff_Roles (role_description VARCHAR, role_code VARCHAR)",
        "answer": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "When did the first staff for the projects started working?",
        "context": "CREATE TABLE Project_Staff (date_from VARCHAR)",
        "answer": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "Which project made the most number of outcomes? List the project details and the project id.",
        "context": "CREATE TABLE Project_outcomes (project_id VARCHAR); CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR)",
        "answer": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "Which projects have no outcome? List the project details.",
        "context": "CREATE TABLE Project_outcomes (project_details VARCHAR, project_id VARCHAR); CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR)",
        "answer": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
        "context": "CREATE TABLE Organisations (organisation_id VARCHAR, organisation_type VARCHAR, organisation_details VARCHAR); CREATE TABLE Research_Staff (employer_organisation_id VARCHAR)",
        "answer": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "Show the role description and the id of the project staff involved in most number of project outcomes?",
        "context": "CREATE TABLE Project_outcomes (project_id VARCHAR); CREATE TABLE Project_Staff (staff_id VARCHAR, role_code VARCHAR, project_id VARCHAR); CREATE TABLE Staff_Roles (role_description VARCHAR, role_code VARCHAR)",
        "answer": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "Which document type is described with the prefix 'Initial'?",
        "context": "CREATE TABLE Document_Types (document_type_code VARCHAR, document_description VARCHAR)",
        "answer": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
        "context": "CREATE TABLE Grants (grant_start_date VARCHAR, grant_id VARCHAR); CREATE TABLE Document_Types (document_type_code VARCHAR, document_description VARCHAR); CREATE TABLE Documents (grant_id VARCHAR, document_type_code VARCHAR)",
        "answer": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "How many documents can one grant have at most? List the grant id and number.",
        "context": "CREATE TABLE Documents (grant_id VARCHAR)",
        "answer": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "Find the organisation type description of the organisation detailed as 'quo'.",
        "context": "CREATE TABLE Organisations (organisation_type VARCHAR, organisation_details VARCHAR); CREATE TABLE organisation_Types (organisation_type_description VARCHAR, organisation_type VARCHAR)",
        "answer": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
        "context": "CREATE TABLE organisation_Types (organisation_type VARCHAR, organisation_type_description VARCHAR); CREATE TABLE Organisations (organisation_type VARCHAR)",
        "answer": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "How many Patent outcomes are generated from all the projects?",
        "context": "CREATE TABLE Project_outcomes (outcome_code VARCHAR)",
        "answer": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?",
        "context": "CREATE TABLE Project_Staff (role_code VARCHAR, date_from VARCHAR)",
        "answer": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "What is the last date of the staff leaving the projects?",
        "context": "CREATE TABLE Project_Staff (date_to VARCHAR)",
        "answer": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "What are the result description of the project whose detail is 'sint'?",
        "context": "CREATE TABLE Project_outcomes (outcome_code VARCHAR, project_id VARCHAR); CREATE TABLE Research_outcomes (outcome_description VARCHAR, outcome_code VARCHAR); CREATE TABLE Projects (project_id VARCHAR, project_details VARCHAR)",
        "answer": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "List the organisation id with the maximum outcome count, and the count.",
        "context": "CREATE TABLE Project_outcomes (project_id VARCHAR); CREATE TABLE Projects (organisation_id VARCHAR, project_id VARCHAR)",
        "answer": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "List the project details of the projects launched by the organisation",
        "context": "CREATE TABLE Projects (project_details VARCHAR, organisation_id VARCHAR)",
        "answer": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "List the research staff details, and order in ascending order.",
        "context": "CREATE TABLE Research_Staff (staff_details VARCHAR)",
        "answer": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "How many tasks are there in total?",
        "context": "CREATE TABLE Tasks (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Tasks",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "How many tasks does each project have? List the task count and the project detail.",
        "context": "CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR); CREATE TABLE Tasks (project_id VARCHAR)",
        "answer": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "What are the staff roles of the staff who",
        "context": "CREATE TABLE Project_Staff (role_code VARCHAR, date_from VARCHAR, date_to VARCHAR)",
        "answer": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "What are the descriptions of all the project outcomes?",
        "context": "CREATE TABLE Research_outcomes (outcome_description VARCHAR, outcome_code VARCHAR); CREATE TABLE Project_outcomes (outcome_code VARCHAR)",
        "answer": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "Which role is most common for the staff?",
        "context": "CREATE TABLE Project_Staff (role_code VARCHAR)",
        "answer": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "How many friends does Dan have?",
        "context": "CREATE TABLE PersonFriend (friend VARCHAR, name VARCHAR); CREATE TABLE Person (name VARCHAR)",
        "answer": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "db_id": "network_2"
    },
    {
        "question": "How many females does this network has?",
        "context": "CREATE TABLE Person (gender VARCHAR)",
        "answer": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "db_id": "network_2"
    },
    {
        "question": "What is the average age for all person?",
        "context": "CREATE TABLE Person (age INTEGER)",
        "answer": "SELECT avg(age) FROM Person",
        "db_id": "network_2"
    },
    {
        "question": "How many different cities are they from?",
        "context": "CREATE TABLE Person (city VARCHAR)",
        "answer": "SELECT count(DISTINCT city) FROM Person",
        "db_id": "network_2"
    },
    {
        "question": "How many type of jobs do they have?",
        "context": "CREATE TABLE Person (job VARCHAR)",
        "answer": "SELECT count(DISTINCT job) FROM Person",
        "db_id": "network_2"
    },
    {
        "question": "Who is the oldest person?",
        "context": "CREATE TABLE Person (name VARCHAR, age INTEGER); CREATE TABLE person (name VARCHAR, age INTEGER)",
        "answer": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)",
        "db_id": "network_2"
    },
    {
        "question": "Who is the oldest person whose job is student?",
        "context": "CREATE TABLE person (name VARCHAR, job VARCHAR, age INTEGER); CREATE TABLE Person (name VARCHAR, job VARCHAR, age INTEGER)",
        "answer": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
        "db_id": "network_2"
    },
    {
        "question": "Who is the youngest male?",
        "context": "CREATE TABLE Person (name VARCHAR, gender VARCHAR, age INTEGER); CREATE TABLE person (name VARCHAR, gender VARCHAR, age INTEGER)",
        "answer": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
        "db_id": "network_2"
    },
    {
        "question": "How old is the doctor named Zach?",
        "context": "CREATE TABLE Person (age VARCHAR, job VARCHAR, name VARCHAR)",
        "answer": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'",
        "db_id": "network_2"
    },
    {
        "question": "Who is the person whose age is below 30?",
        "context": "CREATE TABLE Person (name VARCHAR, age INTEGER)",
        "answer": "SELECT name FROM Person WHERE age  <  30",
        "db_id": "network_2"
    },
    {
        "question": "How many people whose age is greater 30 and job is engineer?",
        "context": "CREATE TABLE Person (age VARCHAR, job VARCHAR)",
        "answer": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
        "db_id": "network_2"
    },
    {
        "question": "What is the average age for each gender?",
        "context": "CREATE TABLE Person (gender VARCHAR, age INTEGER)",
        "answer": "SELECT avg(age) ,  gender FROM Person GROUP BY gender",
        "db_id": "network_2"
    },
    {
        "question": "What is average age for different job title?",
        "context": "CREATE TABLE Person (job VARCHAR, age INTEGER)",
        "answer": "SELECT avg(age) ,  job FROM Person GROUP BY job",
        "db_id": "network_2"
    },
    {
        "question": "What is average age of male for different job title?",
        "context": "CREATE TABLE Person (job VARCHAR, age INTEGER, gender VARCHAR)",
        "answer": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
        "db_id": "network_2"
    },
    {
        "question": "What is minimum age for different job title?",
        "context": "CREATE TABLE Person (job VARCHAR, age INTEGER)",
        "answer": "SELECT min(age) ,  job FROM Person GROUP BY job",
        "db_id": "network_2"
    },
    {
        "question": "Find the number of people who is under 40 for each gender.",
        "context": "CREATE TABLE Person (gender VARCHAR, age INTEGER)",
        "answer": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender",
        "db_id": "network_2"
    },
    {
        "question": "Find the name of people whose age is greater than any engineer sorted by their age.",
        "context": "CREATE TABLE Person (name VARCHAR, age INTEGER, job VARCHAR); CREATE TABLE person (name VARCHAR, age INTEGER, job VARCHAR)",
        "answer": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "db_id": "network_2"
    },
    {
        "question": "Find the number of people whose age is greater than all engineers.",
        "context": "CREATE TABLE Person (age INTEGER, job VARCHAR); CREATE TABLE person (age INTEGER, job VARCHAR)",
        "answer": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "db_id": "network_2"
    },
    {
        "question": "list the name, job title of all people ordered by their names.",
        "context": "CREATE TABLE Person (name VARCHAR, job VARCHAR)",
        "answer": "SELECT name ,  job FROM Person ORDER BY name",
        "db_id": "network_2"
    },
    {
        "question": "Find the names of all person sorted in the descending order using age.",
        "context": "CREATE TABLE Person (name VARCHAR, age VARCHAR)",
        "answer": "SELECT name FROM Person ORDER BY age DESC",
        "db_id": "network_2"
    },
    {
        "question": "Find the name and age of all males in order of their age.",
        "context": "CREATE TABLE Person (name VARCHAR, gender VARCHAR, age VARCHAR)",
        "answer": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "db_id": "network_2"
    },
    {
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "context": "CREATE TABLE Person (name VARCHAR, age VARCHAR); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR)",
        "answer": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "db_id": "network_2"
    },
    {
        "question": "Find the name and age of the person who is a friend of Dan or Alice.",
        "context": "CREATE TABLE Person (name VARCHAR, age VARCHAR); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR)",
        "answer": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "db_id": "network_2"
    },
    {
        "question": "Find the name of the person who has friends with age above 40 and under age 30?",
        "context": "CREATE TABLE Person (name VARCHAR, age INTEGER); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (name VARCHAR)",
        "answer": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
        "db_id": "network_2"
    },
    {
        "question": "Find the name of the person who has friends with age above 40 but not under age 30?",
        "context": "CREATE TABLE Person (name VARCHAR, age INTEGER); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (name VARCHAR)",
        "answer": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
        "db_id": "network_2"
    },
    {
        "question": "Find the name of the person who has no student friends.",
        "context": "CREATE TABLE Person (name VARCHAR, job VARCHAR); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE person (name VARCHAR)",
        "answer": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "db_id": "network_2"
    },
    {
        "question": "Find the person who has exactly one friend.",
        "context": "CREATE TABLE PersonFriend (name VARCHAR)",
        "answer": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
        "db_id": "network_2"
    },
    {
        "question": "Who are the friends of Bob?",
        "context": "CREATE TABLE PersonFriend (friend VARCHAR, name VARCHAR); CREATE TABLE Person (name VARCHAR)",
        "answer": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'",
        "db_id": "network_2"
    },
    {
        "question": "Find the name of persons who are friends with Bob.",
        "context": "CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (name VARCHAR)",
        "answer": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "db_id": "network_2"
    },
    {
        "question": "Find the names of females who are friends with Zach",
        "context": "CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (name VARCHAR, gender VARCHAR)",
        "answer": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'",
        "db_id": "network_2"
    },
    {
        "question": "Find the female friends of Alice.",
        "context": "CREATE TABLE PersonFriend (friend VARCHAR, name VARCHAR); CREATE TABLE Person (name VARCHAR, gender VARCHAR)",
        "answer": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "db_id": "network_2"
    },
    {
        "question": "Find the male friend of Alice whose job is a doctor?",
        "context": "CREATE TABLE PersonFriend (friend VARCHAR, name VARCHAR); CREATE TABLE Person (name VARCHAR, job VARCHAR, gender VARCHAR)",
        "answer": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'",
        "db_id": "network_2"
    },
    {
        "question": "Who has a friend that is from new york city?",
        "context": "CREATE TABLE Person (name VARCHAR, city VARCHAR); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR)",
        "answer": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "db_id": "network_2"
    },
    {
        "question": "Who has friends that are younger than the average age?",
        "context": "CREATE TABLE person (age INTEGER); CREATE TABLE Person (name VARCHAR, age INTEGER); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR)",
        "answer": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)",
        "db_id": "network_2"
    },
    {
        "question": "Who has friends that are older than the average age? Print their friends and their ages as well",
        "context": "CREATE TABLE person (age INTEGER); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (age INTEGER, name VARCHAR)",
        "answer": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
        "db_id": "network_2"
    },
    {
        "question": "Who is the friend of Zach with longest year relationship?",
        "context": "CREATE TABLE PersonFriend (friend VARCHAR, name VARCHAR, YEAR INTEGER)",
        "answer": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "db_id": "network_2"
    },
    {
        "question": "What is the age of the friend of Zach with longest year relationship?",
        "context": "CREATE TABLE PersonFriend (friend VARCHAR, name VARCHAR, year VARCHAR); CREATE TABLE PersonFriend (YEAR INTEGER, name VARCHAR); CREATE TABLE Person (age VARCHAR, name VARCHAR)",
        "answer": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "db_id": "network_2"
    },
    {
        "question": "Find the name of persons who are friends with Alice for the shortest years.",
        "context": "CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR, YEAR INTEGER)",
        "answer": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "db_id": "network_2"
    },
    {
        "question": "Find the name, age, and job title of persons who are friends with Alice for the longest years.",
        "context": "CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR, year VARCHAR); CREATE TABLE Person (name VARCHAR, age VARCHAR, job VARCHAR); CREATE TABLE PersonFriend (YEAR INTEGER, friend VARCHAR)",
        "answer": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "db_id": "network_2"
    },
    {
        "question": "Who is the person that has no friend?",
        "context": "CREATE TABLE PersonFriend (name VARCHAR); CREATE TABLE person (name VARCHAR)",
        "answer": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "db_id": "network_2"
    },
    {
        "question": "Which person whose friends have the oldest average age?",
        "context": "CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (age INTEGER, name VARCHAR)",
        "answer": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",
        "db_id": "network_2"
    },
    {
        "question": "What is the total number of people who has no friend living in the city of Austin.",
        "context": "CREATE TABLE person (name VARCHAR, friend VARCHAR, city VARCHAR); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR, city VARCHAR)",
        "answer": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
        "db_id": "network_2"
    },
    {
        "question": "Find Alice's friends of friends.",
        "context": "CREATE TABLE PersonFriend (name VARCHAR); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (name VARCHAR)",
        "answer": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
        "db_id": "network_2"
    },
    {
        "question": "How many members are there?",
        "context": "CREATE TABLE member (Id VARCHAR)",
        "answer": "SELECT count(*) FROM member",
        "db_id": "decoration_competition"
    },
    {
        "question": "List the names of members in ascending alphabetical order.",
        "context": "CREATE TABLE member (Name VARCHAR)",
        "answer": "SELECT Name FROM member ORDER BY Name ASC",
        "db_id": "decoration_competition"
    },
    {
        "question": "What are the names and countries of members?",
        "context": "CREATE TABLE member (Name VARCHAR, Country VARCHAR)",
        "answer": "SELECT Name ,  Country FROM member",
        "db_id": "decoration_competition"
    },
    {
        "question": "Show the names of members whose country is \"United States\" or \"Canada\".",
        "context": "CREATE TABLE member (Name VARCHAR, Country VARCHAR)",
        "answer": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"",
        "db_id": "decoration_competition"
    },
    {
        "question": "Show the different countries and the number of members from each.",
        "context": "CREATE TABLE member (Country VARCHAR)",
        "answer": "SELECT Country ,  COUNT(*) FROM member GROUP BY Country",
        "db_id": "decoration_competition"
    },
    {
        "question": "Show the most common country across members.",
        "context": "CREATE TABLE member (Country VARCHAR)",
        "answer": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "decoration_competition"
    },
    {
        "question": "Which countries have more than two members?",
        "context": "CREATE TABLE member (Country VARCHAR)",
        "answer": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2",
        "db_id": "decoration_competition"
    },
    {
        "question": "Show the leader names and locations of colleges.",
        "context": "CREATE TABLE college (Leader_Name VARCHAR, College_Location VARCHAR)",
        "answer": "SELECT Leader_Name ,  College_Location FROM college",
        "db_id": "decoration_competition"
    },
    {
        "question": "Show the names of members and names of colleges they go to.",
        "context": "CREATE TABLE member (Name VARCHAR, College_ID VARCHAR); CREATE TABLE college (Name VARCHAR, College_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID",
        "db_id": "decoration_competition"
    },
    {
        "question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
        "context": "CREATE TABLE member (Name VARCHAR, College_ID VARCHAR); CREATE TABLE college (College_Location VARCHAR, College_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC",
        "db_id": "decoration_competition"
    },
    {
        "question": "Show the distinct leader names of colleges associated with members from country \"Canada\".",
        "context": "CREATE TABLE college (Leader_Name VARCHAR, College_ID VARCHAR); CREATE TABLE member (College_ID VARCHAR, Country VARCHAR)",
        "answer": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\"",
        "db_id": "decoration_competition"
    },
    {
        "question": "Show the names of members and the decoration themes they have.",
        "context": "CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE round (Decoration_Theme VARCHAR, Member_ID VARCHAR)",
        "answer": "SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID",
        "db_id": "decoration_competition"
    },
    {
        "question": "Show the names of members that have a rank in round higher than 3.",
        "context": "CREATE TABLE round (Member_ID VARCHAR, Rank_in_Round INTEGER); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3",
        "db_id": "decoration_competition"
    },
    {
        "question": "Show the names of members in ascending order of their rank in rounds.",
        "context": "CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE round (Member_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC",
        "db_id": "decoration_competition"
    },
    {
        "question": "List the names of members who did not participate in any round.",
        "context": "CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE round (Name VARCHAR, Member_ID VARCHAR)",
        "answer": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)",
        "db_id": "decoration_competition"
    },
    {
        "question": "Find the name and access counts of all documents, in alphabetic order of the document name.",
        "context": "CREATE TABLE documents (document_name VARCHAR, access_count VARCHAR)",
        "answer": "SELECT document_name ,  access_count FROM documents ORDER BY document_name",
        "db_id": "document_management"
    },
    {
        "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "context": "CREATE TABLE documents (document_name VARCHAR, access_count VARCHAR)",
        "answer": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "db_id": "document_management"
    },
    {
        "question": "Find the types of documents with more than 4 documents.",
        "context": "CREATE TABLE documents (document_type_code VARCHAR)",
        "answer": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
        "db_id": "document_management"
    },
    {
        "question": "Find the total access count of all documents in the most popular document type.",
        "context": "CREATE TABLE documents (access_count INTEGER, document_type_code VARCHAR)",
        "answer": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "document_management"
    },
    {
        "question": "What is the average access count of documents?",
        "context": "CREATE TABLE documents (access_count INTEGER)",
        "answer": "SELECT avg(access_count) FROM documents",
        "db_id": "document_management"
    },
    {
        "question": "What is the structure of the document with the least number of accesses?",
        "context": "CREATE TABLE document_structures (document_structure_description VARCHAR, document_structure_code VARCHAR); CREATE TABLE documents (document_structure_code VARCHAR)",
        "answer": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "document_management"
    },
    {
        "question": "What is the type of the document named \"David CV\"?",
        "context": "CREATE TABLE documents (document_type_code VARCHAR, document_name VARCHAR)",
        "answer": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"",
        "db_id": "document_management"
    },
    {
        "question": "Find the list of documents that are both in the most three popular type and have the most three popular structure.",
        "context": "CREATE TABLE documents (document_name VARCHAR, document_type_code VARCHAR, document_structure_code VARCHAR)",
        "answer": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
        "db_id": "document_management"
    },
    {
        "question": "What document types do have more than 10000 total access number.",
        "context": "CREATE TABLE documents (document_type_code VARCHAR, access_count INTEGER)",
        "answer": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000",
        "db_id": "document_management"
    },
    {
        "question": "What are all the section titles of the document named \"David CV\"?",
        "context": "CREATE TABLE documents (document_code VARCHAR, document_name VARCHAR); CREATE TABLE document_sections (section_title VARCHAR, document_code VARCHAR)",
        "answer": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"",
        "db_id": "document_management"
    },
    {
        "question": "Find all the name of documents without any sections.",
        "context": "CREATE TABLE document_sections (document_name VARCHAR, document_code VARCHAR); CREATE TABLE documents (document_name VARCHAR, document_code VARCHAR)",
        "answer": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
        "db_id": "document_management"
    },
    {
        "question": "List all the username and passwords of users with the most popular role.",
        "context": "CREATE TABLE users (user_name VARCHAR, password VARCHAR, role_code VARCHAR)",
        "answer": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "document_management"
    },
    {
        "question": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "context": "CREATE TABLE document_functional_areas (document_code VARCHAR, functional_area_code VARCHAR); CREATE TABLE documents (access_count INTEGER, document_code VARCHAR); CREATE TABLE functional_areas (functional_area_code VARCHAR, functional_area_description VARCHAR)",
        "answer": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "db_id": "document_management"
    },
    {
        "question": "Find names of the document without any images.",
        "context": "CREATE TABLE document_sections_images (section_id VARCHAR); CREATE TABLE documents (document_name VARCHAR); CREATE TABLE documents (document_name VARCHAR, document_code VARCHAR); CREATE TABLE document_sections (document_code VARCHAR, section_id VARCHAR)",
        "answer": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id",
        "db_id": "document_management"
    },
    {
        "question": "What is the name of the document with the most number of sections?",
        "context": "CREATE TABLE document_sections (document_code VARCHAR); CREATE TABLE documents (document_name VARCHAR, document_code VARCHAR)",
        "answer": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "document_management"
    },
    {
        "question": "List all the document names which contains \"CV\".",
        "context": "CREATE TABLE documents (document_name VARCHAR)",
        "answer": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"",
        "db_id": "document_management"
    },
    {
        "question": "How many users are logged in?",
        "context": "CREATE TABLE users (user_login VARCHAR)",
        "answer": "SELECT count(*) FROM users WHERE user_login  =  1",
        "db_id": "document_management"
    },
    {
        "question": "Find the description of the most popular role among the users that have logged in.",
        "context": "CREATE TABLE users (role_description VARCHAR, role_code VARCHAR, user_login VARCHAR); CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR, user_login VARCHAR)",
        "answer": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
        "db_id": "document_management"
    },
    {
        "question": "Find the average access count of documents with the least popular structure.",
        "context": "CREATE TABLE documents (access_count INTEGER, document_structure_code VARCHAR)",
        "answer": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "db_id": "document_management"
    },
    {
        "question": "List all the image name and URLs in the order of their names.",
        "context": "CREATE TABLE images (image_name VARCHAR, image_url VARCHAR)",
        "answer": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
        "db_id": "document_management"
    },
    {
        "question": "Find the number of users in each role.",
        "context": "CREATE TABLE users (role_code VARCHAR)",
        "answer": "SELECT count(*) ,  role_code FROM users GROUP BY role_code",
        "db_id": "document_management"
    },
    {
        "question": "What document types have more than 2 corresponding documents?",
        "context": "CREATE TABLE documents (document_type_code VARCHAR)",
        "answer": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
        "db_id": "document_management"
    },
    {
        "question": "How many companies are there?",
        "context": "CREATE TABLE Companies (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Companies",
        "db_id": "company_office"
    },
    {
        "question": "List the names of companies in descending order of market value.",
        "context": "CREATE TABLE Companies (name VARCHAR, Market_Value_billion VARCHAR)",
        "answer": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
        "db_id": "company_office"
    },
    {
        "question": "What are the names of companies whose headquarters are not \"USA\"?",
        "context": "CREATE TABLE Companies (name VARCHAR, Headquarters VARCHAR)",
        "answer": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
        "db_id": "company_office"
    },
    {
        "question": "What are the name and assets of each company, sorted in ascending order of company name?",
        "context": "CREATE TABLE Companies (name VARCHAR, Assets_billion VARCHAR)",
        "answer": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
        "db_id": "company_office"
    },
    {
        "question": "What are the average profits of companies?",
        "context": "CREATE TABLE Companies (Profits_billion INTEGER)",
        "answer": "SELECT avg(Profits_billion) FROM Companies",
        "db_id": "company_office"
    },
    {
        "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
        "context": "CREATE TABLE Companies (Sales_billion INTEGER, Industry VARCHAR)",
        "answer": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
        "db_id": "company_office"
    },
    {
        "question": "How many different industries are the companies in?",
        "context": "CREATE TABLE Companies (Industry VARCHAR)",
        "answer": "SELECT count(DISTINCT Industry) FROM Companies",
        "db_id": "company_office"
    },
    {
        "question": "List the names of buildings in descending order of building height.",
        "context": "CREATE TABLE buildings (name VARCHAR, Height VARCHAR)",
        "answer": "SELECT name FROM buildings ORDER BY Height DESC",
        "db_id": "company_office"
    },
    {
        "question": "Find the stories of the building with the largest height.",
        "context": "CREATE TABLE buildings (Stories VARCHAR, Height VARCHAR)",
        "answer": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
        "db_id": "company_office"
    },
    {
        "question": "List the name of a building along with the name of a company whose office is in the building.",
        "context": "CREATE TABLE buildings (name VARCHAR, id VARCHAR); CREATE TABLE Office_locations (building_id VARCHAR, company_id VARCHAR); CREATE TABLE Companies (name VARCHAR, id VARCHAR)",
        "answer": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",
        "db_id": "company_office"
    },
    {
        "question": "Show the names of the buildings that have more than one company offices.",
        "context": "CREATE TABLE buildings (name VARCHAR, id VARCHAR); CREATE TABLE Companies (id VARCHAR); CREATE TABLE Office_locations (building_id VARCHAR, company_id VARCHAR)",
        "answer": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
        "db_id": "company_office"
    },
    {
        "question": "Show the name of the building that has the most company offices.",
        "context": "CREATE TABLE buildings (name VARCHAR, id VARCHAR); CREATE TABLE Companies (id VARCHAR); CREATE TABLE Office_locations (building_id VARCHAR, company_id VARCHAR)",
        "answer": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "company_office"
    },
    {
        "question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "context": "CREATE TABLE buildings (name VARCHAR, Status VARCHAR, Stories VARCHAR)",
        "answer": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
        "db_id": "company_office"
    },
    {
        "question": "Please show each industry and the corresponding number of companies in that industry.",
        "context": "CREATE TABLE Companies (Industry VARCHAR)",
        "answer": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
        "db_id": "company_office"
    },
    {
        "question": "Please show the industries of companies in descending order of the number of companies.",
        "context": "CREATE TABLE Companies (Industry VARCHAR)",
        "answer": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "db_id": "company_office"
    },
    {
        "question": "List the industry shared by the most companies.",
        "context": "CREATE TABLE Companies (Industry VARCHAR)",
        "answer": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "company_office"
    },
    {
        "question": "List the names of buildings that have no company office.",
        "context": "CREATE TABLE buildings (name VARCHAR, id VARCHAR, building_id VARCHAR); CREATE TABLE Office_locations (name VARCHAR, id VARCHAR, building_id VARCHAR)",
        "answer": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
        "db_id": "company_office"
    },
    {
        "question": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".",
        "context": "CREATE TABLE Companies (Industry VARCHAR, Headquarters VARCHAR)",
        "answer": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"",
        "db_id": "company_office"
    },
    {
        "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
        "context": "CREATE TABLE Companies (Industry VARCHAR)",
        "answer": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"",
        "db_id": "company_office"
    },
    {
        "question": "Show the headquarters shared by more than two companies.",
        "context": "CREATE TABLE Companies (Headquarters VARCHAR)",
        "answer": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2",
        "db_id": "company_office"
    },
    {
        "question": "How many products are there?",
        "context": "CREATE TABLE Products (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Products",
        "db_id": "solvency_ii"
    },
    {
        "question": "List the name of products in ascending order of price.",
        "context": "CREATE TABLE Products (Product_Name VARCHAR, Product_Price VARCHAR)",
        "answer": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
        "db_id": "solvency_ii"
    },
    {
        "question": "What are the names and type codes of products?",
        "context": "CREATE TABLE Products (Product_Name VARCHAR, Product_Type_Code VARCHAR)",
        "answer": "SELECT Product_Name ,  Product_Type_Code FROM Products",
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
        "context": "CREATE TABLE Products (Product_Price VARCHAR, Product_Name VARCHAR)",
        "answer": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\"",
        "db_id": "solvency_ii"
    },
    {
        "question": "What is the average price for products?",
        "context": "CREATE TABLE Products (Product_Price INTEGER)",
        "answer": "SELECT avg(Product_Price) FROM Products",
        "db_id": "solvency_ii"
    },
    {
        "question": "What is the name of the product with the highest price?",
        "context": "CREATE TABLE Products (Product_Name VARCHAR, Product_Price VARCHAR)",
        "answer": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1",
        "db_id": "solvency_ii"
    },
    {
        "question": "Show different type codes of products and the number of products with each type code.",
        "context": "CREATE TABLE Products (Product_Type_Code VARCHAR)",
        "answer": "SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code",
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the most common type code across products.",
        "context": "CREATE TABLE Products (Product_Type_Code VARCHAR)",
        "answer": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the product type codes that have at least two products.",
        "context": "CREATE TABLE Products (Product_Type_Code VARCHAR)",
        "answer": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2",
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
        "context": "CREATE TABLE Products (Product_Type_Code VARCHAR, Product_Price INTEGER)",
        "answer": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000",
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the names of products and the number of events they are in.",
        "context": "CREATE TABLE Products (Product_Name VARCHAR, Product_ID VARCHAR); CREATE TABLE Products_in_Events (Product_ID VARCHAR)",
        "answer": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.",
        "context": "CREATE TABLE Products (Product_Name VARCHAR, Product_ID VARCHAR); CREATE TABLE Products_in_Events (Product_ID VARCHAR)",
        "answer": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the names of products that are in at least two events.",
        "context": "CREATE TABLE Products (Product_Name VARCHAR, Product_ID VARCHAR); CREATE TABLE Products_in_Events (Product_ID VARCHAR)",
        "answer": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2",
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "context": "CREATE TABLE Products (Product_Name VARCHAR, Product_ID VARCHAR); CREATE TABLE Products_in_Events (Product_ID VARCHAR)",
        "answer": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name",
        "db_id": "solvency_ii"
    },
    {
        "question": "List the names of products that are not in any event.",
        "context": "CREATE TABLE Products (Product_Name VARCHAR, Product_ID VARCHAR); CREATE TABLE Products_in_Events (Product_Name VARCHAR, Product_ID VARCHAR)",
        "answer": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)",
        "db_id": "solvency_ii"
    },
    {
        "question": "How many artworks are there?",
        "context": "CREATE TABLE artwork (Id VARCHAR)",
        "answer": "SELECT count(*) FROM artwork",
        "db_id": "entertainment_awards"
    },
    {
        "question": "List the name of artworks in ascending alphabetical order.",
        "context": "CREATE TABLE artwork (Name VARCHAR)",
        "answer": "SELECT Name FROM artwork ORDER BY Name ASC",
        "db_id": "entertainment_awards"
    },
    {
        "question": "List the name of artworks whose type is not \"Program Talent Show\".",
        "context": "CREATE TABLE artwork (Name VARCHAR, TYPE VARCHAR)",
        "answer": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"",
        "db_id": "entertainment_awards"
    },
    {
        "question": "What are the names and locations of festivals?",
        "context": "CREATE TABLE festival_detail (Festival_Name VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT Festival_Name ,  LOCATION FROM festival_detail",
        "db_id": "entertainment_awards"
    },
    {
        "question": "What are the names of the chairs of festivals, sorted in ascending order of the year held?",
        "context": "CREATE TABLE festival_detail (Chair_Name VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC",
        "db_id": "entertainment_awards"
    },
    {
        "question": "What is the location of the festival with the largest number of audience?",
        "context": "CREATE TABLE festival_detail (LOCATION VARCHAR, Num_of_Audience VARCHAR)",
        "answer": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1",
        "db_id": "entertainment_awards"
    },
    {
        "question": "What are the names of festivals held in year 2007?",
        "context": "CREATE TABLE festival_detail (Festival_Name VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007",
        "db_id": "entertainment_awards"
    },
    {
        "question": "What is the average number of audience for festivals?",
        "context": "CREATE TABLE festival_detail (Num_of_Audience INTEGER)",
        "answer": "SELECT avg(Num_of_Audience) FROM festival_detail",
        "db_id": "entertainment_awards"
    },
    {
        "question": "Show the names of the three most recent festivals.",
        "context": "CREATE TABLE festival_detail (Festival_Name VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3",
        "db_id": "entertainment_awards"
    },
    {
        "question": "For each nomination, show the name of the artwork and name of the festival where it is nominated.",
        "context": "CREATE TABLE artwork (Name VARCHAR, Artwork_ID VARCHAR); CREATE TABLE nomination (Artwork_ID VARCHAR, Festival_ID VARCHAR); CREATE TABLE festival_detail (Festival_Name VARCHAR, Festival_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID",
        "db_id": "entertainment_awards"
    },
    {
        "question": "Show distinct types of artworks that are nominated in festivals in 2007.",
        "context": "CREATE TABLE nomination (Artwork_ID VARCHAR, Festival_ID VARCHAR); CREATE TABLE festival_detail (Festival_ID VARCHAR, Year VARCHAR); CREATE TABLE artwork (Type VARCHAR, Artwork_ID VARCHAR)",
        "answer": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007",
        "db_id": "entertainment_awards"
    },
    {
        "question": "Show the names of artworks in ascending order of the year they are nominated in.",
        "context": "CREATE TABLE artwork (Name VARCHAR, Artwork_ID VARCHAR); CREATE TABLE nomination (Artwork_ID VARCHAR, Festival_ID VARCHAR); CREATE TABLE festival_detail (Festival_ID VARCHAR, Year VARCHAR)",
        "answer": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year",
        "db_id": "entertainment_awards"
    },
    {
        "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
        "context": "CREATE TABLE nomination (Artwork_ID VARCHAR, Festival_ID VARCHAR); CREATE TABLE artwork (Artwork_ID VARCHAR, Type VARCHAR); CREATE TABLE festival_detail (Festival_Name VARCHAR, Festival_ID VARCHAR)",
        "answer": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"",
        "db_id": "entertainment_awards"
    },
    {
        "question": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "context": "CREATE TABLE nomination (Festival_ID VARCHAR, Artwork_ID VARCHAR); CREATE TABLE festival_detail (Festival_Name VARCHAR, Festival_ID VARCHAR); CREATE TABLE artwork (Artwork_ID VARCHAR)",
        "answer": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2",
        "db_id": "entertainment_awards"
    },
    {
        "question": "Show the id, name of each festival and the number of artworks it has nominated.",
        "context": "CREATE TABLE nomination (Festival_ID VARCHAR, Artwork_ID VARCHAR); CREATE TABLE festival_detail (Festival_Name VARCHAR, Festival_ID VARCHAR); CREATE TABLE artwork (Artwork_ID VARCHAR)",
        "answer": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID",
        "db_id": "entertainment_awards"
    },
    {
        "question": "Please show different types of artworks with the corresponding number of artworks of each type.",
        "context": "CREATE TABLE artwork (TYPE VARCHAR)",
        "answer": "SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE",
        "db_id": "entertainment_awards"
    },
    {
        "question": "List the most common type of artworks.",
        "context": "CREATE TABLE artwork (TYPE VARCHAR)",
        "answer": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "entertainment_awards"
    },
    {
        "question": "List the year in which there are more than one festivals.",
        "context": "CREATE TABLE festival_detail (YEAR VARCHAR)",
        "answer": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1",
        "db_id": "entertainment_awards"
    },
    {
        "question": "List the name of artworks that are not nominated.",
        "context": "CREATE TABLE nomination (Name VARCHAR, Artwork_ID VARCHAR); CREATE TABLE Artwork (Name VARCHAR, Artwork_ID VARCHAR)",
        "answer": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)",
        "db_id": "entertainment_awards"
    },
    {
        "question": "Show the number of audience in year 2008 or 2010.",
        "context": "CREATE TABLE festival_detail (Num_of_Audience VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010",
        "db_id": "entertainment_awards"
    },
    {
        "question": "What are the total number of the audiences who visited any of the festivals?",
        "context": "CREATE TABLE festival_detail (Num_of_Audience INTEGER)",
        "answer": "SELECT sum(Num_of_Audience) FROM festival_detail",
        "db_id": "entertainment_awards"
    },
    {
        "question": "In which year are there festivals both inside the 'United States' and outside the 'United States'?",
        "context": "CREATE TABLE festival_detail (YEAR VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'",
        "db_id": "entertainment_awards"
    },
    {
        "question": "How many premises are there?",
        "context": "CREATE TABLE premises (Id VARCHAR)",
        "answer": "SELECT count(*) FROM premises",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "What are all the distinct premise types?",
        "context": "CREATE TABLE premises (premises_type VARCHAR)",
        "answer": "SELECT DISTINCT premises_type FROM premises",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Find the types and details for all premises and order by the premise type.",
        "context": "CREATE TABLE premises (premises_type VARCHAR, premise_details VARCHAR)",
        "answer": "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show each premise type and the number of premises in that type.",
        "context": "CREATE TABLE premises (premises_type VARCHAR)",
        "answer": "SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show all distinct product categories along with the number of mailshots in each category.",
        "context": "CREATE TABLE mailshot_campaigns (product_category VARCHAR)",
        "answer": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the name and phone of the customer without any mailshot.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE mailshot_customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE mailshot_customers (customer_id VARCHAR, outcome_code VARCHAR)",
        "answer": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the outcome code of mailshots along with the number of mailshots in each outcome code.",
        "context": "CREATE TABLE mailshot_customers (outcome_code VARCHAR)",
        "answer": "SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE mailshot_customers (customer_id VARCHAR)",
        "answer": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the names of customers who have the most mailshots.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE mailshot_customers (customer_id VARCHAR)",
        "answer": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, payment_method VARCHAR, customer_id VARCHAR); CREATE TABLE mailshot_customers (customer_id VARCHAR, outcome_code VARCHAR)",
        "answer": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the premise type and address type code for all customer addresses.",
        "context": "CREATE TABLE premises (premises_type VARCHAR, premise_id VARCHAR); CREATE TABLE customer_addresses (address_type_code VARCHAR, premise_id VARCHAR)",
        "answer": "SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "What are the distinct address type codes for all customer addresses?",
        "context": "CREATE TABLE customer_addresses (address_type_code VARCHAR)",
        "answer": "SELECT DISTINCT address_type_code FROM customer_addresses",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "context": "CREATE TABLE customer_orders (order_shipping_charges VARCHAR, customer_id VARCHAR, order_status_code VARCHAR)",
        "answer": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR)",
        "answer": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "How many courses are there in total?",
        "context": "CREATE TABLE COURSE (Id VARCHAR)",
        "answer": "SELECT count(*) FROM COURSE",
        "db_id": "college_3"
    },
    {
        "question": "How many courses have more than 2 credits?",
        "context": "CREATE TABLE COURSE (Credits INTEGER)",
        "answer": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
        "db_id": "college_3"
    },
    {
        "question": "List all names of courses with 1 credit?",
        "context": "CREATE TABLE COURSE (CName VARCHAR, Credits VARCHAR)",
        "answer": "SELECT CName FROM COURSE WHERE Credits  =  1",
        "db_id": "college_3"
    },
    {
        "question": "Which courses are taught on days MTW?",
        "context": "CREATE TABLE COURSE (CName VARCHAR, Days VARCHAR)",
        "answer": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"",
        "db_id": "college_3"
    },
    {
        "question": "What is the number of departments in Division \"AS\"?",
        "context": "CREATE TABLE DEPARTMENT (Division VARCHAR)",
        "answer": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"",
        "db_id": "college_3"
    },
    {
        "question": "What are the phones of departments in Room 268?",
        "context": "CREATE TABLE DEPARTMENT (DPhone VARCHAR, Room VARCHAR)",
        "answer": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
        "db_id": "college_3"
    },
    {
        "question": "Find the number of students that have at least one grade \"B\".",
        "context": "CREATE TABLE ENROLLED_IN (StuID VARCHAR, Grade VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "db_id": "college_3"
    },
    {
        "question": "Find the max and min grade point for all letter grade.",
        "context": "CREATE TABLE GRADECONVERSION (gradepoint INTEGER)",
        "answer": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "db_id": "college_3"
    },
    {
        "question": "Find the first names of students whose first names contain letter \"a\".",
        "context": "CREATE TABLE STUDENT (Fname VARCHAR)",
        "answer": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "db_id": "college_3"
    },
    {
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "context": "CREATE TABLE FACULTY (Fname VARCHAR, Lname VARCHAR, sex VARCHAR, Building VARCHAR)",
        "answer": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "db_id": "college_3"
    },
    {
        "question": "Find the rooms of faculties with rank professor who live in building NEB.",
        "context": "CREATE TABLE FACULTY (Room VARCHAR, Rank VARCHAR, Building VARCHAR)",
        "answer": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
        "db_id": "college_3"
    },
    {
        "question": "Find the department name that is in Building \"Mergenthaler\".",
        "context": "CREATE TABLE DEPARTMENT (DName VARCHAR, Building VARCHAR)",
        "answer": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"",
        "db_id": "college_3"
    },
    {
        "question": "List all information about courses sorted by credits in the ascending order.",
        "context": "CREATE TABLE COURSE (Credits VARCHAR)",
        "answer": "SELECT * FROM COURSE ORDER BY Credits",
        "db_id": "college_3"
    },
    {
        "question": "List the course name of courses sorted by credits.",
        "context": "CREATE TABLE COURSE (CName VARCHAR, Credits VARCHAR)",
        "answer": "SELECT CName FROM COURSE ORDER BY Credits",
        "db_id": "college_3"
    },
    {
        "question": "Find the first name of students in the descending order of age.",
        "context": "CREATE TABLE STUDENT (Fname VARCHAR, Age VARCHAR)",
        "answer": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
        "db_id": "college_3"
    },
    {
        "question": "Find the last name of female (sex is F) students in the descending order of age.",
        "context": "CREATE TABLE STUDENT (LName VARCHAR, Sex VARCHAR, Age VARCHAR)",
        "answer": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC",
        "db_id": "college_3"
    },
    {
        "question": "Find the last names of faculties in building Barton in alphabetic order.",
        "context": "CREATE TABLE FACULTY (Lname VARCHAR, Building VARCHAR)",
        "answer": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname",
        "db_id": "college_3"
    },
    {
        "question": "Find the first names of faculties of rank Professor in alphabetic order.",
        "context": "CREATE TABLE FACULTY (Fname VARCHAR, Rank VARCHAR)",
        "answer": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname",
        "db_id": "college_3"
    },
    {
        "question": "Find the name of the department that has the biggest number of students minored in?",
        "context": "CREATE TABLE DEPARTMENT (DName VARCHAR, DNO VARCHAR); CREATE TABLE MINOR_IN (DNO VARCHAR)",
        "answer": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1",
        "db_id": "college_3"
    },
    {
        "question": "Find the name of the department that has no students minored in?",
        "context": "CREATE TABLE DEPARTMENT (DName VARCHAR, DNO VARCHAR); CREATE TABLE MINOR_IN (DNO VARCHAR); CREATE TABLE DEPARTMENT (DName VARCHAR)",
        "answer": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "db_id": "college_3"
    },
    {
        "question": "Find the name of the department that has the fewest members.",
        "context": "CREATE TABLE MEMBER_OF (DNO VARCHAR); CREATE TABLE DEPARTMENT (DName VARCHAR, DNO VARCHAR)",
        "answer": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
        "db_id": "college_3"
    },
    {
        "question": "Find the rank of the faculty that the fewest faculties belong to.",
        "context": "CREATE TABLE FACULTY (Rank VARCHAR)",
        "answer": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
        "db_id": "college_3"
    },
    {
        "question": "What are the first and last names of the instructors who teach the top 3 number of courses?",
        "context": "CREATE TABLE COURSE (Instructor VARCHAR); CREATE TABLE FACULTY (Fname VARCHAR, Lname VARCHAR, FacID VARCHAR)",
        "answer": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
        "db_id": "college_3"
    },
    {
        "question": "Which building does the instructor who teaches the most number of courses live in?",
        "context": "CREATE TABLE COURSE (Instructor VARCHAR); CREATE TABLE FACULTY (Building VARCHAR, FacID VARCHAR)",
        "answer": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
        "db_id": "college_3"
    },
    {
        "question": "What are the name of courses that have at least five enrollments?",
        "context": "CREATE TABLE ENROLLED_IN (CID VARCHAR); CREATE TABLE COURSE (CName VARCHAR, CID VARCHAR)",
        "answer": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
        "db_id": "college_3"
    },
    {
        "question": "Find the first name and last name of the instructor of course that has course name",
        "context": "CREATE TABLE FACULTY (Fname VARCHAR, Lname VARCHAR, FacID VARCHAR); CREATE TABLE COURSE (Instructor VARCHAR, CName VARCHAR)",
        "answer": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"",
        "db_id": "college_3"
    },
    {
        "question": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.",
        "context": "CREATE TABLE COURSE (DNO VARCHAR, CName VARCHAR); CREATE TABLE DEPARTMENT (Dname VARCHAR, Room VARCHAR, DNO VARCHAR)",
        "answer": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "db_id": "college_3"
    },
    {
        "question": "Find the student first and last names and grade points of all enrollments.",
        "context": "CREATE TABLE ENROLLED_IN (Grade VARCHAR, StuID VARCHAR); CREATE TABLE STUDENT (Fname VARCHAR, LName VARCHAR, StuID VARCHAR); CREATE TABLE GRADECONVERSION (gradepoint VARCHAR, lettergrade VARCHAR)",
        "answer": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
        "db_id": "college_3"
    },
    {
        "question": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.",
        "context": "CREATE TABLE ENROLLED_IN (Grade VARCHAR, StuID VARCHAR); CREATE TABLE STUDENT (Fname VARCHAR, StuID VARCHAR); CREATE TABLE GRADECONVERSION (gradepoint VARCHAR, lettergrade VARCHAR)",
        "answer": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "db_id": "college_3"
    },
    {
        "question": "Find the full names of faculties who are members of department with department number 520.",
        "context": "CREATE TABLE FACULTY (Fname VARCHAR, Lname VARCHAR, FacID VARCHAR); CREATE TABLE MEMBER_OF (FacID VARCHAR, DNO VARCHAR)",
        "answer": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "db_id": "college_3"
    },
    {
        "question": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "context": "CREATE TABLE STUDENT (Fname VARCHAR, Lname VARCHAR, StuID VARCHAR); CREATE TABLE MINOR_IN (StuID VARCHAR, DNO VARCHAR)",
        "answer": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "db_id": "college_3"
    },
    {
        "question": "Find the last names of faculties who are members of computer science department.",
        "context": "CREATE TABLE DEPARTMENT (DNO VARCHAR, DName VARCHAR); CREATE TABLE MEMBER_OF (DNO VARCHAR, FacID VARCHAR); CREATE TABLE FACULTY (Lname VARCHAR, FacID VARCHAR)",
        "answer": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
        "db_id": "college_3"
    },
    {
        "question": "Find the average grade point of student whose last name is Smith.",
        "context": "CREATE TABLE ENROLLED_IN (Grade VARCHAR, StuID VARCHAR); CREATE TABLE STUDENT (LName VARCHAR, StuID VARCHAR); CREATE TABLE GRADECONVERSION (gradepoint INTEGER, lettergrade VARCHAR)",
        "answer": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
        "db_id": "college_3"
    },
    {
        "question": "What is the maximum and minimum grade point of students who live in NYC?",
        "context": "CREATE TABLE ENROLLED_IN (Grade VARCHAR, StuID VARCHAR); CREATE TABLE STUDENT (city_code VARCHAR, StuID VARCHAR); CREATE TABLE GRADECONVERSION (gradepoint INTEGER, lettergrade VARCHAR)",
        "answer": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "db_id": "college_3"
    },
    {
        "question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
        "context": "CREATE TABLE COURSE (CName VARCHAR, Credits VARCHAR, Hours VARCHAR)",
        "answer": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "db_id": "college_3"
    },
    {
        "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
        "context": "CREATE TABLE DEPARTMENT (DName VARCHAR, Division VARCHAR, Building VARCHAR)",
        "answer": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "db_id": "college_3"
    },
    {
        "question": "Find the first name of students not enrolled in any course.",
        "context": "CREATE TABLE STUDENT (Fname VARCHAR, StuID VARCHAR); CREATE TABLE ENROLLED_IN (Fname VARCHAR, StuID VARCHAR)",
        "answer": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
        "db_id": "college_3"
    },
    {
        "question": "What are the ids of the top three products that were purchased in the largest amount?",
        "context": "CREATE TABLE product_suppliers (product_id VARCHAR, total_amount_purchased VARCHAR)",
        "answer": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "db_id": "department_store"
    },
    {
        "question": "What are the product id and product type of the cheapest product?",
        "context": "CREATE TABLE products (product_id VARCHAR, product_type_code VARCHAR, product_price VARCHAR)",
        "answer": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1",
        "db_id": "department_store"
    },
    {
        "question": "Find the number of different product types.",
        "context": "CREATE TABLE products (product_type_code VARCHAR)",
        "answer": "SELECT count(DISTINCT product_type_code) FROM products",
        "db_id": "department_store"
    },
    {
        "question": "Return the address of customer 10.",
        "context": "CREATE TABLE customer_addresses (address_id VARCHAR, customer_id VARCHAR); CREATE TABLE addresses (address_details VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
        "db_id": "department_store"
    },
    {
        "question": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
        "context": "CREATE TABLE staff_department_assignments (staff_id VARCHAR, job_title_code VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_gender VARCHAR)",
        "answer": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"",
        "db_id": "department_store"
    },
    {
        "question": "For each payment method, return how many customers use it.",
        "context": "CREATE TABLE customers (payment_method_code VARCHAR)",
        "answer": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code",
        "db_id": "department_store"
    },
    {
        "question": "What is the id of the product that was ordered the most often?",
        "context": "CREATE TABLE order_items (product_id VARCHAR)",
        "answer": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "department_store"
    },
    {
        "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_email VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR)",
        "answer": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "department_store"
    },
    {
        "question": "What is the average price for each type of product?",
        "context": "CREATE TABLE products (product_type_code VARCHAR, product_price INTEGER)",
        "answer": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code",
        "db_id": "department_store"
    },
    {
        "question": "How many department stores does the store chain South have?",
        "context": "CREATE TABLE department_stores (dept_store_chain_id VARCHAR); CREATE TABLE department_store_chain (dept_store_chain_id VARCHAR, dept_store_chain_name VARCHAR)",
        "answer": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"",
        "db_id": "department_store"
    },
    {
        "question": "What is the name and job title of the staff who was assigned the latest?",
        "context": "CREATE TABLE staff (staff_name VARCHAR, staff_id VARCHAR); CREATE TABLE staff_department_assignments (job_title_code VARCHAR, staff_id VARCHAR, date_assigned_to VARCHAR)",
        "answer": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
        "db_id": "department_store"
    },
    {
        "question": "Give me the product type, name and price for all the products supplied by supplier id 3.",
        "context": "CREATE TABLE products (product_type_code VARCHAR, product_name VARCHAR, product_price VARCHAR, product_id VARCHAR); CREATE TABLE product_suppliers (product_id VARCHAR, supplier_id VARCHAR)",
        "answer": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",
        "db_id": "department_store"
    },
    {
        "question": "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_status_code VARCHAR)",
        "answer": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "db_id": "department_store"
    },
    {
        "question": "Find the name and address of the customers who have both New and Pending orders.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_address VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_status_code VARCHAR)",
        "answer": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "db_id": "department_store"
    },
    {
        "question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "context": "CREATE TABLE products (product_id VARCHAR, product_price INTEGER); CREATE TABLE product_suppliers (product_id VARCHAR, supplier_id VARCHAR); CREATE TABLE products (product_price INTEGER)",
        "answer": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "db_id": "department_store"
    },
    {
        "question": "What is the id and name of the department store that has both marketing and managing department?",
        "context": "CREATE TABLE department_stores (dept_store_id VARCHAR, store_name VARCHAR); CREATE TABLE departments (dept_store_id VARCHAR, department_name VARCHAR)",
        "answer": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
        "db_id": "department_store"
    },
    {
        "question": "What are the ids of the two department store chains with the largest number of department stores?",
        "context": "CREATE TABLE department_stores (dept_store_chain_id VARCHAR)",
        "answer": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "db_id": "department_store"
    },
    {
        "question": "What is the id of the department with the least number of staff?",
        "context": "CREATE TABLE staff_department_assignments (department_id VARCHAR)",
        "answer": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
        "db_id": "department_store"
    },
    {
        "question": "For each product type, return the maximum and minimum price.",
        "context": "CREATE TABLE products (product_type_code VARCHAR, product_price INTEGER)",
        "answer": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
        "db_id": "department_store"
    },
    {
        "question": "Find the product type whose average price is higher than the average price of all products.",
        "context": "CREATE TABLE products (product_type_code VARCHAR, product_price INTEGER)",
        "answer": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)",
        "db_id": "department_store"
    },
    {
        "question": "Find the id and name of the staff who has been assigned for the shortest period.",
        "context": "CREATE TABLE Staff_Department_Assignments (staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_name VARCHAR)",
        "answer": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "db_id": "department_store"
    },
    {
        "question": "Return the names and ids of all products whose price is between 600 and 700.",
        "context": "CREATE TABLE products (product_name VARCHAR, product_id VARCHAR, product_price INTEGER)",
        "answer": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700",
        "db_id": "department_store"
    },
    {
        "question": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
        "context": "CREATE TABLE Customer_Orders (customer_id VARCHAR, order_date INTEGER, order_status_code VARCHAR)",
        "answer": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
        "db_id": "department_store"
    },
    {
        "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "context": "CREATE TABLE Staff_Department_Assignments (staff_id VARCHAR, date_assigned_to INTEGER, job_title_code VARCHAR)",
        "answer": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "db_id": "department_store"
    },
    {
        "question": "What are the names and ids of customers whose address contains TN?",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR, customer_address VARCHAR)",
        "answer": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
        "db_id": "department_store"
    },
    {
        "question": "Return the name and gender of the staff who was assigned in 2016.",
        "context": "CREATE TABLE staff (staff_name VARCHAR, staff_gender VARCHAR, staff_id VARCHAR); CREATE TABLE staff_department_assignments (staff_id VARCHAR, date_assigned_from VARCHAR)",
        "answer": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
        "db_id": "department_store"
    },
    {
        "question": "List the name of staff who has been assigned multiple jobs.",
        "context": "CREATE TABLE staff (staff_name VARCHAR, staff_id VARCHAR); CREATE TABLE staff_department_assignments (staff_id VARCHAR)",
        "answer": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
        "db_id": "department_store"
    },
    {
        "question": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "context": "CREATE TABLE addresses (address_id VARCHAR, address_details VARCHAR); CREATE TABLE supplier_addresses (supplier_id VARCHAR, address_id VARCHAR); CREATE TABLE Suppliers (supplier_name VARCHAR, supplier_phone VARCHAR, supplier_id VARCHAR)",
        "answer": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
        "db_id": "department_store"
    },
    {
        "question": "What are the phone numbers of all customers and suppliers.",
        "context": "CREATE TABLE suppliers (customer_phone VARCHAR, supplier_phone VARCHAR); CREATE TABLE customers (customer_phone VARCHAR, supplier_phone VARCHAR)",
        "answer": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
        "db_id": "department_store"
    },
    {
        "question": "Return the ids of all products that were ordered more than three times or supplied more than 80000.",
        "context": "CREATE TABLE Order_Items (product_id VARCHAR, total_amount_purchased INTEGER); CREATE TABLE Product_Suppliers (product_id VARCHAR, total_amount_purchased INTEGER)",
        "answer": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
        "db_id": "department_store"
    },
    {
        "question": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "context": "CREATE TABLE products (product_id VARCHAR, product_name VARCHAR, product_price VARCHAR)",
        "answer": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900",
        "db_id": "department_store"
    },
    {
        "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
        "context": "CREATE TABLE Product_Suppliers (supplier_id VARCHAR, total_amount_purchased INTEGER)",
        "answer": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000",
        "db_id": "department_store"
    },
    {
        "question": "What are the average amount purchased and value purchased for the supplier who supplies the most products.",
        "context": "CREATE TABLE Product_Suppliers (total_amount_purchased INTEGER, total_value_purchased INTEGER, supplier_id VARCHAR)",
        "answer": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
        "db_id": "department_store"
    },
    {
        "question": "What is the largest and smallest customer codes?",
        "context": "CREATE TABLE Customers (customer_code INTEGER)",
        "answer": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "db_id": "department_store"
    },
    {
        "question": "List the names of all the distinct customers who bought a keyboard.",
        "context": "CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
        "db_id": "department_store"
    },
    {
        "question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.",
        "context": "CREATE TABLE product_suppliers (supplier_id VARCHAR, product_id VARCHAR); CREATE TABLE suppliers (supplier_name VARCHAR, supplier_phone VARCHAR, supplier_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR)",
        "answer": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"",
        "db_id": "department_store"
    },
    {
        "question": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
        "context": "CREATE TABLE products (product_type_code VARCHAR, product_price INTEGER)",
        "answer": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
        "db_id": "department_store"
    },
    {
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "context": "CREATE TABLE customer_orders (order_id VARCHAR, customer_id VARCHAR, order_status_code VARCHAR, order_date VARCHAR)",
        "answer": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
        "db_id": "department_store"
    },
    {
        "question": "Find the names of products that were bought by at least two distinct customers.",
        "context": "CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE customer_orders (order_id VARCHAR, customer_id VARCHAR); CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR)",
        "answer": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "db_id": "department_store"
    },
    {
        "question": "Find the names of customers who have bought by at least three distinct products.",
        "context": "CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "db_id": "department_store"
    },
    {
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "context": "CREATE TABLE staff (staff_name VARCHAR, staff_gender VARCHAR, staff_id VARCHAR); CREATE TABLE Staff_Department_Assignments (staff_id VARCHAR, job_title_code VARCHAR)",
        "answer": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "db_id": "department_store"
    },
    {
        "question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR, customer_address VARCHAR, payment_method_code VARCHAR)",
        "answer": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
        "db_id": "department_store"
    },
    {
        "question": "Find the average price of all product clothes.",
        "context": "CREATE TABLE products (product_price INTEGER, product_type_code VARCHAR)",
        "answer": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
        "db_id": "department_store"
    },
    {
        "question": "Find the name of the most expensive hardware product.",
        "context": "CREATE TABLE products (product_name VARCHAR, product_type_code VARCHAR, product_price VARCHAR)",
        "answer": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
        "db_id": "department_store"
    },
    {
        "question": "List the description of all aircrafts.",
        "context": "CREATE TABLE aircraft (Description VARCHAR)",
        "answer": "SELECT Description FROM aircraft",
        "db_id": "aircraft"
    },
    {
        "question": "What is the average number of international passengers of all airports?",
        "context": "CREATE TABLE airport (International_Passengers INTEGER)",
        "answer": "SELECT avg(International_Passengers) FROM airport",
        "db_id": "aircraft"
    },
    {
        "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
        "context": "CREATE TABLE airport (International_Passengers VARCHAR, Domestic_Passengers VARCHAR, Airport_Name VARCHAR)",
        "answer": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
        "db_id": "aircraft"
    },
    {
        "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
        "context": "CREATE TABLE airport (Domestic_Passengers INTEGER, Airport_Name VARCHAR)",
        "answer": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
        "db_id": "aircraft"
    },
    {
        "question": "What are the maximum and minimum number of transit passengers of all aiports.",
        "context": "CREATE TABLE airport (Transit_Passengers INTEGER)",
        "answer": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
        "db_id": "aircraft"
    },
    {
        "question": "What are the name of pilots aged 25 or older?",
        "context": "CREATE TABLE pilot (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM pilot WHERE Age  >=  25",
        "db_id": "aircraft"
    },
    {
        "question": "List all pilot names in ascending alphabetical order.",
        "context": "CREATE TABLE pilot (Name VARCHAR)",
        "answer": "SELECT Name FROM pilot ORDER BY Name ASC",
        "db_id": "aircraft"
    },
    {
        "question": "List names of all pilot aged 30 or younger in descending alphabetical order.",
        "context": "CREATE TABLE pilot (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
        "db_id": "aircraft"
    },
    {
        "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
        "context": "CREATE TABLE airport (Airport_ID VARCHAR, Airport_Name VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR); CREATE TABLE airport_aircraft (Aircraft_ID VARCHAR, Airport_ID VARCHAR)",
        "answer": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
        "db_id": "aircraft"
    },
    {
        "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
        "context": "CREATE TABLE airport (Airport_ID VARCHAR, Total_Passengers INTEGER); CREATE TABLE aircraft (Aircraft VARCHAR, Description VARCHAR, Aircraft_ID VARCHAR); CREATE TABLE airport_aircraft (Aircraft_ID VARCHAR, Airport_ID VARCHAR)",
        "answer": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
        "db_id": "aircraft"
    },
    {
        "question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
        "context": "CREATE TABLE airport (Total_Passengers INTEGER, Airport_ID VARCHAR); CREATE TABLE aircraft (Aircraft_ID VARCHAR, Aircraft VARCHAR); CREATE TABLE airport_aircraft (Aircraft_ID VARCHAR, Airport_ID VARCHAR)",
        "answer": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
        "db_id": "aircraft"
    },
    {
        "question": "Please list the location and the winning aircraft name.",
        "context": "CREATE TABLE MATCH (Location VARCHAR, Winning_Aircraft VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR)",
        "answer": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
        "db_id": "aircraft"
    },
    {
        "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
        "context": "CREATE TABLE MATCH (Winning_Aircraft VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR)",
        "answer": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "aircraft"
    },
    {
        "question": "List the names of aircrafts and the number of times it won matches.",
        "context": "CREATE TABLE MATCH (Winning_Aircraft VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR)",
        "answer": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
        "db_id": "aircraft"
    },
    {
        "question": "List names of all pilot in descending order of age.",
        "context": "CREATE TABLE pilot (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM pilot ORDER BY Age DESC",
        "db_id": "aircraft"
    },
    {
        "question": "List the names of aircrafts and that won matches at least twice.",
        "context": "CREATE TABLE MATCH (Winning_Aircraft VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR)",
        "answer": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
        "db_id": "aircraft"
    },
    {
        "question": "List the names of aircrafts and that did not win any match.",
        "context": "CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR, Winning_Aircraft VARCHAR); CREATE TABLE MATCH (Aircraft VARCHAR, Aircraft_ID VARCHAR, Winning_Aircraft VARCHAR)",
        "answer": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
        "db_id": "aircraft"
    },
    {
        "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
        "context": "CREATE TABLE airport (Airport_ID VARCHAR, Airport_Name VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR); CREATE TABLE airport_aircraft (Aircraft_ID VARCHAR, Airport_ID VARCHAR)",
        "answer": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
        "db_id": "aircraft"
    },
    {
        "question": "Show all information on the airport that has the largest number of international passengers.",
        "context": "CREATE TABLE airport (International_Passengers VARCHAR)",
        "answer": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
        "db_id": "aircraft"
    },
    {
        "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
        "context": "CREATE TABLE MATCH (winning_pilot VARCHAR); CREATE TABLE pilot (name VARCHAR, age INTEGER, pilot_id VARCHAR)",
        "answer": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
        "db_id": "aircraft"
    },
    {
        "question": "what is the name and age of the youngest winning pilot?",
        "context": "CREATE TABLE pilot (name VARCHAR, age VARCHAR, pilot_id VARCHAR); CREATE TABLE MATCH (winning_pilot VARCHAR)",
        "answer": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
        "db_id": "aircraft"
    },
    {
        "question": "find the name of pilots who did not win the matches held in the country of Australia.",
        "context": "CREATE TABLE MATCH (name VARCHAR, pilot_id VARCHAR, Winning_Pilot VARCHAR, country VARCHAR); CREATE TABLE pilot (name VARCHAR, pilot_id VARCHAR, Winning_Pilot VARCHAR, country VARCHAR)",
        "answer": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
        "db_id": "aircraft"
    },
    {
        "question": "How many residents does each property have? List property id and resident count.",
        "context": "CREATE TABLE properties (property_id VARCHAR); CREATE TABLE residents (property_id VARCHAR)",
        "answer": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "context": "CREATE TABLE services (service_type_code VARCHAR, organization_id VARCHAR); CREATE TABLE organizations (organization_id VARCHAR, organization_details VARCHAR)",
        "answer": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
        "context": "CREATE TABLE Residents_Services (resident_id VARCHAR); CREATE TABLE Residents (resident_id VARCHAR, other_details VARCHAR)",
        "answer": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What is the maximum number that a certain service is provided? List the service id, details and number.",
        "context": "CREATE TABLE Services (service_id VARCHAR, service_details VARCHAR); CREATE TABLE Residents_Services (service_id VARCHAR)",
        "answer": "SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "List the id and type of each thing, and the details of the organization that owns it.",
        "context": "CREATE TABLE Organizations (organization_details VARCHAR, organization_id VARCHAR); CREATE TABLE Things (thing_id VARCHAR, type_of_Thing_Code VARCHAR, organization_id VARCHAR)",
        "answer": "SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What are the id and details of the customers who have at least 3 events?",
        "context": "CREATE TABLE Customers (customer_id VARCHAR, customer_details VARCHAR); CREATE TABLE Customer_Events (customer_id VARCHAR)",
        "answer": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What is each customer's move in date, and the corresponding customer id and details?",
        "context": "CREATE TABLE Customer_Events (date_moved_in VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_details VARCHAR)",
        "answer": "SELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "Which events have the number of notes between one and three? List the event id and the property id.",
        "context": "CREATE TABLE Customer_Events (Customer_Event_ID VARCHAR, property_id VARCHAR, customer_event_id VARCHAR); CREATE TABLE Customer_Event_Notes (Customer_Event_ID VARCHAR)",
        "answer": "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "context": "CREATE TABLE Timed_Status_of_Things (thing_id VARCHAR, Status_of_Thing_Code VARCHAR, Date_and_Date VARCHAR); CREATE TABLE Things (thing_id VARCHAR, Type_of_Thing_Code VARCHAR)",
        "answer": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "context": "CREATE TABLE Timed_Locations_of_Things (Location_Code VARCHAR, thing_id VARCHAR); CREATE TABLE Things (thing_id VARCHAR, service_details VARCHAR)",
        "answer": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "How many different status codes of things are there?",
        "context": "CREATE TABLE Timed_Status_of_Things (Status_of_Thing_Code VARCHAR)",
        "answer": "SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "Which organizations are not a parent organization of others? List the organization id.",
        "context": "CREATE TABLE organizations (organization_id VARCHAR, parent_organization_id VARCHAR)",
        "answer": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "When is the last day any resident moved in?",
        "context": "CREATE TABLE Residents (date_moved_in INTEGER)",
        "answer": "SELECT max(date_moved_in) FROM Residents",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What are the resident details containing the substring 'Miss'?",
        "context": "CREATE TABLE Residents (other_details VARCHAR)",
        "answer": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "List the customer event id and the corresponding move in date and property id.",
        "context": "CREATE TABLE customer_events (customer_event_id VARCHAR, date_moved_in VARCHAR, property_id VARCHAR)",
        "answer": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "How many customers did not have any event?",
        "context": "CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE customer_events (customer_id VARCHAR)",
        "answer": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What are the distinct move in dates of the residents?",
        "context": "CREATE TABLE residents (date_moved_in VARCHAR)",
        "answer": "SELECT DISTINCT date_moved_in FROM residents",
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "List the locations of schools in ascending order of enrollment.",
        "context": "CREATE TABLE school (LOCATION VARCHAR, Enrollment VARCHAR)",
        "answer": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
        "db_id": "school_player"
    },
    {
        "question": "List the locations of schools in descending order of founded year.",
        "context": "CREATE TABLE school (LOCATION VARCHAR, Founded VARCHAR)",
        "answer": "SELECT LOCATION FROM school ORDER BY Founded DESC",
        "db_id": "school_player"
    },
    {
        "question": "What are the enrollments of schools whose denomination is not \"Catholic\"?",
        "context": "CREATE TABLE school (Enrollment VARCHAR, Denomination VARCHAR)",
        "answer": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"",
        "db_id": "school_player"
    },
    {
        "question": "What is the average enrollment of schools?",
        "context": "CREATE TABLE school (Enrollment INTEGER)",
        "answer": "SELECT avg(Enrollment) FROM school",
        "db_id": "school_player"
    },
    {
        "question": "What are the teams of the players, sorted in ascending alphabetical order?",
        "context": "CREATE TABLE player (Team VARCHAR)",
        "answer": "SELECT Team FROM player ORDER BY Team ASC",
        "db_id": "school_player"
    },
    {
        "question": "Find the team of the player of the highest age.",
        "context": "CREATE TABLE player (Team VARCHAR, Age VARCHAR)",
        "answer": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1",
        "db_id": "school_player"
    },
    {
        "question": "List the teams of the players with the top 5 largest ages.",
        "context": "CREATE TABLE player (Team VARCHAR, Age VARCHAR)",
        "answer": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
        "db_id": "school_player"
    },
    {
        "question": "For each player, show the team and the location of school they belong to.",
        "context": "CREATE TABLE school (Location VARCHAR, School_ID VARCHAR); CREATE TABLE player (Team VARCHAR, School_ID VARCHAR)",
        "answer": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",
        "db_id": "school_player"
    },
    {
        "question": "Show the locations of schools that have more than 1 player.",
        "context": "CREATE TABLE player (School_ID VARCHAR); CREATE TABLE school (Location VARCHAR, School_ID VARCHAR)",
        "answer": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
        "db_id": "school_player"
    },
    {
        "question": "Show the denomination of the school that has the most players.",
        "context": "CREATE TABLE player (School_ID VARCHAR); CREATE TABLE school (Denomination VARCHAR, School_ID VARCHAR)",
        "answer": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "school_player"
    },
    {
        "question": "Show locations and nicknames of schools.",
        "context": "CREATE TABLE school (Location VARCHAR, School_ID VARCHAR); CREATE TABLE school_details (Nickname VARCHAR, School_ID VARCHAR)",
        "answer": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID",
        "db_id": "school_player"
    },
    {
        "question": "Please show different denominations and the corresponding number of schools.",
        "context": "CREATE TABLE school (Denomination VARCHAR)",
        "answer": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination",
        "db_id": "school_player"
    },
    {
        "question": "Please show different denominations and the corresponding number of schools in descending order.",
        "context": "CREATE TABLE school (Denomination VARCHAR)",
        "answer": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC",
        "db_id": "school_player"
    },
    {
        "question": "List the school color of the school that has the largest enrollment.",
        "context": "CREATE TABLE school (School_Colors VARCHAR, Enrollment VARCHAR)",
        "answer": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
        "db_id": "school_player"
    },
    {
        "question": "List the locations of schools that do not have any player.",
        "context": "CREATE TABLE school (LOCATION VARCHAR, School_ID VARCHAR); CREATE TABLE Player (LOCATION VARCHAR, School_ID VARCHAR)",
        "answer": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)",
        "db_id": "school_player"
    },
    {
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "context": "CREATE TABLE school (Denomination VARCHAR, Founded INTEGER)",
        "answer": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "db_id": "school_player"
    },
    {
        "question": "Show the nicknames of schools that are not in division 1.",
        "context": "CREATE TABLE school_details (Nickname VARCHAR, Division VARCHAR)",
        "answer": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "db_id": "school_player"
    },
    {
        "question": "Show the denomination shared by more than one school.",
        "context": "CREATE TABLE school (Denomination VARCHAR)",
        "answer": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
        "db_id": "school_player"
    },
    {
        "question": "Find all the distinct district names ordered by city area in descending.",
        "context": "CREATE TABLE district (District_name VARCHAR, city_area VARCHAR)",
        "answer": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
        "db_id": "store_product"
    },
    {
        "question": "Find the list of page size which have more than 3 product listed",
        "context": "CREATE TABLE product (max_page_size VARCHAR)",
        "answer": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3",
        "db_id": "store_product"
    },
    {
        "question": "Find the name and population of district with population between 200000 and 2000000",
        "context": "CREATE TABLE district (District_name VARCHAR, City_Population INTEGER)",
        "answer": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
        "db_id": "store_product"
    },
    {
        "question": "Find the name all districts with city area greater than 10 or population larger than 100000",
        "context": "CREATE TABLE district (district_name VARCHAR, city_area VARCHAR, City_Population VARCHAR)",
        "answer": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000",
        "db_id": "store_product"
    },
    {
        "question": "Which district has the largest population?",
        "context": "CREATE TABLE district (district_name VARCHAR, city_population VARCHAR)",
        "answer": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
        "db_id": "store_product"
    },
    {
        "question": "Which district has the least area?",
        "context": "CREATE TABLE district (district_name VARCHAR, city_area VARCHAR)",
        "answer": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
        "db_id": "store_product"
    },
    {
        "question": "Find the total population of the top 3 districts with the largest area.",
        "context": "CREATE TABLE district (city_population INTEGER, city_area VARCHAR)",
        "answer": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3",
        "db_id": "store_product"
    },
    {
        "question": "Find all types of store and number of them.",
        "context": "CREATE TABLE store (TYPE VARCHAR)",
        "answer": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE",
        "db_id": "store_product"
    },
    {
        "question": "Find the names of all stores in Khanewal District.",
        "context": "CREATE TABLE district (district_id VARCHAR, district_name VARCHAR); CREATE TABLE store_district (store_id VARCHAR, district_id VARCHAR); CREATE TABLE store (store_name VARCHAR, store_id VARCHAR)",
        "answer": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
        "db_id": "store_product"
    },
    {
        "question": "Find all the stores in the district with the most population.",
        "context": "CREATE TABLE store_district (store_id VARCHAR); CREATE TABLE district (district_id VARCHAR, city_population VARCHAR); CREATE TABLE store (store_name VARCHAR, store_id VARCHAR)",
        "answer": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
        "db_id": "store_product"
    },
    {
        "question": "Which city is the headquarter of the store named \"Blackville\" in?",
        "context": "CREATE TABLE store (store_id VARCHAR, store_name VARCHAR); CREATE TABLE district (headquartered_city VARCHAR, district_id VARCHAR); CREATE TABLE store_district (store_id VARCHAR, district_id VARCHAR)",
        "answer": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"",
        "db_id": "store_product"
    },
    {
        "question": "Find the number of stores in each city.",
        "context": "CREATE TABLE district (headquartered_city VARCHAR, district_id VARCHAR); CREATE TABLE store_district (store_id VARCHAR, district_id VARCHAR); CREATE TABLE store (store_id VARCHAR)",
        "answer": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",
        "db_id": "store_product"
    },
    {
        "question": "Find the city with the most number of stores.",
        "context": "CREATE TABLE district (headquartered_city VARCHAR, district_id VARCHAR); CREATE TABLE store_district (store_id VARCHAR, district_id VARCHAR); CREATE TABLE store (store_id VARCHAR)",
        "answer": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
        "db_id": "store_product"
    },
    {
        "question": "What is the average pages per minute color?",
        "context": "CREATE TABLE product (pages_per_minute_color INTEGER)",
        "answer": "SELECT avg(pages_per_minute_color) FROM product",
        "db_id": "store_product"
    },
    {
        "question": "What products are available at store named \"Miramichi\"?",
        "context": "CREATE TABLE store_product (product_id VARCHAR, store_id VARCHAR); CREATE TABLE store (store_id VARCHAR, store_name VARCHAR); CREATE TABLE product (product VARCHAR, product_id VARCHAR)",
        "answer": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"",
        "db_id": "store_product"
    },
    {
        "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "context": "CREATE TABLE product (product VARCHAR, max_page_size VARCHAR, pages_per_minute_color VARCHAR)",
        "answer": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
        "db_id": "store_product"
    },
    {
        "question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
        "context": "CREATE TABLE product (product VARCHAR, max_page_size VARCHAR, pages_per_minute_color VARCHAR)",
        "answer": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "db_id": "store_product"
    },
    {
        "question": "Find all the product whose name contains the word \"Scanner\".",
        "context": "CREATE TABLE product (product VARCHAR)",
        "answer": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
        "db_id": "store_product"
    },
    {
        "question": "Find the most prominent max page size among all the products.",
        "context": "CREATE TABLE product (max_page_size VARCHAR)",
        "answer": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
        "db_id": "store_product"
    },
    {
        "question": "Find the name of the products that are not using the most frequently-used max page size.",
        "context": "CREATE TABLE product (product VARCHAR, max_page_size VARCHAR)",
        "answer": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
        "db_id": "store_product"
    },
    {
        "question": "Find the total population of the districts where the area is bigger than the average city area.",
        "context": "CREATE TABLE district (city_population INTEGER, city_area INTEGER)",
        "answer": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)",
        "db_id": "store_product"
    },
    {
        "question": "Find the names of districts where have both city mall and village store type stores.",
        "context": "CREATE TABLE district (District_name VARCHAR, district_id VARCHAR); CREATE TABLE store (store_id VARCHAR, Type VARCHAR); CREATE TABLE store_district (store_id VARCHAR, district_id VARCHAR)",
        "answer": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"",
        "db_id": "store_product"
    },
    {
        "question": "What is the total enrollment number of all colleges?",
        "context": "CREATE TABLE College (enr INTEGER)",
        "answer": "SELECT sum(enr) FROM College",
        "db_id": "soccer_2"
    },
    {
        "question": "What is the average enrollment number?",
        "context": "CREATE TABLE College (enr INTEGER)",
        "answer": "SELECT avg(enr) FROM College",
        "db_id": "soccer_2"
    },
    {
        "question": "How many colleges in total?",
        "context": "CREATE TABLE College (Id VARCHAR)",
        "answer": "SELECT count(*) FROM College",
        "db_id": "soccer_2"
    },
    {
        "question": "How many players have more than 1000 hours of training?",
        "context": "CREATE TABLE Player (HS INTEGER)",
        "answer": "SELECT count(*) FROM Player WHERE HS  >  1000",
        "db_id": "soccer_2"
    },
    {
        "question": "How many colleges has more than 15000 students?",
        "context": "CREATE TABLE College (enr INTEGER)",
        "answer": "SELECT count(*) FROM College WHERE enr  >  15000",
        "db_id": "soccer_2"
    },
    {
        "question": "What is the average training hours of all players?",
        "context": "CREATE TABLE Player (HS INTEGER)",
        "answer": "SELECT avg(HS) FROM Player",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the name and training hours of players whose hours are below 1500.",
        "context": "CREATE TABLE Player (pName VARCHAR, HS INTEGER)",
        "answer": "SELECT pName ,  HS FROM Player WHERE HS  <  1500",
        "db_id": "soccer_2"
    },
    {
        "question": "How many different colleges do attend the tryout test?",
        "context": "CREATE TABLE tryout (cName VARCHAR)",
        "answer": "SELECT count(DISTINCT cName) FROM tryout",
        "db_id": "soccer_2"
    },
    {
        "question": "What are the unique types of player positions in the tryout?",
        "context": "CREATE TABLE tryout (pPos VARCHAR)",
        "answer": "SELECT count(DISTINCT pPos) FROM tryout",
        "db_id": "soccer_2"
    },
    {
        "question": "How many students got accepted after the tryout?",
        "context": "CREATE TABLE tryout (decision VARCHAR)",
        "answer": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "db_id": "soccer_2"
    },
    {
        "question": "How many students whose are playing the role of goalie?",
        "context": "CREATE TABLE tryout (pPos VARCHAR)",
        "answer": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the max, average and min training hours of all players.",
        "context": "CREATE TABLE Player (HS INTEGER)",
        "answer": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player",
        "db_id": "soccer_2"
    },
    {
        "question": "What is average enrollment of colleges in the state FL?",
        "context": "CREATE TABLE College (enr INTEGER, state VARCHAR)",
        "answer": "SELECT avg(enr) FROM College WHERE state  =  'FL'",
        "db_id": "soccer_2"
    },
    {
        "question": "What are the names of players whose training hours is between 500 and 1500?",
        "context": "CREATE TABLE Player (pName VARCHAR, HS INTEGER)",
        "answer": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the players whose names contain letter 'a'.",
        "context": "CREATE TABLE Player (pName VARCHAR)",
        "answer": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "context": "CREATE TABLE College (cName VARCHAR, enr VARCHAR, state VARCHAR)",
        "answer": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "db_id": "soccer_2"
    },
    {
        "question": "List all information about college sorted by enrollment number in the ascending order.",
        "context": "CREATE TABLE College (enr VARCHAR)",
        "answer": "SELECT * FROM College ORDER BY enr",
        "db_id": "soccer_2"
    },
    {
        "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
        "context": "CREATE TABLE College (cName VARCHAR, enr INTEGER)",
        "answer": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the name of players whose card is yes in the descending order of training hours.",
        "context": "CREATE TABLE Player (pName VARCHAR, yCard VARCHAR, HS VARCHAR)",
        "answer": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the name of different colleges involved in the tryout in alphabetical order.",
        "context": "CREATE TABLE tryout (cName VARCHAR)",
        "answer": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "db_id": "soccer_2"
    },
    {
        "question": "Which position is most popular among players in the tryout?",
        "context": "CREATE TABLE tryout (pPos VARCHAR)",
        "answer": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the number of students who participate in the tryout for each college ordered by descending count.",
        "context": "CREATE TABLE tryout (cName VARCHAR)",
        "answer": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "db_id": "soccer_2"
    },
    {
        "question": "What is minimum hours of the students playing in different position?",
        "context": "CREATE TABLE player (HS INTEGER, pID VARCHAR); CREATE TABLE tryout (pPos VARCHAR, pID VARCHAR)",
        "answer": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos",
        "db_id": "soccer_2"
    },
    {
        "question": "What are the names of schools with the top 3 largest size?",
        "context": "CREATE TABLE college (cName VARCHAR, enr VARCHAR)",
        "answer": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
        "db_id": "soccer_2"
    },
    {
        "question": "What is the name of school that has the smallest enrollment in each state?",
        "context": "CREATE TABLE college (cName VARCHAR, state VARCHAR, enr INTEGER)",
        "answer": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the states where have some college students in tryout.",
        "context": "CREATE TABLE college (cName VARCHAR); CREATE TABLE tryout (cName VARCHAR)",
        "answer": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the states where have some college students in tryout and their decisions are yes.",
        "context": "CREATE TABLE tryout (cName VARCHAR, decision VARCHAR); CREATE TABLE college (state VARCHAR, cName VARCHAR)",
        "answer": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the name and college of students whose decisions are yes in the tryout.",
        "context": "CREATE TABLE tryout (cName VARCHAR, pID VARCHAR, decision VARCHAR); CREATE TABLE player (pName VARCHAR, pID VARCHAR)",
        "answer": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the name of all students who were in the tryout sorted in alphabetic order.",
        "context": "CREATE TABLE tryout (pID VARCHAR); CREATE TABLE player (pName VARCHAR, pID VARCHAR)",
        "answer": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the name and hours of the students whose tryout decision is yes.",
        "context": "CREATE TABLE player (pName VARCHAR, HS VARCHAR, pID VARCHAR); CREATE TABLE tryout (pID VARCHAR, decision VARCHAR)",
        "answer": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the states of the colleges that have students in the tryout who played in striker position.",
        "context": "CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR); CREATE TABLE college (state VARCHAR, cName VARCHAR)",
        "answer": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "context": "CREATE TABLE tryout (pID VARCHAR, decision VARCHAR, pPos VARCHAR); CREATE TABLE player (pName VARCHAR, pID VARCHAR)",
        "answer": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the state of the college which player Charles is attending.",
        "context": "CREATE TABLE tryout (cName VARCHAR, pID VARCHAR); CREATE TABLE player (pID VARCHAR, pName VARCHAR); CREATE TABLE college (state VARCHAR, cName VARCHAR)",
        "answer": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the average and maximum hours for the students whose tryout decision is yes.",
        "context": "CREATE TABLE player (HS INTEGER, pID VARCHAR); CREATE TABLE tryout (pID VARCHAR, decision VARCHAR)",
        "answer": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the average hours for the students whose tryout decision is no.",
        "context": "CREATE TABLE player (HS INTEGER, pID VARCHAR); CREATE TABLE tryout (pID VARCHAR, decision VARCHAR)",
        "answer": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
        "db_id": "soccer_2"
    },
    {
        "question": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?",
        "context": "CREATE TABLE player (HS INTEGER, pID VARCHAR); CREATE TABLE tryout (pPos VARCHAR, pID VARCHAR)",
        "answer": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
        "db_id": "soccer_2"
    },
    {
        "question": "Which colleges do the tryout players whose name starts with letter D go to?",
        "context": "CREATE TABLE tryout (cName VARCHAR, pID VARCHAR); CREATE TABLE player (pID VARCHAR, pName VARCHAR)",
        "answer": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "db_id": "soccer_2"
    },
    {
        "question": "Which college has any student who is a goalie and succeeded in the tryout.",
        "context": "CREATE TABLE tryout (cName VARCHAR, decision VARCHAR, pPos VARCHAR)",
        "answer": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the name of the tryout players who are from the college with largest size.",
        "context": "CREATE TABLE college (cName VARCHAR, enr VARCHAR); CREATE TABLE tryout (pID VARCHAR, cName VARCHAR); CREATE TABLE player (pName VARCHAR, pID VARCHAR)",
        "answer": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)",
        "db_id": "soccer_2"
    },
    {
        "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "context": "CREATE TABLE tryout (cName VARCHAR, decision VARCHAR); CREATE TABLE college (state VARCHAR, enr VARCHAR, cName VARCHAR)",
        "answer": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "context": "CREATE TABLE College (cName VARCHAR, enr VARCHAR, state VARCHAR)",
        "answer": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the names of schools that have some students playing in goalie and mid positions.",
        "context": "CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR)",
        "answer": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the names of states that have some college students playing in goalie and mid positions.",
        "context": "CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR); CREATE TABLE college (state VARCHAR, cName VARCHAR)",
        "answer": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'",
        "db_id": "soccer_2"
    },
    {
        "question": "How many schools have some students playing in goalie and mid positions.",
        "context": "CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR)",
        "answer": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the names of schools that have some players in the mid position but not in the goalie position.",
        "context": "CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR)",
        "answer": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the names of states that have some college students playing in the mid position but not in the goalie position.",
        "context": "CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR); CREATE TABLE college (state VARCHAR, cName VARCHAR)",
        "answer": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'",
        "db_id": "soccer_2"
    },
    {
        "question": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "context": "CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR); CREATE TABLE college (state VARCHAR, cName VARCHAR)",
        "answer": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "db_id": "soccer_2"
    },
    {
        "question": "Find the states where have the colleges whose enrollments are less than the largest size.",
        "context": "CREATE TABLE college (state VARCHAR, enr INTEGER)",
        "answer": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "db_id": "soccer_2"
    },
    {
        "question": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.",
        "context": "CREATE TABLE college (cName VARCHAR, enr INTEGER, state VARCHAR)",
        "answer": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
        "db_id": "soccer_2"
    },
    {
        "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.",
        "context": "CREATE TABLE college (cName VARCHAR, enr INTEGER, state VARCHAR)",
        "answer": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
        "db_id": "soccer_2"
    },
    {
        "question": "What is the total number of enrollment of schools that do not have any goalie player?",
        "context": "CREATE TABLE college (enr INTEGER, cName VARCHAR, pPos VARCHAR); CREATE TABLE tryout (enr INTEGER, cName VARCHAR, pPos VARCHAR)",
        "answer": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
        "db_id": "soccer_2"
    },
    {
        "question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?",
        "context": "CREATE TABLE college (state VARCHAR, enr INTEGER)",
        "answer": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)",
        "db_id": "soccer_2"
    },
    {
        "question": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?",
        "context": "CREATE TABLE college (state VARCHAR, enr INTEGER)",
        "answer": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)",
        "db_id": "soccer_2"
    },
    {
        "question": "How many devices are there?",
        "context": "CREATE TABLE device (Id VARCHAR)",
        "answer": "SELECT count(*) FROM device",
        "db_id": "device"
    },
    {
        "question": "List the carriers of devices in ascending alphabetical order.",
        "context": "CREATE TABLE device (Carrier VARCHAR)",
        "answer": "SELECT Carrier FROM device ORDER BY Carrier ASC",
        "db_id": "device"
    },
    {
        "question": "What are the carriers of devices whose software platforms are not \"Android\"?",
        "context": "CREATE TABLE device (Carrier VARCHAR, Software_Platform VARCHAR)",
        "answer": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
        "db_id": "device"
    },
    {
        "question": "What are the names of shops in ascending order of open year?",
        "context": "CREATE TABLE shop (Shop_Name VARCHAR, Open_Year VARCHAR)",
        "answer": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC",
        "db_id": "device"
    },
    {
        "question": "What is the average quantity of stocks?",
        "context": "CREATE TABLE stock (Quantity INTEGER)",
        "answer": "SELECT avg(Quantity) FROM stock",
        "db_id": "device"
    },
    {
        "question": "What are the names and location of the shops in ascending alphabetical order of name.",
        "context": "CREATE TABLE shop (Shop_Name VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC",
        "db_id": "device"
    },
    {
        "question": "How many different software platforms are there for devices?",
        "context": "CREATE TABLE device (Software_Platform VARCHAR)",
        "answer": "SELECT count(DISTINCT Software_Platform) FROM device",
        "db_id": "device"
    },
    {
        "question": "List the open date of open year of the shop named \"Apple\".",
        "context": "CREATE TABLE shop (Open_Date VARCHAR, Open_Year VARCHAR, Shop_Name VARCHAR)",
        "answer": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"",
        "db_id": "device"
    },
    {
        "question": "List the name of the shop with the latest open year.",
        "context": "CREATE TABLE shop (Shop_Name VARCHAR, Open_Year VARCHAR)",
        "answer": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1",
        "db_id": "device"
    },
    {
        "question": "Show names of shops and the carriers of devices they have in stock.",
        "context": "CREATE TABLE shop (Shop_Name VARCHAR, Shop_ID VARCHAR); CREATE TABLE stock (Device_ID VARCHAR, Shop_ID VARCHAR); CREATE TABLE device (Carrier VARCHAR, Device_ID VARCHAR)",
        "answer": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID",
        "db_id": "device"
    },
    {
        "question": "Show names of shops that have more than one kind of device in stock.",
        "context": "CREATE TABLE shop (Shop_Name VARCHAR, Shop_ID VARCHAR); CREATE TABLE stock (Shop_ID VARCHAR)",
        "answer": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1",
        "db_id": "device"
    },
    {
        "question": "Show the name of the shop that has the most kind of devices in stock.",
        "context": "CREATE TABLE shop (Shop_Name VARCHAR, Shop_ID VARCHAR); CREATE TABLE stock (Shop_ID VARCHAR)",
        "answer": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "device"
    },
    {
        "question": "Show the name of the shop that have the largest quantity of devices in stock.",
        "context": "CREATE TABLE stock (Shop_ID VARCHAR, quantity INTEGER); CREATE TABLE shop (Shop_Name VARCHAR, Shop_ID VARCHAR)",
        "answer": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
        "db_id": "device"
    },
    {
        "question": "Please show different software platforms and the corresponding number of devices using each.",
        "context": "CREATE TABLE device (Software_Platform VARCHAR)",
        "answer": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform",
        "db_id": "device"
    },
    {
        "question": "Please show the software platforms of devices in descending order of the count.",
        "context": "CREATE TABLE device (Software_Platform VARCHAR)",
        "answer": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
        "db_id": "device"
    },
    {
        "question": "List the software platform shared by the greatest number of devices.",
        "context": "CREATE TABLE device (Software_Platform VARCHAR)",
        "answer": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "device"
    },
    {
        "question": "List the names of shops that have no devices in stock.",
        "context": "CREATE TABLE shop (Shop_Name VARCHAR, Shop_ID VARCHAR); CREATE TABLE stock (Shop_Name VARCHAR, Shop_ID VARCHAR)",
        "answer": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
        "db_id": "device"
    },
    {
        "question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "context": "CREATE TABLE shop (LOCATION VARCHAR, Open_Year INTEGER)",
        "answer": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008",
        "db_id": "device"
    },
    {
        "question": "List the carriers of devices that have no devices in stock.",
        "context": "CREATE TABLE stock (Carrier VARCHAR, Device_ID VARCHAR); CREATE TABLE device (Carrier VARCHAR, Device_ID VARCHAR)",
        "answer": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
        "db_id": "device"
    },
    {
        "question": "Show the carriers of devices in stock at more than one shop.",
        "context": "CREATE TABLE stock (Device_ID VARCHAR); CREATE TABLE device (Carrier VARCHAR, Device_ID VARCHAR)",
        "answer": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1",
        "db_id": "device"
    },
    {
        "question": "How many bookings do we have?",
        "context": "CREATE TABLE BOOKINGS (Id VARCHAR)",
        "answer": "SELECT count(*) FROM BOOKINGS",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "List the order dates of all the bookings.",
        "context": "CREATE TABLE BOOKINGS (Order_Date VARCHAR)",
        "answer": "SELECT Order_Date FROM BOOKINGS",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
        "context": "CREATE TABLE BOOKINGS (Planned_Delivery_Date VARCHAR, Actual_Delivery_Date VARCHAR)",
        "answer": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the phone and email for customer Harold?",
        "context": "CREATE TABLE CUSTOMERS (Customer_Phone VARCHAR, Customer_Email_Address VARCHAR, Customer_Name VARCHAR)",
        "answer": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show all the Store_Name of drama workshop groups.",
        "context": "CREATE TABLE Drama_Workshop_Groups (Store_Name VARCHAR)",
        "answer": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "context": "CREATE TABLE INVOICES (Order_Quantity INTEGER)",
        "answer": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the distinct payment method codes in all the invoices?",
        "context": "CREATE TABLE INVOICES (payment_method_code VARCHAR)",
        "answer": "SELECT DISTINCT payment_method_code FROM INVOICES",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the description of the marketing region China?",
        "context": "CREATE TABLE Marketing_Regions (Marketing_Region_Descriptrion VARCHAR, Marketing_Region_Name VARCHAR)",
        "answer": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show all the distinct product names with price higher than the average.",
        "context": "CREATE TABLE PRODUCTS (Product_Name VARCHAR, Product_Price INTEGER)",
        "answer": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the name of the most expensive product?",
        "context": "CREATE TABLE PRODUCTS (Product_Name VARCHAR, Product_Price VARCHAR)",
        "answer": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the phone number of the performer Ashley?",
        "context": "CREATE TABLE PERFORMERS (Customer_Phone VARCHAR, Customer_Name VARCHAR)",
        "answer": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show all payment method codes and the number of orders for each code.",
        "context": "CREATE TABLE INVOICES (payment_method_code VARCHAR)",
        "answer": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the payment method code used by the most orders?",
        "context": "CREATE TABLE INVOICES (payment_method_code VARCHAR)",
        "answer": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Which city is the address of the store named \"FJA Filming\" located in?",
        "context": "CREATE TABLE Addresses (City_Town VARCHAR, Address_ID VARCHAR); CREATE TABLE Stores (Address_ID VARCHAR, Store_Name VARCHAR)",
        "answer": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the states or counties of the address of the stores with marketing region code \"CA\"?",
        "context": "CREATE TABLE Addresses (State_County VARCHAR, Address_ID VARCHAR); CREATE TABLE Stores (Address_ID VARCHAR, Marketing_Region_Code VARCHAR)",
        "answer": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the name of the marketing region that the store Rob Dinning belongs to?",
        "context": "CREATE TABLE Marketing_Regions (Marketing_Region_Name VARCHAR, Marketing_Region_Code VARCHAR); CREATE TABLE Stores (Marketing_Region_Code VARCHAR, Store_Name VARCHAR)",
        "answer": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the descriptions of the service types with product price above 100?",
        "context": "CREATE TABLE Services (Service_Type_Code VARCHAR, Product_Price INTEGER); CREATE TABLE Ref_Service_Types (Service_Type_Description VARCHAR, Service_Type_Code VARCHAR)",
        "answer": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the description, code and the corresponding count of each service type?",
        "context": "CREATE TABLE Services (Service_Type_Code VARCHAR); CREATE TABLE Ref_Service_Types (Service_Type_Description VARCHAR, Service_Type_Code VARCHAR)",
        "answer": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the description and code of the type of service that is performed the most often?",
        "context": "CREATE TABLE Services (Service_Type_Code VARCHAR); CREATE TABLE Ref_Service_Types (Service_Type_Description VARCHAR, Service_Type_Code VARCHAR)",
        "answer": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the phones and emails of workshop groups in which services are performed?",
        "context": "CREATE TABLE Services (Workshop_Group_ID VARCHAR); CREATE TABLE Drama_Workshop_Groups (Store_Phone VARCHAR, Store_Email_Address VARCHAR, Workshop_Group_ID VARCHAR)",
        "answer": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the names of workshop groups in which services with product name \"film\" are performed?",
        "context": "CREATE TABLE Services (Workshop_Group_ID VARCHAR, Product_Name VARCHAR); CREATE TABLE Drama_Workshop_Groups (Store_Phone VARCHAR, Store_Email_Address VARCHAR, Workshop_Group_ID VARCHAR)",
        "answer": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the different product names? What is the average product price for each of them?",
        "context": "CREATE TABLE PRODUCTS (Product_Name VARCHAR, Product_Price INTEGER)",
        "answer": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the product names with average product price smaller than 1000000?",
        "context": "CREATE TABLE PRODUCTS (Product_Name VARCHAR, Product_Price INTEGER)",
        "answer": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the total order quantities of photo products?",
        "context": "CREATE TABLE ORDER_ITEMS (Order_Quantity INTEGER, Product_ID VARCHAR); CREATE TABLE Products (Product_ID VARCHAR, Product_Name VARCHAR)",
        "answer": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the order details of the products with price higher than 2000?",
        "context": "CREATE TABLE Products (Product_ID VARCHAR, Product_price INTEGER); CREATE TABLE ORDER_ITEMS (Other_Item_Details VARCHAR, Product_ID VARCHAR)",
        "answer": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the actual delivery dates of orders with quantity 1?",
        "context": "CREATE TABLE Customer_Orders (Actual_Delivery_Date VARCHAR, Order_ID VARCHAR); CREATE TABLE ORDER_ITEMS (Order_ID VARCHAR, Order_Quantity VARCHAR)",
        "answer": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the order dates of orders with price higher than 1000?",
        "context": "CREATE TABLE Products (Product_ID VARCHAR, Product_price INTEGER); CREATE TABLE ORDER_ITEMS (Order_ID VARCHAR, Product_ID VARCHAR); CREATE TABLE Customer_Orders (Order_Date VARCHAR, Order_ID VARCHAR)",
        "answer": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "context": "CREATE TABLE Drama_Workshop_Groups (Currency_Code VARCHAR)",
        "answer": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the names of the drama workshop groups with address in Feliciaberg city?",
        "context": "CREATE TABLE Addresses (Address_ID VARCHAR, City_Town VARCHAR); CREATE TABLE Drama_Workshop_Groups (Store_Name VARCHAR, Address_ID VARCHAR)",
        "answer": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the email addresses of the drama workshop groups with address in Alaska state?",
        "context": "CREATE TABLE Drama_Workshop_Groups (Store_Email_Address VARCHAR, Address_ID VARCHAR); CREATE TABLE Addresses (Address_ID VARCHAR, State_County VARCHAR)",
        "answer": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show all cities along with the number of drama workshop groups in each city.",
        "context": "CREATE TABLE Addresses (City_Town VARCHAR, Address_ID VARCHAR); CREATE TABLE Drama_Workshop_Groups (Address_ID VARCHAR)",
        "answer": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the marketing region code that has the most drama workshop groups?",
        "context": "CREATE TABLE Drama_Workshop_Groups (Marketing_Region_Code VARCHAR)",
        "answer": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show all cities where at least one customer lives in but no performer lives in.",
        "context": "CREATE TABLE Customers (Address_ID VARCHAR); CREATE TABLE Addresses (City_Town VARCHAR, Address_ID VARCHAR); CREATE TABLE Performers (Address_ID VARCHAR)",
        "answer": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the most frequent status of bookings?",
        "context": "CREATE TABLE BOOKINGS (Status_Code VARCHAR)",
        "answer": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
        "context": "CREATE TABLE Bookings (Workshop_Group_ID VARCHAR, Status_Code VARCHAR); CREATE TABLE Drama_Workshop_Groups (Store_Name VARCHAR, Workshop_Group_ID VARCHAR)",
        "answer": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show the names of all the clients with no booking.",
        "context": "CREATE TABLE Clients (Customer_Name VARCHAR, Client_ID VARCHAR); CREATE TABLE Bookings (Customer_ID VARCHAR); CREATE TABLE Clients (Customer_Name VARCHAR)",
        "answer": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?",
        "context": "CREATE TABLE Invoices (Order_Quantity INTEGER, payment_method_code VARCHAR)",
        "answer": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "context": "CREATE TABLE INVOICES (Product_ID VARCHAR)",
        "answer": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the description of the service type which offers both the photo product and the film product?",
        "context": "CREATE TABLE Ref_Service_Types (Service_Type_Description VARCHAR, Service_Type_Code VARCHAR); CREATE TABLE Services (Service_Type_Code VARCHAR, Product_Name VARCHAR)",
        "answer": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'",
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "How many bands are there?",
        "context": "CREATE TABLE Band (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Band",
        "db_id": "music_2"
    },
    {
        "question": "What are all the labels?",
        "context": "CREATE TABLE Albums (label VARCHAR)",
        "answer": "SELECT DISTINCT label FROM Albums",
        "db_id": "music_2"
    },
    {
        "question": "Find all the albums in 2012.",
        "context": "CREATE TABLE Albums (YEAR VARCHAR)",
        "answer": "SELECT * FROM Albums WHERE YEAR  =  2012",
        "db_id": "music_2"
    },
    {
        "question": "Find all the stage positions of the musicians with first name \"Solveig\"",
        "context": "CREATE TABLE Band (id VARCHAR); CREATE TABLE Performance (stageposition VARCHAR, bandmate VARCHAR)",
        "answer": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"",
        "db_id": "music_2"
    },
    {
        "question": "How many songs are there?",
        "context": "CREATE TABLE Songs (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Songs",
        "db_id": "music_2"
    },
    {
        "question": "Find all the songs performed by artist with last name \"Heilo\"",
        "context": "CREATE TABLE Songs (Title VARCHAR, SongId VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR); CREATE TABLE Band (id VARCHAR, Lastname VARCHAR)",
        "answer": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"",
        "db_id": "music_2"
    },
    {
        "question": "Hom many musicians performed in the song \"Flash\"?",
        "context": "CREATE TABLE performance (bandmate VARCHAR, songid VARCHAR); CREATE TABLE songs (songid VARCHAR, Title VARCHAR); CREATE TABLE band (id VARCHAR)",
        "answer": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"",
        "db_id": "music_2"
    },
    {
        "question": "Find all the songs produced by artists with first name \"Marianne\".",
        "context": "CREATE TABLE Songs (Title VARCHAR, SongId VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR); CREATE TABLE Band (id VARCHAR, firstname VARCHAR)",
        "answer": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\"",
        "db_id": "music_2"
    },
    {
        "question": "Who performed the song named \"Badlands\"? Show the first name and the last name.",
        "context": "CREATE TABLE Band (firstname VARCHAR, lastname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR); CREATE TABLE Songs (SongId VARCHAR, Title VARCHAR)",
        "answer": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "db_id": "music_2"
    },
    {
        "question": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.",
        "context": "CREATE TABLE Band (firstname VARCHAR, lastname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR, StagePosition VARCHAR); CREATE TABLE Songs (SongId VARCHAR, Title VARCHAR)",
        "answer": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"",
        "db_id": "music_2"
    },
    {
        "question": "How many unique labels are there for albums?",
        "context": "CREATE TABLE albums (label VARCHAR)",
        "answer": "SELECT count(DISTINCT label) FROM albums",
        "db_id": "music_2"
    },
    {
        "question": "What is the label that has the most albums?",
        "context": "CREATE TABLE albums (label VARCHAR)",
        "answer": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
        "db_id": "music_2"
    },
    {
        "question": "What is the last name of the musician that have produced the most number of songs?",
        "context": "CREATE TABLE Songs (SongId VARCHAR); CREATE TABLE Band (lastname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR)",
        "answer": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "db_id": "music_2"
    },
    {
        "question": "What is the last name of the musician that has been at the back position the most?",
        "context": "CREATE TABLE Band (lastname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR)",
        "answer": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "db_id": "music_2"
    },
    {
        "question": "Find all the songs whose name contains the word \"the\".",
        "context": "CREATE TABLE songs (title VARCHAR)",
        "answer": "SELECT title FROM songs WHERE title LIKE '% the %'",
        "db_id": "music_2"
    },
    {
        "question": "What are all the instruments used?",
        "context": "CREATE TABLE Instruments (instrument VARCHAR)",
        "answer": "SELECT DISTINCT instrument FROM Instruments",
        "db_id": "music_2"
    },
    {
        "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?",
        "context": "CREATE TABLE Songs (SongId VARCHAR, songid VARCHAR, title VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR); CREATE TABLE Band (id VARCHAR, lastname VARCHAR); CREATE TABLE Instruments (instrument VARCHAR, songid VARCHAR, bandmateid VARCHAR)",
        "answer": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"",
        "db_id": "music_2"
    },
    {
        "question": "What is the most used instrument?",
        "context": "CREATE TABLE instruments (instrument VARCHAR)",
        "answer": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1",
        "db_id": "music_2"
    },
    {
        "question": "How many songs have used the instrument \"drums\"?",
        "context": "CREATE TABLE instruments (instrument VARCHAR)",
        "answer": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"",
        "db_id": "music_2"
    },
    {
        "question": "What instruments does the the song \"Le Pop\" use?",
        "context": "CREATE TABLE instruments (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)",
        "answer": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "db_id": "music_2"
    },
    {
        "question": "How many instruments does the song \"Le Pop\" use?",
        "context": "CREATE TABLE instruments (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)",
        "answer": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "db_id": "music_2"
    },
    {
        "question": "How many instrument does the musician with last name \"Heilo\" use?",
        "context": "CREATE TABLE instruments (bandmateid VARCHAR); CREATE TABLE Band (id VARCHAR, lastname VARCHAR)",
        "answer": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
        "db_id": "music_2"
    },
    {
        "question": "Find all the instruments ever used by the musician with last name \"Heilo\"?",
        "context": "CREATE TABLE instruments (bandmateid VARCHAR); CREATE TABLE Band (id VARCHAR, lastname VARCHAR)",
        "answer": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
        "db_id": "music_2"
    },
    {
        "question": "Which song has the most vocals?",
        "context": "CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)",
        "answer": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
        "db_id": "music_2"
    },
    {
        "question": "Which vocal type is the most frequently appearring type?",
        "context": "CREATE TABLE vocals (TYPE VARCHAR)",
        "answer": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "db_id": "music_2"
    },
    {
        "question": "Which vocal type has the band mate with last name \"Heilo\" played the most?",
        "context": "CREATE TABLE vocals (bandmate VARCHAR); CREATE TABLE band (id VARCHAR)",
        "answer": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "db_id": "music_2"
    },
    {
        "question": "What are the vocal types used in song \"Le Pop\"?",
        "context": "CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)",
        "answer": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "db_id": "music_2"
    },
    {
        "question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?",
        "context": "CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)",
        "answer": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"",
        "db_id": "music_2"
    },
    {
        "question": "How many songs have a lead vocal?",
        "context": "CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)",
        "answer": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"",
        "db_id": "music_2"
    },
    {
        "question": "Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?",
        "context": "CREATE TABLE vocals (songid VARCHAR, bandmate VARCHAR); CREATE TABLE band (id VARCHAR, firstname VARCHAR); CREATE TABLE songs (songid VARCHAR, title VARCHAR)",
        "answer": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"",
        "db_id": "music_2"
    },
    {
        "question": "Find all the songs that do not have a lead vocal.",
        "context": "CREATE TABLE songs (title VARCHAR, songid VARCHAR); CREATE TABLE vocals (songid VARCHAR)",
        "answer": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
        "db_id": "music_2"
    },
    {
        "question": "Find all the vocal types.",
        "context": "CREATE TABLE vocals (TYPE VARCHAR)",
        "answer": "SELECT DISTINCT TYPE FROM vocals",
        "db_id": "music_2"
    },
    {
        "question": "What are the albums produced in year 2010?",
        "context": "CREATE TABLE Albums (YEAR VARCHAR)",
        "answer": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "db_id": "music_2"
    },
    {
        "question": "Who performed the song named \"Le Pop\"?",
        "context": "CREATE TABLE Band (firstname VARCHAR, lastname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR); CREATE TABLE Songs (SongId VARCHAR, Title VARCHAR)",
        "answer": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "db_id": "music_2"
    },
    {
        "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"?",
        "context": "CREATE TABLE Songs (SongId VARCHAR, songid VARCHAR, title VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR); CREATE TABLE Band (id VARCHAR, lastname VARCHAR); CREATE TABLE Instruments (instrument VARCHAR, songid VARCHAR, bandmateid VARCHAR)",
        "answer": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"",
        "db_id": "music_2"
    },
    {
        "question": "How many instruments does the song \"Badlands\" use?",
        "context": "CREATE TABLE instruments (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)",
        "answer": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"",
        "db_id": "music_2"
    },
    {
        "question": "What are the vocal types used in song \"Badlands\"?",
        "context": "CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)",
        "answer": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"",
        "db_id": "music_2"
    },
    {
        "question": "Find the number of vocal types used in song \"Le Pop\"",
        "context": "CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)",
        "answer": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "db_id": "music_2"
    },
    {
        "question": "How many songs have a shared vocal?",
        "context": "CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)",
        "answer": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "db_id": "music_2"
    },
    {
        "question": "Find all the songs that do not have a back vocal.",
        "context": "CREATE TABLE songs (title VARCHAR, songid VARCHAR); CREATE TABLE vocals (songid VARCHAR)",
        "answer": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "db_id": "music_2"
    },
    {
        "question": "Which vocal type has the band mate with first name \"Solveig\" played the most?",
        "context": "CREATE TABLE vocals (bandmate VARCHAR); CREATE TABLE band (id VARCHAR)",
        "answer": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "db_id": "music_2"
    },
    {
        "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
        "context": "CREATE TABLE band (id VARCHAR, lastname VARCHAR); CREATE TABLE vocals (songid VARCHAR, bandmate VARCHAR); CREATE TABLE songs (songid VARCHAR, title VARCHAR)",
        "answer": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "db_id": "music_2"
    },
    {
        "question": "Find the first name of the band mate that has performed in most songs.",
        "context": "CREATE TABLE Songs (SongId VARCHAR); CREATE TABLE Band (firstname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR)",
        "answer": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
        "db_id": "music_2"
    },
    {
        "question": "Which vocal type has the band mate with first name \"Marianne\" played the most?",
        "context": "CREATE TABLE vocals (bandmate VARCHAR); CREATE TABLE band (id VARCHAR)",
        "answer": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "db_id": "music_2"
    },
    {
        "question": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.",
        "context": "CREATE TABLE Band (firstname VARCHAR, lastname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR, StagePosition VARCHAR); CREATE TABLE Songs (SongId VARCHAR, Title VARCHAR)",
        "answer": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"",
        "db_id": "music_2"
    },
    {
        "question": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?",
        "context": "CREATE TABLE songs (title VARCHAR, songid VARCHAR); CREATE TABLE albums (aid VARCHAR, title VARCHAR); CREATE TABLE tracklists (albumid VARCHAR, songid VARCHAR)",
        "answer": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"",
        "db_id": "music_2"
    },
    {
        "question": "What are all the songs in albums under label \"Universal Music Group\"?",
        "context": "CREATE TABLE songs (title VARCHAR, songid VARCHAR); CREATE TABLE albums (aid VARCHAR); CREATE TABLE tracklists (albumid VARCHAR, songid VARCHAR)",
        "answer": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"",
        "db_id": "music_2"
    },
    {
        "question": "Find the number of songs in all the studio albums.",
        "context": "CREATE TABLE songs (title VARCHAR, songid VARCHAR); CREATE TABLE albums (aid VARCHAR); CREATE TABLE tracklists (albumid VARCHAR, songid VARCHAR)",
        "answer": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"",
        "db_id": "music_2"
    },
    {
        "question": "Who is the founder of Sony?",
        "context": "CREATE TABLE manufacturers (founder VARCHAR, name VARCHAR)",
        "answer": "SELECT founder FROM manufacturers WHERE name  =  'Sony'",
        "db_id": "manufactory_1"
    },
    {
        "question": "Where is the headquarter of the company founded by James?",
        "context": "CREATE TABLE manufacturers (headquarter VARCHAR, founder VARCHAR)",
        "answer": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.",
        "context": "CREATE TABLE manufacturers (name VARCHAR, headquarter VARCHAR, revenue VARCHAR)",
        "answer": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",
        "db_id": "manufactory_1"
    },
    {
        "question": "What are the average, maximum and total revenues of all companies?",
        "context": "CREATE TABLE manufacturers (revenue INTEGER)",
        "answer": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers",
        "db_id": "manufactory_1"
    },
    {
        "question": "How many companies were created by Andy?",
        "context": "CREATE TABLE manufacturers (founder VARCHAR)",
        "answer": "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the total revenue created by the companies whose headquarter is located at Austin.",
        "context": "CREATE TABLE manufacturers (revenue INTEGER, headquarter VARCHAR)",
        "answer": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'",
        "db_id": "manufactory_1"
    },
    {
        "question": "What are the different cities listed?",
        "context": "CREATE TABLE manufacturers (headquarter VARCHAR)",
        "answer": "SELECT DISTINCT headquarter FROM manufacturers",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the number of manufactures that are based in Tokyo or Beijing.",
        "context": "CREATE TABLE manufacturers (headquarter VARCHAR)",
        "answer": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the founder of the company whose name begins with the letter 'S'.",
        "context": "CREATE TABLE manufacturers (founder VARCHAR, name VARCHAR)",
        "answer": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the name of companies whose revenue is between 100 and 150.",
        "context": "CREATE TABLE manufacturers (name VARCHAR, revenue INTEGER)",
        "answer": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150",
        "db_id": "manufactory_1"
    },
    {
        "question": "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?",
        "context": "CREATE TABLE manufacturers (revenue INTEGER, Headquarter VARCHAR)",
        "answer": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the name of product that is produced by both companies Creative Labs and Sony.",
        "context": "CREATE TABLE manufacturers (code VARCHAR, name VARCHAR); CREATE TABLE products (name VARCHAR, Manufacturer VARCHAR)",
        "answer": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.",
        "context": "CREATE TABLE manufacturers (name VARCHAR, headquarter VARCHAR, founder VARCHAR, revenue VARCHAR)",
        "answer": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
        "context": "CREATE TABLE manufacturers (name VARCHAR, headquarter VARCHAR, revenue VARCHAR)",
        "answer": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the name of companies whose revenue is greater than the average revenue of all companies.",
        "context": "CREATE TABLE manufacturers (name VARCHAR, revenue INTEGER)",
        "answer": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.",
        "context": "CREATE TABLE manufacturers (name VARCHAR, revenue INTEGER, headquarter VARCHAR)",
        "answer": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.",
        "context": "CREATE TABLE manufacturers (revenue INTEGER, headquarter VARCHAR)",
        "answer": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the total revenue of companies of each founder.",
        "context": "CREATE TABLE manufacturers (founder VARCHAR, revenue INTEGER)",
        "answer": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the name and revenue of the company that earns the highest revenue in each city.",
        "context": "CREATE TABLE manufacturers (name VARCHAR, Headquarter VARCHAR, revenue INTEGER)",
        "answer": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the total revenue for each manufacturer.",
        "context": "CREATE TABLE manufacturers (name VARCHAR, revenue INTEGER)",
        "answer": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the average prices of all products from each manufacture, and list each company's name.",
        "context": "CREATE TABLE products (price INTEGER, Manufacturer VARCHAR); CREATE TABLE manufacturers (name VARCHAR, code VARCHAR)",
        "answer": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "db_id": "manufactory_1"
    },
    {
        "question": "What are the average prices of products for each manufacturer?",
        "context": "CREATE TABLE Manufacturers (name VARCHAR, code VARCHAR); CREATE TABLE products (Price INTEGER, manufacturer VARCHAR)",
        "answer": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the number of different products that are produced by companies at different headquarter cities.",
        "context": "CREATE TABLE manufacturers (Headquarter VARCHAR, code VARCHAR); CREATE TABLE products (name VARCHAR, Manufacturer VARCHAR)",
        "answer": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find number of products which Sony does not make.",
        "context": "CREATE TABLE manufacturers (code VARCHAR, name VARCHAR); CREATE TABLE products (name VARCHAR); CREATE TABLE products (name VARCHAR, Manufacturer VARCHAR)",
        "answer": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the name of companies that do not make DVD drive.",
        "context": "CREATE TABLE manufacturers (name VARCHAR, code VARCHAR); CREATE TABLE products (Manufacturer VARCHAR, name VARCHAR); CREATE TABLE manufacturers (name VARCHAR)",
        "answer": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find the number of products for each manufacturer, showing the name of each company.",
        "context": "CREATE TABLE products (Manufacturer VARCHAR); CREATE TABLE manufacturers (name VARCHAR, code VARCHAR)",
        "answer": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "db_id": "manufactory_1"
    },
    {
        "question": "Select the names of all the products in the store.",
        "context": "CREATE TABLE Products (Name VARCHAR)",
        "answer": "SELECT Name FROM Products",
        "db_id": "manufactory_1"
    },
    {
        "question": "Select the names and the prices of all the products in the store.",
        "context": "CREATE TABLE products (name VARCHAR, price VARCHAR)",
        "answer": "SELECT name ,  price FROM products",
        "db_id": "manufactory_1"
    },
    {
        "question": "Select the name of the products with a price less than or equal to $200.",
        "context": "CREATE TABLE products (name VARCHAR, price VARCHAR)",
        "answer": "SELECT name FROM products WHERE price  <=  200",
        "db_id": "manufactory_1"
    },
    {
        "question": "Find all information of all the products with a price between $60 and $120.",
        "context": "CREATE TABLE products (price INTEGER)",
        "answer": "SELECT * FROM products WHERE price BETWEEN 60 AND 120",
        "db_id": "manufactory_1"
    },
    {
        "question": "Compute the average price of all the products.",
        "context": "CREATE TABLE products (price INTEGER)",
        "answer": "SELECT avg(price) FROM products",
        "db_id": "manufactory_1"
    },
    {
        "question": "Compute the average price of all products with manufacturer code equal to 2.",
        "context": "CREATE TABLE products (price INTEGER, Manufacturer VARCHAR)",
        "answer": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
        "db_id": "manufactory_1"
    },
    {
        "question": "Compute the number of products with a price larger than or equal to $180.",
        "context": "CREATE TABLE products (price VARCHAR)",
        "answer": "SELECT count(*) FROM products WHERE price >= 180",
        "db_id": "manufactory_1"
    },
    {
        "question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",
        "context": "CREATE TABLE products (name VARCHAR, price VARCHAR)",
        "answer": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC",
        "db_id": "manufactory_1"
    },
    {
        "question": "Select all the data from the products and each product's manufacturer.",
        "context": "CREATE TABLE products (manufacturer VARCHAR); CREATE TABLE Manufacturers (code VARCHAR)",
        "answer": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "db_id": "manufactory_1"
    },
    {
        "question": "Select the average price of each manufacturer's products, showing only the manufacturer's code.",
        "context": "CREATE TABLE Products (Manufacturer VARCHAR, Price INTEGER)",
        "answer": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer",
        "db_id": "manufactory_1"
    },
    {
        "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "context": "CREATE TABLE Manufacturers (name VARCHAR, code VARCHAR); CREATE TABLE products (Price INTEGER, manufacturer VARCHAR, price INTEGER)",
        "answer": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
        "db_id": "manufactory_1"
    },
    {
        "question": "Select the name and price of the cheapest product.",
        "context": "CREATE TABLE Products (name VARCHAR, price VARCHAR)",
        "answer": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1",
        "db_id": "manufactory_1"
    },
    {
        "question": "Select the name of each manufacturer along with the name and price of its most expensive product.",
        "context": "CREATE TABLE Manufacturers (name VARCHAR, code VARCHAR); CREATE TABLE products (Name VARCHAR, Price INTEGER, manufacturer VARCHAR)",
        "answer": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "db_id": "manufactory_1"
    },
    {
        "question": "Select the code of the product that is cheapest in each product category.",
        "context": "CREATE TABLE products (code VARCHAR, name VARCHAR, price INTEGER)",
        "answer": "SELECT code ,  name ,  min(price) FROM products GROUP BY name",
        "db_id": "manufactory_1"
    },
    {
        "question": "What is the id of the problem log that is created most recently?",
        "context": "CREATE TABLE problem_log (problem_log_id VARCHAR, log_entry_date VARCHAR)",
        "answer": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "What is the oldest log id and its corresponding problem id?",
        "context": "CREATE TABLE problem_log (problem_log_id VARCHAR, problem_id VARCHAR, log_entry_date VARCHAR)",
        "answer": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "context": "CREATE TABLE problem_log (problem_log_id VARCHAR, log_entry_date VARCHAR, problem_id VARCHAR)",
        "answer": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "List all the log ids and their descriptions from the problem logs.",
        "context": "CREATE TABLE problem_log (problem_log_id VARCHAR, log_entry_description VARCHAR)",
        "answer": "SELECT problem_log_id ,  log_entry_description FROM problem_log",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
        "context": "CREATE TABLE problem_log (assigned_to_staff_id VARCHAR, problem_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR)",
        "answer": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "List the problem id and log id which are assigned to the staff named Rylan Homenick.",
        "context": "CREATE TABLE problem_log (problem_id VARCHAR, problem_log_id VARCHAR, assigned_to_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR, staff_last_name VARCHAR)",
        "answer": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "How many problems are there for product voluptatem?",
        "context": "CREATE TABLE problems (product_id VARCHAR); CREATE TABLE product (product_id VARCHAR, product_name VARCHAR)",
        "answer": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "How many problems does the product with the most problems have? List the number of the problems and product name.",
        "context": "CREATE TABLE problems (product_id VARCHAR); CREATE TABLE product (product_name VARCHAR, product_id VARCHAR)",
        "answer": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "context": "CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR); CREATE TABLE problems (problem_description VARCHAR, reported_by_staff_id VARCHAR)",
        "answer": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
        "context": "CREATE TABLE problems (problem_id VARCHAR, reported_by_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_last_name VARCHAR)",
        "answer": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "What are the ids of the problems which are reported after 1978-06-26?",
        "context": "CREATE TABLE problems (problem_id VARCHAR, date_problem_reported INTEGER)",
        "answer": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "What are the ids of the problems which are reported before 1978-06-26?",
        "context": "CREATE TABLE problems (problem_id VARCHAR, date_problem_reported INTEGER)",
        "answer": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "For each product which has problems, what are the number of problems and the product id?",
        "context": "CREATE TABLE problems (product_id VARCHAR); CREATE TABLE product (product_id VARCHAR)",
        "answer": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "context": "CREATE TABLE product (product_id VARCHAR); CREATE TABLE problems (product_id VARCHAR, date_problem_reported INTEGER)",
        "answer": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "List the names of all the distinct product names in alphabetical order?",
        "context": "CREATE TABLE product (product_name VARCHAR)",
        "answer": "SELECT DISTINCT product_name FROM product ORDER BY product_name",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "List all the distinct product names ordered by product id?",
        "context": "CREATE TABLE product (product_name VARCHAR, product_id VARCHAR)",
        "answer": "SELECT DISTINCT product_name FROM product ORDER BY product_id",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?",
        "context": "CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR, staff_last_name VARCHAR); CREATE TABLE problems (reported_by_staff_id VARCHAR)",
        "answer": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
        "context": "CREATE TABLE problems (reported_by_staff_id VARCHAR, closure_authorised_by_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR, staff_last_name VARCHAR)",
        "answer": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?",
        "context": "CREATE TABLE problems (problem_id VARCHAR, reported_by_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR, staff_last_name VARCHAR); CREATE TABLE problems (reported_by_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR)",
        "answer": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?",
        "context": "CREATE TABLE problems (problem_id VARCHAR, reported_by_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR, staff_last_name VARCHAR); CREATE TABLE problems (reported_by_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR)",
        "answer": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "Find the top 3 products which have the largest number of problems?",
        "context": "CREATE TABLE problems (product_id VARCHAR); CREATE TABLE product (product_name VARCHAR, product_id VARCHAR)",
        "answer": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?",
        "context": "CREATE TABLE problems (problem_id VARCHAR, product_id VARCHAR, date_problem_reported VARCHAR); CREATE TABLE product (product_id VARCHAR, product_name VARCHAR)",
        "answer": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "context": "CREATE TABLE product (product_name VARCHAR, product_id VARCHAR); CREATE TABLE staff (staff_first_name VARCHAR, staff_last_name VARCHAR, staff_id VARCHAR); CREATE TABLE problems (product_id VARCHAR, reported_by_staff_id VARCHAR)",
        "answer": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?",
        "context": "CREATE TABLE product (product_name VARCHAR, product_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR, staff_last_name VARCHAR); CREATE TABLE problems (product_id VARCHAR, reported_by_staff_id VARCHAR)",
        "answer": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "How many branches where have more than average number of memberships are there?",
        "context": "CREATE TABLE branch (membership_amount INTEGER)",
        "answer": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
        "db_id": "shop_membership"
    },
    {
        "question": "Show name, address road, and city for all branches sorted by open year.",
        "context": "CREATE TABLE branch (name VARCHAR, address_road VARCHAR, city VARCHAR, open_year VARCHAR)",
        "answer": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year",
        "db_id": "shop_membership"
    },
    {
        "question": "What are names for top three branches with most number of membership?",
        "context": "CREATE TABLE branch (name VARCHAR, membership_amount VARCHAR)",
        "answer": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "db_id": "shop_membership"
    },
    {
        "question": "Show all distinct city where branches with at least 100 memberships are located.",
        "context": "CREATE TABLE branch (city VARCHAR, membership_amount VARCHAR)",
        "answer": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "db_id": "shop_membership"
    },
    {
        "question": "List all open years when at least two shops are opened.",
        "context": "CREATE TABLE branch (open_year VARCHAR)",
        "answer": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2",
        "db_id": "shop_membership"
    },
    {
        "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.",
        "context": "CREATE TABLE branch (membership_amount INTEGER, open_year VARCHAR, city VARCHAR)",
        "answer": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
        "db_id": "shop_membership"
    },
    {
        "question": "Show the city and the number of branches opened before 2010 for each city.",
        "context": "CREATE TABLE branch (city VARCHAR, open_year INTEGER)",
        "answer": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city",
        "db_id": "shop_membership"
    },
    {
        "question": "How many different levels do members have?",
        "context": "CREATE TABLE member (LEVEL VARCHAR)",
        "answer": "SELECT count(DISTINCT LEVEL) FROM member",
        "db_id": "shop_membership"
    },
    {
        "question": "Show card number, name, and hometown for all members in a descending order of level.",
        "context": "CREATE TABLE member (card_number VARCHAR, name VARCHAR, hometown VARCHAR, LEVEL VARCHAR)",
        "answer": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
        "db_id": "shop_membership"
    },
    {
        "question": "Show the membership level with most number of members.",
        "context": "CREATE TABLE member (LEVEL VARCHAR)",
        "answer": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
        "db_id": "shop_membership"
    },
    {
        "question": "Show all member names and registered branch names sorted by register year.",
        "context": "CREATE TABLE member (name VARCHAR, member_id VARCHAR); CREATE TABLE membership_register_branch (branch_id VARCHAR, member_id VARCHAR, register_year VARCHAR); CREATE TABLE branch (name VARCHAR, branch_id VARCHAR)",
        "answer": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",
        "db_id": "shop_membership"
    },
    {
        "question": "Show all branch names with the number of members in each branch registered after 2015.",
        "context": "CREATE TABLE branch (name VARCHAR, branch_id VARCHAR); CREATE TABLE membership_register_branch (branch_id VARCHAR, register_year INTEGER)",
        "answer": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
        "db_id": "shop_membership"
    },
    {
        "question": "Show member names without any registered branch.",
        "context": "CREATE TABLE member (name VARCHAR, member_id VARCHAR); CREATE TABLE membership_register_branch (name VARCHAR, member_id VARCHAR)",
        "answer": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "db_id": "shop_membership"
    },
    {
        "question": "List the branch name and city without any registered members.",
        "context": "CREATE TABLE membership_register_branch (name VARCHAR, city VARCHAR, branch_id VARCHAR); CREATE TABLE branch (name VARCHAR, city VARCHAR, branch_id VARCHAR)",
        "answer": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "db_id": "shop_membership"
    },
    {
        "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
        "context": "CREATE TABLE membership_register_branch (branch_id VARCHAR, register_year VARCHAR); CREATE TABLE branch (name VARCHAR, open_year VARCHAR, branch_id VARCHAR)",
        "answer": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "shop_membership"
    },
    {
        "question": "Show the member name and hometown who registered a branch in 2016.",
        "context": "CREATE TABLE member (name VARCHAR, hometown VARCHAR, member_id VARCHAR); CREATE TABLE membership_register_branch (member_id VARCHAR, register_year VARCHAR)",
        "answer": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "db_id": "shop_membership"
    },
    {
        "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "context": "CREATE TABLE branch (city VARCHAR, open_year VARCHAR, membership_amount VARCHAR)",
        "answer": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
        "db_id": "shop_membership"
    },
    {
        "question": "Show all cities without a branch having more than 100 memberships.",
        "context": "CREATE TABLE branch (city VARCHAR, membership_amount INTEGER)",
        "answer": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
        "db_id": "shop_membership"
    },
    {
        "question": "What is the sum of total pounds of purchase in year 2018 for all branches in London?",
        "context": "CREATE TABLE purchase (branch_id VARCHAR, year VARCHAR); CREATE TABLE branch (branch_id VARCHAR, city VARCHAR)",
        "answer": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018",
        "db_id": "shop_membership"
    },
    {
        "question": "What is the total number of purchases for members with level 6?",
        "context": "CREATE TABLE member (member_id VARCHAR, level VARCHAR); CREATE TABLE purchase (member_id VARCHAR)",
        "answer": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "db_id": "shop_membership"
    },
    {
        "question": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
        "context": "CREATE TABLE member (member_id VARCHAR, Hometown VARCHAR); CREATE TABLE branch (name VARCHAR, branch_id VARCHAR); CREATE TABLE membership_register_branch (branch_id VARCHAR, member_id VARCHAR)",
        "answer": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'",
        "db_id": "shop_membership"
    },
    {
        "question": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "context": "CREATE TABLE member (card_number VARCHAR, Hometown VARCHAR)",
        "answer": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "db_id": "shop_membership"
    },
    {
        "question": "Find the number of voting records in total.",
        "context": "CREATE TABLE VOTING_RECORD (Id VARCHAR)",
        "answer": "SELECT count(*) FROM VOTING_RECORD",
        "db_id": "voter_2"
    },
    {
        "question": "Find the distinct number of president votes.",
        "context": "CREATE TABLE VOTING_RECORD (President_Vote VARCHAR)",
        "answer": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD",
        "db_id": "voter_2"
    },
    {
        "question": "Find the maximum age of all the students.",
        "context": "CREATE TABLE STUDENT (Age INTEGER)",
        "answer": "SELECT max(Age) FROM STUDENT",
        "db_id": "voter_2"
    },
    {
        "question": "Find the last names of students with major 50.",
        "context": "CREATE TABLE STUDENT (LName VARCHAR, Major VARCHAR)",
        "answer": "SELECT LName FROM STUDENT WHERE Major  =  50",
        "db_id": "voter_2"
    },
    {
        "question": "Find the first names of students with age above 22.",
        "context": "CREATE TABLE STUDENT (Fname VARCHAR, Age INTEGER)",
        "answer": "SELECT Fname FROM STUDENT WHERE Age  >  22",
        "db_id": "voter_2"
    },
    {
        "question": "What are the majors of male (sex is M) students?",
        "context": "CREATE TABLE STUDENT (Major VARCHAR, Sex VARCHAR)",
        "answer": "SELECT Major FROM STUDENT WHERE Sex  =  \"M\"",
        "db_id": "voter_2"
    },
    {
        "question": "What is the average age of female (sex is F) students?",
        "context": "CREATE TABLE STUDENT (Age INTEGER, Sex VARCHAR)",
        "answer": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"",
        "db_id": "voter_2"
    },
    {
        "question": "What are the maximum and minimum age of students with major 600?",
        "context": "CREATE TABLE STUDENT (Age INTEGER, Major VARCHAR)",
        "answer": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
        "db_id": "voter_2"
    },
    {
        "question": "Who are the advisors for students that live in a city with city code \"BAL\"?",
        "context": "CREATE TABLE STUDENT (Advisor VARCHAR, city_code VARCHAR)",
        "answer": "SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"",
        "db_id": "voter_2"
    },
    {
        "question": "What are the distinct secretary votes in the fall election cycle?",
        "context": "CREATE TABLE VOTING_RECORD (Secretary_Vote VARCHAR, ELECTION_CYCLE VARCHAR)",
        "answer": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "db_id": "voter_2"
    },
    {
        "question": "What are the distinct president votes on 08/30/2015?",
        "context": "CREATE TABLE VOTING_RECORD (PRESIDENT_Vote VARCHAR, Registration_Date VARCHAR)",
        "answer": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"",
        "db_id": "voter_2"
    },
    {
        "question": "Report the distinct registration date and the election cycle.",
        "context": "CREATE TABLE VOTING_RECORD (Registration_Date VARCHAR, Election_Cycle VARCHAR)",
        "answer": "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD",
        "db_id": "voter_2"
    },
    {
        "question": "Report the distinct president vote and the vice president vote.",
        "context": "CREATE TABLE VOTING_RECORD (President_Vote VARCHAR, VICE_President_Vote VARCHAR)",
        "answer": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "db_id": "voter_2"
    },
    {
        "question": "Find the distinct last names of the students who have class president votes.",
        "context": "CREATE TABLE STUDENT (LName VARCHAR, StuID VARCHAR); CREATE TABLE VOTING_RECORD (CLASS_President_VOTE VARCHAR)",
        "answer": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "db_id": "voter_2"
    },
    {
        "question": "Find the distinct first names of the students who have class senator votes.",
        "context": "CREATE TABLE STUDENT (Fname VARCHAR, StuID VARCHAR); CREATE TABLE VOTING_RECORD (CLASS_Senator_VOTE VARCHAR)",
        "answer": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
        "db_id": "voter_2"
    },
    {
        "question": "Find the distinct ages of students who have secretary votes in the fall election cycle.",
        "context": "CREATE TABLE VOTING_RECORD (Secretary_Vote VARCHAR, Election_Cycle VARCHAR); CREATE TABLE STUDENT (Age VARCHAR, StuID VARCHAR)",
        "answer": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
        "db_id": "voter_2"
    },
    {
        "question": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.",
        "context": "CREATE TABLE STUDENT (Advisor VARCHAR, StuID VARCHAR); CREATE TABLE VOTING_RECORD (Treasurer_Vote VARCHAR, Election_Cycle VARCHAR)",
        "answer": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
        "db_id": "voter_2"
    },
    {
        "question": "Find the distinct majors of students who have treasurer votes.",
        "context": "CREATE TABLE VOTING_RECORD (Treasurer_Vote VARCHAR); CREATE TABLE STUDENT (Major VARCHAR, StuID VARCHAR)",
        "answer": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
        "db_id": "voter_2"
    },
    {
        "question": "Find the first and last names of all the female (sex is F) students who have president votes.",
        "context": "CREATE TABLE STUDENT (Fname VARCHAR, LName VARCHAR, StuID VARCHAR, sex VARCHAR); CREATE TABLE VOTING_RECORD (President_VOTE VARCHAR)",
        "answer": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "db_id": "voter_2"
    },
    {
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "context": "CREATE TABLE STUDENT (Fname VARCHAR, LName VARCHAR, StuID VARCHAR, age VARCHAR); CREATE TABLE VOTING_RECORD (VICE_President_VOTE VARCHAR)",
        "answer": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "db_id": "voter_2"
    },
    {
        "question": "How many male (sex is M) students have class senator votes in the fall election cycle?",
        "context": "CREATE TABLE VOTING_RECORD (Election_Cycle VARCHAR); CREATE TABLE STUDENT (StuID VARCHAR, Sex VARCHAR)",
        "answer": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "db_id": "voter_2"
    },
    {
        "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "context": "CREATE TABLE STUDENT (StuID VARCHAR, city_code VARCHAR); CREATE TABLE VOTING_RECORD (Election_Cycle VARCHAR)",
        "answer": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "db_id": "voter_2"
    },
    {
        "question": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.",
        "context": "CREATE TABLE STUDENT (Age INTEGER, StuID VARCHAR, city_code VARCHAR); CREATE TABLE VOTING_RECORD (Election_Cycle VARCHAR)",
        "answer": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "db_id": "voter_2"
    },
    {
        "question": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.",
        "context": "CREATE TABLE STUDENT (Age INTEGER, StuID VARCHAR, Sex VARCHAR); CREATE TABLE VOTING_RECORD (Election_Cycle VARCHAR)",
        "answer": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"",
        "db_id": "voter_2"
    },
    {
        "question": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.",
        "context": "CREATE TABLE STUDENT (Fname VARCHAR, city_code VARCHAR); CREATE TABLE STUDENT (Fname VARCHAR, StuID VARCHAR); CREATE TABLE VOTING_RECORD (VICE_PRESIDENT_Vote VARCHAR)",
        "answer": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "db_id": "voter_2"
    },
    {
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.",
        "context": "CREATE TABLE STUDENT (LName VARCHAR, PRESIDENT_Vote VARCHAR, Advisor VARCHAR); CREATE TABLE STUDENT (LName VARCHAR, StuID VARCHAR); CREATE TABLE VOTING_RECORD (Id VARCHAR)",
        "answer": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "db_id": "voter_2"
    },
    {
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.",
        "context": "CREATE TABLE STUDENT (LName VARCHAR, PRESIDENT_Vote VARCHAR, Advisor VARCHAR); CREATE TABLE STUDENT (LName VARCHAR, StuID VARCHAR); CREATE TABLE VOTING_RECORD (Id VARCHAR)",
        "answer": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "db_id": "voter_2"
    },
    {
        "question": "Report all advisors that advise more than 2 students.",
        "context": "CREATE TABLE STUDENT (Advisor VARCHAR)",
        "answer": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2",
        "db_id": "voter_2"
    },
    {
        "question": "Report all majors that have less than 3 students.",
        "context": "CREATE TABLE STUDENT (Major VARCHAR)",
        "answer": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
        "db_id": "voter_2"
    },
    {
        "question": "For each election cycle, report the number of voting records.",
        "context": "CREATE TABLE VOTING_RECORD (Election_Cycle VARCHAR)",
        "answer": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
        "db_id": "voter_2"
    },
    {
        "question": "What is the most common major among female (sex is F) students?",
        "context": "CREATE TABLE STUDENT (Major VARCHAR, major VARCHAR, Sex VARCHAR)",
        "answer": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "db_id": "voter_2"
    },
    {
        "question": "What is the city_code of the city that the most students live in?",
        "context": "CREATE TABLE STUDENT (city_code VARCHAR)",
        "answer": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "voter_2"
    },
    {
        "question": "Return the code of the city that has the most students.",
        "context": "CREATE TABLE student (city_code VARCHAR)",
        "answer": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "voter_2"
    },
    {
        "question": "How many products are there?",
        "context": "CREATE TABLE products (Id VARCHAR)",
        "answer": "SELECT count(*) FROM products",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "How many colors are there?",
        "context": "CREATE TABLE ref_colors (Id VARCHAR)",
        "answer": "SELECT count(*) FROM ref_colors",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "How many characteristics are there?",
        "context": "CREATE TABLE CHARACTERISTICS (Id VARCHAR)",
        "answer": "SELECT count(*) FROM CHARACTERISTICS",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What are the names and buying prices of all the products?",
        "context": "CREATE TABLE products (product_name VARCHAR, typical_buying_price VARCHAR)",
        "answer": "SELECT product_name ,  typical_buying_price FROM products",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "List the description of all the colors.",
        "context": "CREATE TABLE ref_colors (color_description VARCHAR)",
        "answer": "SELECT color_description FROM ref_colors",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "Find the names of all the product characteristics.",
        "context": "CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR)",
        "answer": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What are the names of products with category \"Spices\"?",
        "context": "CREATE TABLE products (product_name VARCHAR, product_category_code VARCHAR)",
        "answer": "SELECT product_name FROM products WHERE product_category_code  =  \"Spices\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
        "context": "CREATE TABLE Ref_colors (color_description VARCHAR, color_code VARCHAR); CREATE TABLE products (product_name VARCHAR, product_description VARCHAR, color_code VARCHAR)",
        "answer": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "How many products are there under the category \"Seeds\"?",
        "context": "CREATE TABLE products (product_category_code VARCHAR)",
        "answer": "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "Find the number of products with category \"Spices\" and typically sold above 1000.",
        "context": "CREATE TABLE products (product_category_code VARCHAR, typical_buying_price VARCHAR)",
        "answer": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What is the category and typical buying price  of the product with name \"cumin\"?",
        "context": "CREATE TABLE products (product_category_code VARCHAR, typical_buying_price VARCHAR, product_name VARCHAR)",
        "answer": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "Which category does the product named \"flax\" belong to?",
        "context": "CREATE TABLE products (product_category_code VARCHAR, product_name VARCHAR)",
        "answer": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What is the name of the product with the color description 'yellow'?",
        "context": "CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE products (product_name VARCHAR, color_code VARCHAR)",
        "answer": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "Find the category descriptions of the products whose descriptions include letter 't'.",
        "context": "CREATE TABLE ref_product_categories (product_category_description VARCHAR, product_category_code VARCHAR); CREATE TABLE products (product_category_code VARCHAR, product_description VARCHAR)",
        "answer": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What is the color description of the product with name \"catnip\"?",
        "context": "CREATE TABLE products (color_code VARCHAR, product_name VARCHAR); CREATE TABLE ref_colors (color_description VARCHAR, color_code VARCHAR)",
        "answer": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What is the color code and description of the product named \"chervil\"?",
        "context": "CREATE TABLE products (color_code VARCHAR, product_name VARCHAR); CREATE TABLE ref_colors (color_description VARCHAR, color_code VARCHAR)",
        "answer": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "Find the id and color description of the products with at least 2 characteristics.",
        "context": "CREATE TABLE product_characteristics (product_id VARCHAR); CREATE TABLE ref_colors (color_description VARCHAR, color_code VARCHAR); CREATE TABLE products (product_id VARCHAR, color_code VARCHAR)",
        "answer": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "List all the product names with the color description \"white\".",
        "context": "CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE products (product_name VARCHAR, color_code VARCHAR)",
        "answer": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "context": "CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE products (product_name VARCHAR, typical_buying_price VARCHAR, typical_selling_price VARCHAR, color_code VARCHAR)",
        "answer": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "How many characteristics does the product named \"sesame\" have?",
        "context": "CREATE TABLE product_characteristics (product_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR)",
        "answer": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "How many distinct characteristic names does the product \"cumin\" have?",
        "context": "CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What are all the characteristic names of product \"sesame\"?",
        "context": "CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "List all the characteristic names and data types of product \"cumin\".",
        "context": "CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_data_type VARCHAR, characteristic_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
        "context": "CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_id VARCHAR, characteristic_type_code VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "How many characteristics does the product named \"laurel\" have?",
        "context": "CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "Find the number of characteristics that the product \"flax\" has.",
        "context": "CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".",
        "context": "CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR, characteristic_name VARCHAR); CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE products (product_id VARCHAR, color_code VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "How many products have the characteristic named \"hot\"?",
        "context": "CREATE TABLE products (product_id VARCHAR); CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR, characteristic_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "List the all the distinct names of the products with the characteristic name 'warm'.",
        "context": "CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR, characteristic_name VARCHAR); CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\".",
        "context": "CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR, characteristic_name VARCHAR); CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE products (product_id VARCHAR, color_code VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".",
        "context": "CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR, characteristic_name VARCHAR); CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE products (product_id VARCHAR, color_code VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What is the unit of measuerment of the product category code \"Herbs\"?",
        "context": "CREATE TABLE ref_product_categories (unit_of_measure VARCHAR, product_category_code VARCHAR)",
        "answer": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "Find the product category description of the product category with code \"Spices\".",
        "context": "CREATE TABLE ref_product_categories (product_category_description VARCHAR, product_category_code VARCHAR)",
        "answer": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What is the product category description and unit of measurement of category \"Herbs\"?",
        "context": "CREATE TABLE ref_product_categories (product_category_description VARCHAR, unit_of_measure VARCHAR, product_category_code VARCHAR)",
        "answer": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What is the unit of measurement of product named \"cumin\"?",
        "context": "CREATE TABLE ref_product_categories (unit_of_measure VARCHAR, product_category_code VARCHAR); CREATE TABLE products (product_category_code VARCHAR, product_name VARCHAR)",
        "answer": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "Find the unit of measurement and product category code of product named \"chervil\".",
        "context": "CREATE TABLE ref_product_categories (unit_of_measure VARCHAR, product_category_code VARCHAR); CREATE TABLE products (product_category_code VARCHAR, product_name VARCHAR)",
        "answer": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".",
        "context": "CREATE TABLE products (product_name VARCHAR, product_category_code VARCHAR, color_code VARCHAR); CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE ref_product_categories (product_category_code VARCHAR, unit_of_measure VARCHAR)",
        "answer": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What is the description of the color for most products?",
        "context": "CREATE TABLE ref_colors (color_description VARCHAR, color_code VARCHAR); CREATE TABLE products (color_code VARCHAR)",
        "answer": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What is the description of the color used by least products?",
        "context": "CREATE TABLE ref_colors (color_description VARCHAR, color_code VARCHAR); CREATE TABLE products (color_code VARCHAR)",
        "answer": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What is the characteristic name used by most number of the products?",
        "context": "CREATE TABLE products (product_id VARCHAR); CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_id VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "context": "CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, other_characteristic_details VARCHAR, characteristic_data_type VARCHAR, characteristic_id VARCHAR); CREATE TABLE product_characteristics (characteristic_id VARCHAR); CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, other_characteristic_details VARCHAR, characteristic_data_type VARCHAR)",
        "answer": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "What are characteristic names used at least twice across all products?",
        "context": "CREATE TABLE products (product_id VARCHAR); CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_id VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)",
        "answer": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "How many colors are never used by any product?",
        "context": "CREATE TABLE products (color_code VARCHAR); CREATE TABLE Ref_colors (color_code VARCHAR)",
        "answer": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "How many events are there?",
        "context": "CREATE TABLE event (Id VARCHAR)",
        "answer": "SELECT count(*) FROM event",
        "db_id": "swimming"
    },
    {
        "question": "List all the event names by year from the most recent to the oldest.",
        "context": "CREATE TABLE event (name VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT name FROM event ORDER BY YEAR DESC",
        "db_id": "swimming"
    },
    {
        "question": "What is the name of the event that happened in the most recent year?",
        "context": "CREATE TABLE event (name VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "db_id": "swimming"
    },
    {
        "question": "How many stadiums are there?",
        "context": "CREATE TABLE stadium (Id VARCHAR)",
        "answer": "SELECT count(*) FROM stadium",
        "db_id": "swimming"
    },
    {
        "question": "Find the name of the stadium that has the maximum capacity.",
        "context": "CREATE TABLE stadium (name VARCHAR, capacity VARCHAR)",
        "answer": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1",
        "db_id": "swimming"
    },
    {
        "question": "Find the names of stadiums whose capacity is smaller than the average capacity.",
        "context": "CREATE TABLE stadium (name VARCHAR, capacity INTEGER)",
        "answer": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)",
        "db_id": "swimming"
    },
    {
        "question": "Find the country that has the most stadiums.",
        "context": "CREATE TABLE stadium (country VARCHAR)",
        "answer": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "db_id": "swimming"
    },
    {
        "question": "Which country has at most 3 stadiums listed?",
        "context": "CREATE TABLE stadium (country VARCHAR)",
        "answer": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3",
        "db_id": "swimming"
    },
    {
        "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
        "context": "CREATE TABLE stadium (country VARCHAR, capacity INTEGER)",
        "answer": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000",
        "db_id": "swimming"
    },
    {
        "question": "How many cities have a stadium that was opened before the year of 2006?",
        "context": "CREATE TABLE stadium (city VARCHAR, opening_year INTEGER)",
        "answer": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006",
        "db_id": "swimming"
    },
    {
        "question": "How many stadiums does each country have?",
        "context": "CREATE TABLE stadium (country VARCHAR)",
        "answer": "SELECT country ,  count(*) FROM stadium GROUP BY country",
        "db_id": "swimming"
    },
    {
        "question": "Which countries do not have a stadium that was opened after 2006?",
        "context": "CREATE TABLE stadium (country VARCHAR, opening_year INTEGER)",
        "answer": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006",
        "db_id": "swimming"
    },
    {
        "question": "How many stadiums are not in country \"Russia\"?",
        "context": "CREATE TABLE stadium (country VARCHAR)",
        "answer": "SELECT count(*) FROM stadium WHERE country != 'Russia'",
        "db_id": "swimming"
    },
    {
        "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",
        "context": "CREATE TABLE swimmer (name VARCHAR, meter_100 VARCHAR)",
        "answer": "SELECT name FROM swimmer ORDER BY meter_100",
        "db_id": "swimming"
    },
    {
        "question": "How many different countries are all the swimmers from?",
        "context": "CREATE TABLE swimmer (nationality VARCHAR)",
        "answer": "SELECT count(DISTINCT nationality) FROM swimmer",
        "db_id": "swimming"
    },
    {
        "question": "List countries that have more than one swimmer.",
        "context": "CREATE TABLE swimmer (nationality VARCHAR)",
        "answer": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1",
        "db_id": "swimming"
    },
    {
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "context": "CREATE TABLE swimmer (meter_200 VARCHAR, meter_300 VARCHAR, nationality VARCHAR)",
        "answer": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
        "db_id": "swimming"
    },
    {
        "question": "Find the names of swimmers who has a result of \"win\".",
        "context": "CREATE TABLE record (swimmer_id VARCHAR); CREATE TABLE swimmer (name VARCHAR, id VARCHAR)",
        "answer": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'",
        "db_id": "swimming"
    },
    {
        "question": "What is the name of the stadium which held the most events?",
        "context": "CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE event (stadium_id VARCHAR)",
        "answer": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "swimming"
    },
    {
        "question": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.",
        "context": "CREATE TABLE event (stadium_id VARCHAR, name VARCHAR); CREATE TABLE stadium (name VARCHAR, capacity VARCHAR, id VARCHAR)",
        "answer": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'",
        "db_id": "swimming"
    },
    {
        "question": "Find the names of stadiums which have never had any event.",
        "context": "CREATE TABLE stadium (name VARCHAR, id VARCHAR, stadium_id VARCHAR); CREATE TABLE event (name VARCHAR, id VARCHAR, stadium_id VARCHAR)",
        "answer": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)",
        "db_id": "swimming"
    },
    {
        "question": "Find the name of the swimmer who has the most records.",
        "context": "CREATE TABLE record (swimmer_id VARCHAR); CREATE TABLE swimmer (name VARCHAR, id VARCHAR)",
        "answer": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "swimming"
    },
    {
        "question": "Find the name of the swimmer who has at least 2 records.",
        "context": "CREATE TABLE record (swimmer_id VARCHAR); CREATE TABLE swimmer (name VARCHAR, id VARCHAR)",
        "answer": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2",
        "db_id": "swimming"
    },
    {
        "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
        "context": "CREATE TABLE record (swimmer_id VARCHAR); CREATE TABLE swimmer (name VARCHAR, nationality VARCHAR, id VARCHAR)",
        "answer": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1",
        "db_id": "swimming"
    },
    {
        "question": "Find the names of the swimmers who have no record.",
        "context": "CREATE TABLE swimmer (name VARCHAR, id VARCHAR, swimmer_id VARCHAR); CREATE TABLE record (name VARCHAR, id VARCHAR, swimmer_id VARCHAR)",
        "answer": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
        "db_id": "swimming"
    },
    {
        "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.",
        "context": "CREATE TABLE record (swimmer_id VARCHAR); CREATE TABLE swimmer (name VARCHAR, id VARCHAR)",
        "answer": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'",
        "db_id": "swimming"
    },
    {
        "question": "Find the names of stadiums that some Australian swimmers have been to.",
        "context": "CREATE TABLE swimmer (id VARCHAR, nationality VARCHAR); CREATE TABLE record (swimmer_id VARCHAR, event_id VARCHAR); CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE event (id VARCHAR, stadium_id VARCHAR)",
        "answer": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'",
        "db_id": "swimming"
    },
    {
        "question": "Find the names of stadiums that the most swimmers have been to.",
        "context": "CREATE TABLE record (event_id VARCHAR); CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE event (stadium_id VARCHAR, id VARCHAR)",
        "answer": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "swimming"
    },
    {
        "question": "Find all details for each swimmer.",
        "context": "CREATE TABLE swimmer (Id VARCHAR)",
        "answer": "SELECT * FROM swimmer",
        "db_id": "swimming"
    },
    {
        "question": "What is the average capacity of the stadiums that were opened in year 2005?",
        "context": "CREATE TABLE stadium (capacity INTEGER, opening_year VARCHAR)",
        "answer": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005",
        "db_id": "swimming"
    },
    {
        "question": "How many railways are there?",
        "context": "CREATE TABLE railway (Id VARCHAR)",
        "answer": "SELECT count(*) FROM railway",
        "db_id": "railway"
    },
    {
        "question": "List the builders of railways in ascending alphabetical order.",
        "context": "CREATE TABLE railway (Builder VARCHAR)",
        "answer": "SELECT Builder FROM railway ORDER BY Builder ASC",
        "db_id": "railway"
    },
    {
        "question": "List the wheels and locations of the railways.",
        "context": "CREATE TABLE railway (Wheels VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT Wheels ,  LOCATION FROM railway",
        "db_id": "railway"
    },
    {
        "question": "What is the maximum level of managers in countries that are not \"Australia\"?",
        "context": "CREATE TABLE manager (LEVEL INTEGER, Country VARCHAR)",
        "answer": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"",
        "db_id": "railway"
    },
    {
        "question": "What is the average age for all managers?",
        "context": "CREATE TABLE manager (Age INTEGER)",
        "answer": "SELECT avg(Age) FROM manager",
        "db_id": "railway"
    },
    {
        "question": "What are the names of managers in ascending order of level?",
        "context": "CREATE TABLE manager (Name VARCHAR, LEVEL VARCHAR)",
        "answer": "SELECT Name FROM manager ORDER BY LEVEL ASC",
        "db_id": "railway"
    },
    {
        "question": "What are the names and arrival times of trains?",
        "context": "CREATE TABLE train (Name VARCHAR, Arrival VARCHAR)",
        "answer": "SELECT Name ,  Arrival FROM train",
        "db_id": "railway"
    },
    {
        "question": "What is the name of the oldest manager?",
        "context": "CREATE TABLE manager (Name VARCHAR, Age VARCHAR)",
        "answer": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1",
        "db_id": "railway"
    },
    {
        "question": "Show the names of trains and locations of railways they are in.",
        "context": "CREATE TABLE railway (Location VARCHAR, Railway_ID VARCHAR); CREATE TABLE train (Name VARCHAR, Railway_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID",
        "db_id": "railway"
    },
    {
        "question": "Show the builder of railways associated with the trains named \"Andaman Exp\".",
        "context": "CREATE TABLE railway (Builder VARCHAR, Railway_ID VARCHAR); CREATE TABLE train (Railway_ID VARCHAR, Name VARCHAR)",
        "answer": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  \"Andaman Exp\"",
        "db_id": "railway"
    },
    {
        "question": "Show id and location of railways that are associated with more than one train.",
        "context": "CREATE TABLE railway (Location VARCHAR, Railway_ID VARCHAR); CREATE TABLE train (Railway_ID VARCHAR)",
        "answer": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1",
        "db_id": "railway"
    },
    {
        "question": "Show the id and builder of the railway that are associated with the most trains.",
        "context": "CREATE TABLE train (Railway_ID VARCHAR); CREATE TABLE railway (Builder VARCHAR, Railway_ID VARCHAR)",
        "answer": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "railway"
    },
    {
        "question": "Show different builders of railways, along with the corresponding number of railways using each builder.",
        "context": "CREATE TABLE railway (Builder VARCHAR)",
        "answer": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder",
        "db_id": "railway"
    },
    {
        "question": "Show the most common builder of railways.",
        "context": "CREATE TABLE railway (Builder VARCHAR)",
        "answer": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "railway"
    },
    {
        "question": "Show different locations of railways along with the corresponding number of railways at each location.",
        "context": "CREATE TABLE railway (LOCATION VARCHAR)",
        "answer": "SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION",
        "db_id": "railway"
    },
    {
        "question": "Show the locations that have more than one railways.",
        "context": "CREATE TABLE railway (LOCATION VARCHAR)",
        "answer": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1",
        "db_id": "railway"
    },
    {
        "question": "List the object number of railways that do not have any trains.",
        "context": "CREATE TABLE train (ObjectNumber VARCHAR, Railway_ID VARCHAR); CREATE TABLE railway (ObjectNumber VARCHAR, Railway_ID VARCHAR)",
        "answer": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)",
        "db_id": "railway"
    },
    {
        "question": "Show the countries that have both managers of age above 50 and managers of age below 46.",
        "context": "CREATE TABLE manager (Country VARCHAR, Age INTEGER)",
        "answer": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46",
        "db_id": "railway"
    },
    {
        "question": "Show the distinct countries of managers.",
        "context": "CREATE TABLE manager (Country VARCHAR)",
        "answer": "SELECT DISTINCT Country FROM manager",
        "db_id": "railway"
    },
    {
        "question": "Show the working years of managers in descending order of their level.",
        "context": "CREATE TABLE manager (Working_year_starts VARCHAR, LEVEL VARCHAR)",
        "answer": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
        "db_id": "railway"
    },
    {
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "context": "CREATE TABLE manager (Country VARCHAR, Age VARCHAR)",
        "answer": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "db_id": "railway"
    },
    {
        "question": "How many addresses are there in country USA?",
        "context": "CREATE TABLE addresses (country VARCHAR)",
        "answer": "SELECT count(*) FROM addresses WHERE country  =  'USA'",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show all distinct cities in the address record.",
        "context": "CREATE TABLE addresses (city VARCHAR)",
        "answer": "SELECT DISTINCT city FROM addresses",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show each state and the number of addresses in each state.",
        "context": "CREATE TABLE addresses (state_province_county VARCHAR)",
        "answer": "SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show names and phones of customers who do not have address information.",
        "context": "CREATE TABLE customer_address_history (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the name of the customer who has the most orders.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR)",
        "answer": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the product type codes which have at least two products.",
        "context": "CREATE TABLE products (product_type_code VARCHAR)",
        "answer": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the names of customers who have both an order in completed status and an order in part status.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_status_code VARCHAR)",
        "answer": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the name, phone, and payment method code for all customers in descending order of customer number.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, payment_method_code VARCHAR, customer_number VARCHAR)",
        "answer": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the product name and total order quantity for each product.",
        "context": "CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE order_items (order_quantity INTEGER, product_id VARCHAR)",
        "answer": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the minimum, maximum, average price for all products.",
        "context": "CREATE TABLE products (product_price INTEGER)",
        "answer": "SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "How many products have a price higher than the average?",
        "context": "CREATE TABLE products (product_price INTEGER)",
        "answer": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "context": "CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_address_history (date_from VARCHAR, date_to VARCHAR, customer_id VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR, payment_method_code VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR)",
        "answer": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "What are the name and phone of the customer with the most ordered product quantity?",
        "context": "CREATE TABLE order_items (order_id VARCHAR, order_quantity INTEGER); CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)",
        "answer": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the product type and name for the products with price higher than 1000 or lower than 500.",
        "context": "CREATE TABLE products (product_type_code VARCHAR, product_name VARCHAR, product_price VARCHAR)",
        "answer": "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500",
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Find the name of dorms only for female (F gender).",
        "context": "CREATE TABLE dorm (dorm_name VARCHAR, gender VARCHAR)",
        "answer": "SELECT dorm_name FROM dorm WHERE gender  =  'F'",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the name of dorms that can accommodate more than 300 students.",
        "context": "CREATE TABLE dorm (dorm_name VARCHAR, student_capacity INTEGER)",
        "answer": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300",
        "db_id": "dorm_1"
    },
    {
        "question": "How many female students (sex is F) whose age is below 25?",
        "context": "CREATE TABLE student (sex VARCHAR, age VARCHAR)",
        "answer": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the first name of students who is older than 20.",
        "context": "CREATE TABLE student (fname VARCHAR, age INTEGER)",
        "answer": "SELECT fname FROM student WHERE age  >  20",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "context": "CREATE TABLE student (fname VARCHAR, city_code VARCHAR, age VARCHAR)",
        "answer": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "db_id": "dorm_1"
    },
    {
        "question": "How many dorms are there?",
        "context": "CREATE TABLE dorm (Id VARCHAR)",
        "answer": "SELECT count(*) FROM dorm",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the number of distinct amenities.",
        "context": "CREATE TABLE dorm_amenity (Id VARCHAR)",
        "answer": "SELECT count(*) FROM dorm_amenity",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the total capacity of all dorms.",
        "context": "CREATE TABLE dorm (student_capacity INTEGER)",
        "answer": "SELECT sum(student_capacity) FROM dorm",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the average age of all students living in the each city.",
        "context": "CREATE TABLE student (city_code VARCHAR, age INTEGER)",
        "answer": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the average and total capacity of dorms for the students with gender X.",
        "context": "CREATE TABLE dorm (student_capacity INTEGER, gender VARCHAR)",
        "answer": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the number of dorms that have some amenity.",
        "context": "CREATE TABLE has_amenity (dormid VARCHAR)",
        "answer": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the name of dorms that do not have any amenity",
        "context": "CREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE has_amenity (dorm_name VARCHAR, dormid VARCHAR)",
        "answer": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the number of distinct gender for dorms.",
        "context": "CREATE TABLE dorm (gender VARCHAR)",
        "answer": "SELECT count(DISTINCT gender) FROM dorm",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
        "context": "CREATE TABLE dorm (student_capacity VARCHAR, gender VARCHAR, dorm_name VARCHAR)",
        "answer": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "context": "CREATE TABLE dorm (dorm_name VARCHAR, gender VARCHAR, student_capacity VARCHAR)",
        "answer": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the numbers of different majors and cities.",
        "context": "CREATE TABLE student (major VARCHAR, city_code VARCHAR)",
        "answer": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
        "context": "CREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm_amenity (amenid VARCHAR, amenity_name VARCHAR)",
        "answer": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "context": "CREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm_amenity (amenid VARCHAR, amenity_name VARCHAR)",
        "answer": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "context": "CREATE TABLE student (lname VARCHAR, sex VARCHAR, city_code VARCHAR, age VARCHAR)",
        "answer": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the name of the dorm with the largest capacity.",
        "context": "CREATE TABLE dorm (dorm_name VARCHAR, student_capacity VARCHAR)",
        "answer": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
        "db_id": "dorm_1"
    },
    {
        "question": "List in alphabetic order all different amenities.",
        "context": "CREATE TABLE dorm_amenity (amenity_name VARCHAR)",
        "answer": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the first and last name of students whose age is younger than the average age.",
        "context": "CREATE TABLE student (fname VARCHAR, lname VARCHAR, age INTEGER)",
        "answer": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)",
        "db_id": "dorm_1"
    },
    {
        "question": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
        "context": "CREATE TABLE student (fname VARCHAR, lname VARCHAR, city_code VARCHAR, age VARCHAR)",
        "answer": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age",
        "db_id": "dorm_1"
    },
    {
        "question": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
        "context": "CREATE TABLE has_amenity (amenid VARCHAR, dormid VARCHAR); CREATE TABLE dorm_amenity (amenity_name VARCHAR, amenid VARCHAR); CREATE TABLE dorm (dormid VARCHAR, dorm_name VARCHAR)",
        "answer": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the number of dorms and total capacity for each gender.",
        "context": "CREATE TABLE dorm (gender VARCHAR, student_capacity INTEGER)",
        "answer": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the average and oldest age for students with different sex.",
        "context": "CREATE TABLE student (sex VARCHAR, age INTEGER)",
        "answer": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the number of students in each major.",
        "context": "CREATE TABLE student (major VARCHAR)",
        "answer": "SELECT count(*) ,  major FROM student GROUP BY major",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the number and average age of students living in each city.",
        "context": "CREATE TABLE student (city_code VARCHAR, age INTEGER)",
        "answer": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the average age and number of male students (with sex M) from each city.",
        "context": "CREATE TABLE student (city_code VARCHAR, age INTEGER, sex VARCHAR)",
        "answer": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the number of students for the cities where have more than one student.",
        "context": "CREATE TABLE student (city_code VARCHAR)",
        "answer": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the first and last name of students who are not in the largest major.",
        "context": "CREATE TABLE student (fname VARCHAR, lname VARCHAR, major VARCHAR)",
        "answer": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the number of students whose age is older than the average age for each gender.",
        "context": "CREATE TABLE student (sex VARCHAR, age INTEGER)",
        "answer": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the average age of students living in each dorm and the name of dorm.",
        "context": "CREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR)",
        "answer": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.",
        "context": "CREATE TABLE dorm (dormid VARCHAR, student_capacity INTEGER); CREATE TABLE has_amenity (dormid VARCHAR)",
        "answer": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the number of students who is older than 20 in each dorm.",
        "context": "CREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE student (stuid VARCHAR, age INTEGER)",
        "answer": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the first name of students who are living in the Smith Hall.",
        "context": "CREATE TABLE student (fname VARCHAR, stuid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE dorm (dormid VARCHAR, dorm_name VARCHAR)",
        "answer": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the average age of students who are living in the dorm with the largest capacity.",
        "context": "CREATE TABLE dorm (student_capacity INTEGER); CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE dorm (dormid VARCHAR, student_capacity INTEGER)",
        "answer": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "context": "CREATE TABLE dorm (dormid VARCHAR, gender VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE student (stuid VARCHAR)",
        "answer": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the number of female students (with F sex) living in Smith Hall",
        "context": "CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE student (stuid VARCHAR, sex VARCHAR); CREATE TABLE dorm (dormid VARCHAR, dorm_name VARCHAR)",
        "answer": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the name of amenities Smith Hall dorm have.",
        "context": "CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm_amenity (amenity_name VARCHAR, amenid VARCHAR); CREATE TABLE dorm (dormid VARCHAR, dorm_name VARCHAR)",
        "answer": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
        "context": "CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm_amenity (amenity_name VARCHAR, amenid VARCHAR); CREATE TABLE dorm (dormid VARCHAR, dorm_name VARCHAR)",
        "answer": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the name of amenity that is most common in all dorms.",
        "context": "CREATE TABLE dorm_amenity (amenity_name VARCHAR, amenid VARCHAR); CREATE TABLE has_amenity (amenid VARCHAR)",
        "answer": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the first name of students who are living in the dorm that has most number of amenities.",
        "context": "CREATE TABLE dorm_amenity (amenid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE dorm (dormid VARCHAR); CREATE TABLE student (fname VARCHAR, stuid VARCHAR); CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR)",
        "answer": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the name and capacity of the dorm with least number of amenities.",
        "context": "CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm_amenity (amenid VARCHAR); CREATE TABLE dorm (dorm_name VARCHAR, student_capacity VARCHAR, dormid VARCHAR)",
        "answer": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the name of dorms that do not have amenity TV Lounge.",
        "context": "CREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm (dorm_name VARCHAR); CREATE TABLE dorm_amenity (amenid VARCHAR, amenity_name VARCHAR)",
        "answer": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.",
        "context": "CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE student (fname VARCHAR, lname VARCHAR, stuid VARCHAR); CREATE TABLE dorm_amenity (amenid VARCHAR, amenity_name VARCHAR)",
        "answer": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.",
        "context": "CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE student (fname VARCHAR, age VARCHAR, stuid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE dorm_amenity (amenid VARCHAR, amenity_name VARCHAR)",
        "answer": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
        "context": "CREATE TABLE student (stuid VARCHAR, lname VARCHAR); CREATE TABLE dorm (dormid VARCHAR); CREATE TABLE lives_in (dormid VARCHAR, stuid VARCHAR); CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm_amenity (amenity_name VARCHAR, amenid VARCHAR)",
        "answer": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
        "db_id": "dorm_1"
    },
    {
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "context": "CREATE TABLE customers (email_address VARCHAR, phone_number VARCHAR)",
        "answer": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "db_id": "customer_complaints"
    },
    {
        "question": "Which city has the least number of customers whose type code is \"Good Credit Rating\"?",
        "context": "CREATE TABLE customers (town_city VARCHAR, customer_type_code VARCHAR)",
        "answer": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1",
        "db_id": "customer_complaints"
    },
    {
        "question": "List the name of all products along with the number of complaints that they have received.",
        "context": "CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE complaints (product_id VARCHAR)",
        "answer": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "context": "CREATE TABLE customers (email_address VARCHAR, customer_id VARCHAR); CREATE TABLE complaints (customer_id VARCHAR)",
        "answer": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "db_id": "customer_complaints"
    },
    {
        "question": "Which products has been complained by the customer who has filed least amount of complaints?",
        "context": "CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE complaints (product_id VARCHAR)",
        "answer": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "db_id": "customer_complaints"
    },
    {
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "context": "CREATE TABLE customers (phone_number VARCHAR, customer_id VARCHAR); CREATE TABLE complaints (customer_id VARCHAR, date_complaint_raised VARCHAR)",
        "answer": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the email and phone number of the customers who have never filed a complaint before.",
        "context": "CREATE TABLE complaints (email_address VARCHAR, phone_number VARCHAR, customer_id VARCHAR); CREATE TABLE customers (email_address VARCHAR, phone_number VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the phone number of all the customers and staff.",
        "context": "CREATE TABLE staff (phone_number VARCHAR); CREATE TABLE customers (phone_number VARCHAR)",
        "answer": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
        "db_id": "customer_complaints"
    },
    {
        "question": "What is the description of the product named \"Chocolate\"?",
        "context": "CREATE TABLE products (product_description VARCHAR, product_name VARCHAR)",
        "answer": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\"",
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the name and category of the most expensive product.",
        "context": "CREATE TABLE products (product_name VARCHAR, product_category_code VARCHAR, product_price VARCHAR)",
        "answer": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1",
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the prices of products which has never received a single complaint.",
        "context": "CREATE TABLE products (product_price VARCHAR, product_id VARCHAR); CREATE TABLE complaints (product_price VARCHAR, product_id VARCHAR)",
        "answer": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "db_id": "customer_complaints"
    },
    {
        "question": "What is the average price of the products for each category?",
        "context": "CREATE TABLE products (product_category_code VARCHAR, product_price INTEGER)",
        "answer": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code",
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the last name of the staff member who processed the complaint of the cheapest product.",
        "context": "CREATE TABLE products (product_id VARCHAR, product_price VARCHAR); CREATE TABLE complaints (staff_id VARCHAR, product_id VARCHAR); CREATE TABLE staff (last_name VARCHAR, staff_id VARCHAR)",
        "answer": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1",
        "db_id": "customer_complaints"
    },
    {
        "question": "Which complaint status has more than 3 records on file?",
        "context": "CREATE TABLE complaints (complaint_status_code VARCHAR)",
        "answer": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3",
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the last name of the staff whose email address contains \"wrau\".",
        "context": "CREATE TABLE staff (last_name VARCHAR, email_address VARCHAR)",
        "answer": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"",
        "db_id": "customer_complaints"
    },
    {
        "question": "How many customers are there in the customer type with the most customers?",
        "context": "CREATE TABLE customers (customer_type_code VARCHAR)",
        "answer": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customer_complaints"
    },
    {
        "question": "What is the last name of the staff who has handled the first ever complaint?",
        "context": "CREATE TABLE staff (last_name VARCHAR, staff_id VARCHAR); CREATE TABLE complaints (staff_id VARCHAR, date_complaint_raised VARCHAR)",
        "answer": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "db_id": "customer_complaints"
    },
    {
        "question": "How many distinct complaint type codes are there in the database?",
        "context": "CREATE TABLE complaints (complaint_type_code VARCHAR)",
        "answer": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
        "context": "CREATE TABLE customers (address_line_1 VARCHAR, address_line_2 VARCHAR, email_address VARCHAR)",
        "answer": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the number of complaints with Product Failure type for each complaint status.",
        "context": "CREATE TABLE complaints (complaint_status_code VARCHAR, complaint_type_code VARCHAR)",
        "answer": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code",
        "db_id": "customer_complaints"
    },
    {
        "question": "What is first names of the top 5 staff who have handled the greatest number of complaints?",
        "context": "CREATE TABLE complaints (staff_id VARCHAR); CREATE TABLE staff (first_name VARCHAR, staff_id VARCHAR)",
        "answer": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5",
        "db_id": "customer_complaints"
    },
    {
        "question": "Which state has the most customers?",
        "context": "CREATE TABLE customers (state VARCHAR)",
        "answer": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "db_id": "customer_complaints"
    },
    {
        "question": "How many submissions are there?",
        "context": "CREATE TABLE submission (Id VARCHAR)",
        "answer": "SELECT count(*) FROM submission",
        "db_id": "workshop_paper"
    },
    {
        "question": "List the authors of submissions in ascending order of scores.",
        "context": "CREATE TABLE submission (Author VARCHAR, Scores VARCHAR)",
        "answer": "SELECT Author FROM submission ORDER BY Scores ASC",
        "db_id": "workshop_paper"
    },
    {
        "question": "What are the authors of submissions and their colleges?",
        "context": "CREATE TABLE submission (Author VARCHAR, College VARCHAR)",
        "answer": "SELECT Author ,  College FROM submission",
        "db_id": "workshop_paper"
    },
    {
        "question": "Show the names of authors from college \"Florida\" or \"Temple\"",
        "context": "CREATE TABLE submission (Author VARCHAR, College VARCHAR)",
        "answer": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"",
        "db_id": "workshop_paper"
    },
    {
        "question": "What is the average score of submissions?",
        "context": "CREATE TABLE submission (Scores INTEGER)",
        "answer": "SELECT avg(Scores) FROM submission",
        "db_id": "workshop_paper"
    },
    {
        "question": "What is the author of the submission with the highest score?",
        "context": "CREATE TABLE submission (Author VARCHAR, Scores VARCHAR)",
        "answer": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
        "db_id": "workshop_paper"
    },
    {
        "question": "Show different colleges along with the number of authors of submission from each college.",
        "context": "CREATE TABLE submission (College VARCHAR)",
        "answer": "SELECT College ,  COUNT(*) FROM submission GROUP BY College",
        "db_id": "workshop_paper"
    },
    {
        "question": "Show the most common college of authors of submissions.",
        "context": "CREATE TABLE submission (College VARCHAR)",
        "answer": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "workshop_paper"
    },
    {
        "question": "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.",
        "context": "CREATE TABLE submission (College VARCHAR, Scores INTEGER)",
        "answer": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80",
        "db_id": "workshop_paper"
    },
    {
        "question": "Show the authors of submissions and the acceptance results of their submissions.",
        "context": "CREATE TABLE acceptance (Result VARCHAR, Submission_ID VARCHAR); CREATE TABLE submission (Author VARCHAR, Submission_ID VARCHAR)",
        "answer": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID",
        "db_id": "workshop_paper"
    },
    {
        "question": "Show the result of the submission with the highest score.",
        "context": "CREATE TABLE acceptance (Result VARCHAR, Submission_ID VARCHAR); CREATE TABLE submission (Submission_ID VARCHAR, Scores VARCHAR)",
        "answer": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1",
        "db_id": "workshop_paper"
    },
    {
        "question": "Show each author and the number of workshops they submitted to.",
        "context": "CREATE TABLE submission (Author VARCHAR, Submission_ID VARCHAR); CREATE TABLE acceptance (workshop_id VARCHAR, Submission_ID VARCHAR)",
        "answer": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",
        "db_id": "workshop_paper"
    },
    {
        "question": "Show the authors who have submissions to more than one workshop.",
        "context": "CREATE TABLE submission (Author VARCHAR, Submission_ID VARCHAR); CREATE TABLE acceptance (Submission_ID VARCHAR, workshop_id VARCHAR)",
        "answer": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
        "db_id": "workshop_paper"
    },
    {
        "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
        "context": "CREATE TABLE workshop (Date VARCHAR, Venue VARCHAR)",
        "answer": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "db_id": "workshop_paper"
    },
    {
        "question": "List the authors who do not have submission to any workshop.",
        "context": "CREATE TABLE acceptance (Author VARCHAR, Submission_ID VARCHAR); CREATE TABLE submission (Author VARCHAR, Submission_ID VARCHAR)",
        "answer": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
        "db_id": "workshop_paper"
    },
    {
        "question": "Find the number of investors in total.",
        "context": "CREATE TABLE INVESTORS (Id VARCHAR)",
        "answer": "SELECT count(*) FROM INVESTORS",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show all investor details.",
        "context": "CREATE TABLE INVESTORS (Investor_details VARCHAR)",
        "answer": "SELECT Investor_details FROM INVESTORS",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show all distinct lot details.",
        "context": "CREATE TABLE LOTS (lot_details VARCHAR)",
        "answer": "SELECT DISTINCT lot_details FROM LOTS",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the maximum amount of transaction.",
        "context": "CREATE TABLE TRANSACTIONS (amount_of_transaction INTEGER)",
        "answer": "SELECT max(amount_of_transaction) FROM TRANSACTIONS",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show all date and share count of transactions.",
        "context": "CREATE TABLE TRANSACTIONS (date_of_transaction VARCHAR, share_count VARCHAR)",
        "answer": "SELECT date_of_transaction ,  share_count FROM TRANSACTIONS",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What is the total share of transactions?",
        "context": "CREATE TABLE TRANSACTIONS (share_count INTEGER)",
        "answer": "SELECT sum(share_count) FROM TRANSACTIONS",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show all transaction ids with transaction code 'PUR'.",
        "context": "CREATE TABLE TRANSACTIONS (transaction_id VARCHAR, transaction_type_code VARCHAR)",
        "answer": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR'",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show all dates of transactions whose type code is \"SALE\".",
        "context": "CREATE TABLE TRANSACTIONS (date_of_transaction VARCHAR, transaction_type_code VARCHAR)",
        "answer": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average amount of transactions with type code \"SALE\".",
        "context": "CREATE TABLE TRANSACTIONS (amount_of_transaction INTEGER, transaction_type_code VARCHAR)",
        "answer": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the description of transaction type with code \"PUR\".",
        "context": "CREATE TABLE Ref_Transaction_Types (transaction_type_description VARCHAR, transaction_type_code VARCHAR)",
        "answer": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.",
        "context": "CREATE TABLE TRANSACTIONS (amount_of_transaction INTEGER, transaction_type_code VARCHAR, share_count VARCHAR)",
        "answer": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the maximum share count of transactions where the amount is smaller than 10000",
        "context": "CREATE TABLE TRANSACTIONS (share_count INTEGER, amount_of_transaction INTEGER)",
        "answer": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.",
        "context": "CREATE TABLE TRANSACTIONS (date_of_transaction VARCHAR, share_count VARCHAR, amount_of_transaction VARCHAR)",
        "answer": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the transaction type descriptions and dates if the share count is smaller than 10.",
        "context": "CREATE TABLE Ref_Transaction_Types (transaction_type_description VARCHAR, transaction_type_code VARCHAR); CREATE TABLE TRANSACTIONS (date_of_transaction VARCHAR, transaction_type_code VARCHAR, share_count INTEGER)",
        "answer": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show details of all investors if they make any transaction with share count greater than 100.",
        "context": "CREATE TABLE TRANSACTIONS (investor_id VARCHAR, share_count INTEGER); CREATE TABLE INVESTORS (Investor_details VARCHAR, investor_id VARCHAR)",
        "answer": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "How many distinct transaction types are used in the transactions?",
        "context": "CREATE TABLE TRANSACTIONS (transaction_type_code VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Return the lot details and investor ids.",
        "context": "CREATE TABLE LOTS (lot_details VARCHAR, investor_id VARCHAR)",
        "answer": "SELECT lot_details ,  investor_id FROM LOTS",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Return the lot details of lots that belong to investors with details \"l\"?",
        "context": "CREATE TABLE LOTS (lot_details VARCHAR, investor_id VARCHAR); CREATE TABLE INVESTORS (investor_id VARCHAR, Investor_details VARCHAR)",
        "answer": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  \"l\"",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the purchase details of transactions with amount bigger than 10000?",
        "context": "CREATE TABLE PURCHASES (purchase_details VARCHAR, purchase_transaction_id VARCHAR); CREATE TABLE TRANSACTIONS (transaction_id VARCHAR, amount_of_transaction INTEGER)",
        "answer": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the sale details and dates of transactions with amount smaller than 3000?",
        "context": "CREATE TABLE SALES (sales_details VARCHAR, sales_transaction_id VARCHAR); CREATE TABLE TRANSACTIONS (date_of_transaction VARCHAR, transaction_id VARCHAR, amount_of_transaction INTEGER)",
        "answer": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the lot details of lots associated with transactions with share count smaller than 50?",
        "context": "CREATE TABLE LOTS (lot_details VARCHAR, lot_id VARCHAR); CREATE TABLE TRANSACTIONS_LOTS (transaction_id VARCHAR); CREATE TABLE TRANSACTIONS (transaction_id VARCHAR, share_count INTEGER)",
        "answer": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?",
        "context": "CREATE TABLE LOTS (lot_details VARCHAR, lot_id VARCHAR); CREATE TABLE TRANSACTIONS_LOTS (transaction_id VARCHAR); CREATE TABLE TRANSACTIONS (transaction_id VARCHAR, share_count VARCHAR, transaction_type_code VARCHAR)",
        "answer": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average transaction amount for different transaction types.",
        "context": "CREATE TABLE TRANSACTIONS (transaction_type_code VARCHAR, amount_of_transaction INTEGER)",
        "answer": "SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the maximum and minimum share count of different transaction types.",
        "context": "CREATE TABLE TRANSACTIONS (transaction_type_code VARCHAR, share_count INTEGER)",
        "answer": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average share count of transactions for different investors.",
        "context": "CREATE TABLE TRANSACTIONS (investor_id VARCHAR, share_count INTEGER)",
        "answer": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average share count of transactions each each investor, ordered by average share count.",
        "context": "CREATE TABLE TRANSACTIONS (investor_id VARCHAR, share_count INTEGER)",
        "answer": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average amount of transactions for different investors.",
        "context": "CREATE TABLE TRANSACTIONS (investor_id VARCHAR, amount_of_transaction INTEGER)",
        "answer": "SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average amount of transactions for different lots.",
        "context": "CREATE TABLE TRANSACTIONS (transaction_id VARCHAR); CREATE TABLE Transactions_Lots (lot_id VARCHAR, transaction_id VARCHAR)",
        "answer": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average amount of transactions for different lots, ordered by average amount of transactions.",
        "context": "CREATE TABLE TRANSACTIONS (transaction_id VARCHAR); CREATE TABLE Transactions_Lots (lot_id VARCHAR, transaction_id VARCHAR)",
        "answer": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.",
        "context": "CREATE TABLE TRANSACTIONS (investor_id VARCHAR, transaction_type_code VARCHAR)",
        "answer": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\" GROUP BY investor_id",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the number of transactions for different investors.",
        "context": "CREATE TABLE TRANSACTIONS (investor_id VARCHAR)",
        "answer": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the transaction type code that occurs the fewest times.",
        "context": "CREATE TABLE TRANSACTIONS (transaction_type_code VARCHAR)",
        "answer": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the transaction type code that occurs the most frequently.",
        "context": "CREATE TABLE TRANSACTIONS (transaction_type_code VARCHAR)",
        "answer": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the description of the transaction type that occurs most frequently.",
        "context": "CREATE TABLE TRANSACTIONS (transaction_type_code VARCHAR); CREATE TABLE Ref_Transaction_Types (transaction_type_description VARCHAR, transaction_type_code VARCHAR)",
        "answer": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the id and details of the investor that has the largest number of transactions.",
        "context": "CREATE TABLE TRANSACTIONS (investor_id VARCHAR); CREATE TABLE INVESTORS (Investor_details VARCHAR, investor_id VARCHAR)",
        "answer": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the id and details for the investors who have the top 3 number of transactions.",
        "context": "CREATE TABLE TRANSACTIONS (investor_id VARCHAR); CREATE TABLE INVESTORS (Investor_details VARCHAR, investor_id VARCHAR)",
        "answer": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the ids of the investors who have at least two transactions.",
        "context": "CREATE TABLE TRANSACTIONS (investor_id VARCHAR); CREATE TABLE INVESTORS (investor_id VARCHAR)",
        "answer": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".",
        "context": "CREATE TABLE TRANSACTIONS (investor_id VARCHAR, transaction_type_code VARCHAR); CREATE TABLE INVESTORS (Investor_details VARCHAR, investor_id VARCHAR)",
        "answer": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
        "context": "CREATE TABLE TRANSACTIONS (date_of_transaction VARCHAR, share_count VARCHAR, amount_of_transaction VARCHAR)",
        "answer": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the details of all sales and purchases?",
        "context": "CREATE TABLE purchases (sales_details VARCHAR, purchase_details VARCHAR); CREATE TABLE sales (sales_details VARCHAR, purchase_details VARCHAR)",
        "answer": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the details of the lots which are not used in any transactions?",
        "context": "CREATE TABLE Lots (lot_details VARCHAR, lot_id VARCHAR); CREATE TABLE Lots (lot_details VARCHAR); CREATE TABLE transactions_lots (lot_id VARCHAR)",
        "answer": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id",
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "How many available hotels are there in total?",
        "context": "CREATE TABLE HOTELS (Id VARCHAR)",
        "answer": "SELECT count(*) FROM HOTELS",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the price ranges of hotels?",
        "context": "CREATE TABLE HOTELS (price_range VARCHAR)",
        "answer": "SELECT price_range FROM HOTELS",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show all distinct location names.",
        "context": "CREATE TABLE LOCATIONS (Location_Name VARCHAR)",
        "answer": "SELECT DISTINCT Location_Name FROM LOCATIONS",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show the names and details of all the staff members.",
        "context": "CREATE TABLE Staff (Name VARCHAR, Other_Details VARCHAR)",
        "answer": "SELECT Name ,  Other_Details FROM Staff",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show details of all visitors.",
        "context": "CREATE TABLE VISITORS (Tourist_Details VARCHAR)",
        "answer": "SELECT Tourist_Details FROM VISITORS",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show the price ranges of hotels with 5 star ratings.",
        "context": "CREATE TABLE HOTELS (price_range VARCHAR, star_rating_code VARCHAR)",
        "answer": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show the average price range of hotels that have 5 star ratings and allow pets.",
        "context": "CREATE TABLE HOTELS (price_range INTEGER, star_rating_code VARCHAR, pets_allowed_yn VARCHAR)",
        "answer": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What is the address of the location \"UK Gallery\"?",
        "context": "CREATE TABLE LOCATIONS (Address VARCHAR, Location_Name VARCHAR)",
        "answer": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What is the detail of the location UK Gallery?",
        "context": "CREATE TABLE LOCATIONS (Other_Details VARCHAR, Location_Name VARCHAR)",
        "answer": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Which location names contain the word \"film\"?",
        "context": "CREATE TABLE LOCATIONS (Location_Name VARCHAR)",
        "answer": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "How many distinct names are associated with all the photos?",
        "context": "CREATE TABLE PHOTOS (Name VARCHAR)",
        "answer": "SELECT count(DISTINCT Name) FROM PHOTOS",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the distinct visit dates?",
        "context": "CREATE TABLE VISITS (Visit_Date VARCHAR)",
        "answer": "SELECT DISTINCT Visit_Date FROM VISITS",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the names of the tourist attractions that can be accessed by bus?",
        "context": "CREATE TABLE TOURIST_ATTRACTIONS (Name VARCHAR, How_to_Get_There VARCHAR)",
        "answer": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
        "context": "CREATE TABLE TOURIST_ATTRACTIONS (Name VARCHAR, Opening_Hours VARCHAR, How_to_Get_There VARCHAR)",
        "answer": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the star rating descriptions of the hotels with price above 10000?",
        "context": "CREATE TABLE HOTELS (star_rating_code VARCHAR, price_range INTEGER); CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_description VARCHAR, star_rating_code VARCHAR)",
        "answer": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the details and opening hours of the museums?",
        "context": "CREATE TABLE TOURIST_ATTRACTIONS (Opening_Hours VARCHAR, Tourist_Attraction_ID VARCHAR); CREATE TABLE MUSEUMS (Museum_Details VARCHAR, Museum_ID VARCHAR)",
        "answer": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
        "context": "CREATE TABLE TOURIST_ATTRACTIONS (Name VARCHAR, Tourist_Attraction_ID VARCHAR); CREATE TABLE PHOTOS (Tourist_Attraction_ID VARCHAR, Name VARCHAR)",
        "answer": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "context": "CREATE TABLE TOURIST_ATTRACTIONS (Tourist_Attraction_ID VARCHAR, Name VARCHAR); CREATE TABLE PHOTOS (Name VARCHAR, Description VARCHAR, Tourist_Attraction_ID VARCHAR)",
        "answer": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the details and ways to get to tourist attractions related to royal family?",
        "context": "CREATE TABLE TOURIST_ATTRACTIONS (How_to_Get_There VARCHAR, Tourist_Attraction_ID VARCHAR); CREATE TABLE ROYAL_FAMILY (Royal_Family_Details VARCHAR, Royal_Family_ID VARCHAR)",
        "answer": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the details of the shops that can be accessed by walk?",
        "context": "CREATE TABLE TOURIST_ATTRACTIONS (Tourist_Attraction_ID VARCHAR, How_to_Get_There VARCHAR); CREATE TABLE SHOPS (Shop_Details VARCHAR, Shop_ID VARCHAR)",
        "answer": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What is the name of the staff that is in charge of the attraction named \"US museum\"?",
        "context": "CREATE TABLE TOURIST_ATTRACTIONS (Tourist_Attraction_ID VARCHAR, Name VARCHAR); CREATE TABLE STAFF (Name VARCHAR, Tourist_Attraction_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "context": "CREATE TABLE Street_Markets (Market_Details VARCHAR, Market_ID VARCHAR); CREATE TABLE TOURIST_ATTRACTIONS (Tourist_Attraction_ID VARCHAR, How_to_Get_There VARCHAR)",
        "answer": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
        "context": "CREATE TABLE VISITORS (Tourist_ID VARCHAR, Tourist_Details VARCHAR); CREATE TABLE VISITS (Visit_Date VARCHAR, Visit_Details VARCHAR, Tourist_ID VARCHAR)",
        "answer": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Which tourist attractions does the visitor with detail 'Vincent' visit?",
        "context": "CREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR, Tourist_ID VARCHAR); CREATE TABLE VISITORS (Tourist_ID VARCHAR, Tourist_Details VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?",
        "context": "CREATE TABLE VISITORS (Tourist_ID VARCHAR, Tourist_Details VARCHAR); CREATE TABLE VISITS (Visit_Date VARCHAR, Tourist_Attraction_ID VARCHAR, Tourist_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)",
        "answer": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show the average price of hotels for each star rating code.",
        "context": "CREATE TABLE HOTELS (star_rating_code VARCHAR, price_range INTEGER)",
        "answer": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show the average price of hotels for different pet policy.",
        "context": "CREATE TABLE HOTELS (pets_allowed_yn VARCHAR, price_range INTEGER)",
        "answer": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "context": "CREATE TABLE HOTELS (hotel_id VARCHAR, star_rating_code VARCHAR, price_range VARCHAR)",
        "answer": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show the details of the top 3 most expensive hotels.",
        "context": "CREATE TABLE HOTELS (other_hotel_details VARCHAR, price_range VARCHAR)",
        "answer": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show the details and star ratings of the 3 least expensive hotels.",
        "context": "CREATE TABLE HOTELS (other_hotel_details VARCHAR, star_rating_code VARCHAR, price_range VARCHAR)",
        "answer": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show the transportation method most people choose to get to tourist attractions.",
        "context": "CREATE TABLE Tourist_Attractions (How_to_Get_There VARCHAR)",
        "answer": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show the description and code of the attraction type most tourist attractions belong to.",
        "context": "CREATE TABLE Ref_Attraction_Types (Attraction_Type_Description VARCHAR, Attraction_Type_Code VARCHAR); CREATE TABLE Tourist_Attractions (Attraction_Type_Code VARCHAR)",
        "answer": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
        "context": "CREATE TABLE Tourist_Attractions (How_to_Get_There VARCHAR)",
        "answer": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show different tourist attractions' names, ids, and the corresponding number of visits.",
        "context": "CREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)",
        "answer": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show the names and ids of tourist attractions that are visited at least two times.",
        "context": "CREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)",
        "answer": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "Show the names and ids of tourist attractions that are visited at most once.",
        "context": "CREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)",
        "answer": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
        "context": "CREATE TABLE Tourist_Attractions (Name VARCHAR, Location_ID VARCHAR, How_to_Get_There VARCHAR); CREATE TABLE Locations (Location_ID VARCHAR, Address VARCHAR)",
        "answer": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "context": "CREATE TABLE Tourist_Attraction_Features (tourist_attraction_id VARCHAR, Feature_ID VARCHAR); CREATE TABLE Features (Feature_ID VARCHAR, feature_Details VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, tourist_attraction_id VARCHAR)",
        "answer": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
        "context": "CREATE TABLE Tourist_Attractions (Name VARCHAR, Location_ID VARCHAR, How_to_Get_There VARCHAR); CREATE TABLE Locations (Location_ID VARCHAR, Address VARCHAR)",
        "answer": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the names of the tourist attractions Vincent and Marcelle visit?",
        "context": "CREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR, Tourist_ID VARCHAR); CREATE TABLE VISITORS (Tourist_Details VARCHAR, Tourist_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
        "context": "CREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR, Tourist_ID VARCHAR); CREATE TABLE VISITORS (Tourist_Details VARCHAR, Tourist_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "How many tourists did not make any visit?",
        "context": "CREATE TABLE Visitors (Tourist_ID VARCHAR); CREATE TABLE Visits (Tourist_ID VARCHAR)",
        "answer": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "db_id": "cre_Theme_park"
    },
    {
        "question": "How many video games exist?",
        "context": "CREATE TABLE Video_games (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Video_games",
        "db_id": "game_1"
    },
    {
        "question": "How many video game types exist?",
        "context": "CREATE TABLE Video_games (gtype VARCHAR)",
        "answer": "SELECT count(DISTINCT gtype) FROM Video_games",
        "db_id": "game_1"
    },
    {
        "question": "Show all video game types.",
        "context": "CREATE TABLE Video_games (gtype VARCHAR)",
        "answer": "SELECT DISTINCT gtype FROM Video_games",
        "db_id": "game_1"
    },
    {
        "question": "Show all video games and their types in the order of their names.",
        "context": "CREATE TABLE Video_games (gname VARCHAR, gtype VARCHAR)",
        "answer": "SELECT gname ,  gtype FROM Video_games ORDER BY gname",
        "db_id": "game_1"
    },
    {
        "question": "Show all video games with type Collectible card game.",
        "context": "CREATE TABLE Video_games (gname VARCHAR, gtype VARCHAR)",
        "answer": "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"",
        "db_id": "game_1"
    },
    {
        "question": "What is the type of video game Call of Destiny.",
        "context": "CREATE TABLE Video_games (gtype VARCHAR, gname VARCHAR)",
        "answer": "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"",
        "db_id": "game_1"
    },
    {
        "question": "How many video games have type Massively multiplayer online game?",
        "context": "CREATE TABLE Video_games (gtype VARCHAR)",
        "answer": "SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\"",
        "db_id": "game_1"
    },
    {
        "question": "Show all video game types and the number of video games in each type.",
        "context": "CREATE TABLE Video_games (gtype VARCHAR)",
        "answer": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype",
        "db_id": "game_1"
    },
    {
        "question": "Which game type has most number of games?",
        "context": "CREATE TABLE Video_games (gtype VARCHAR)",
        "answer": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1",
        "db_id": "game_1"
    },
    {
        "question": "Which game type has least number of games?",
        "context": "CREATE TABLE Video_games (gtype VARCHAR)",
        "answer": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1",
        "db_id": "game_1"
    },
    {
        "question": "Show ids for all students who live in CHI.",
        "context": "CREATE TABLE Student (StuID VARCHAR, city_code VARCHAR)",
        "answer": "SELECT StuID FROM Student WHERE city_code  =  \"CHI\"",
        "db_id": "game_1"
    },
    {
        "question": "Show ids for all students who have advisor 1121.",
        "context": "CREATE TABLE Student (StuID VARCHAR, Advisor VARCHAR)",
        "answer": "SELECT StuID FROM Student WHERE Advisor  =  1121",
        "db_id": "game_1"
    },
    {
        "question": "Show first name for all students with major 600.",
        "context": "CREATE TABLE Student (Fname VARCHAR, Major VARCHAR)",
        "answer": "SELECT Fname FROM Student WHERE Major  =  600",
        "db_id": "game_1"
    },
    {
        "question": "Show the average, minimum, and maximum age for different majors.",
        "context": "CREATE TABLE Student (major VARCHAR, age INTEGER)",
        "answer": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major",
        "db_id": "game_1"
    },
    {
        "question": "Show all advisors who have at least two students.",
        "context": "CREATE TABLE Student (advisor VARCHAR)",
        "answer": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2",
        "db_id": "game_1"
    },
    {
        "question": "How many sports do we have?",
        "context": "CREATE TABLE Sportsinfo (sportname VARCHAR)",
        "answer": "SELECT count(DISTINCT sportname) FROM Sportsinfo",
        "db_id": "game_1"
    },
    {
        "question": "How many students play sports?",
        "context": "CREATE TABLE Sportsinfo (StuID VARCHAR)",
        "answer": "SELECT count(DISTINCT StuID) FROM Sportsinfo",
        "db_id": "game_1"
    },
    {
        "question": "List ids for all student who are on scholarship.",
        "context": "CREATE TABLE Sportsinfo (StuID VARCHAR, onscholarship VARCHAR)",
        "answer": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "db_id": "game_1"
    },
    {
        "question": "Show last names for all student who are on scholarship.",
        "context": "CREATE TABLE Student (Lname VARCHAR, StuID VARCHAR); CREATE TABLE Sportsinfo (StuID VARCHAR, onscholarship VARCHAR)",
        "answer": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'",
        "db_id": "game_1"
    },
    {
        "question": "How many games are played for all students?",
        "context": "CREATE TABLE Sportsinfo (gamesplayed INTEGER)",
        "answer": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "db_id": "game_1"
    },
    {
        "question": "How many games are played for all football games by students on scholarship?",
        "context": "CREATE TABLE Sportsinfo (gamesplayed INTEGER, sportname VARCHAR, onscholarship VARCHAR)",
        "answer": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'",
        "db_id": "game_1"
    },
    {
        "question": "Show all sport name and the number of students.",
        "context": "CREATE TABLE Sportsinfo (sportname VARCHAR)",
        "answer": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname",
        "db_id": "game_1"
    },
    {
        "question": "Show all student IDs with the number of sports and total number of games played",
        "context": "CREATE TABLE Sportsinfo (StuID VARCHAR, gamesplayed INTEGER)",
        "answer": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
        "db_id": "game_1"
    },
    {
        "question": "Show all student IDs with more than total 10 hours per week on all sports played.",
        "context": "CREATE TABLE Sportsinfo (StuID VARCHAR, hoursperweek INTEGER)",
        "answer": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10",
        "db_id": "game_1"
    },
    {
        "question": "What is the first name and last name of the student who have most number of sports?",
        "context": "CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, StuID VARCHAR); CREATE TABLE Sportsinfo (StuID VARCHAR)",
        "answer": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "db_id": "game_1"
    },
    {
        "question": "Which sport has most number of students on scholarship?",
        "context": "CREATE TABLE Sportsinfo (sportname VARCHAR, onscholarship VARCHAR)",
        "answer": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
        "db_id": "game_1"
    },
    {
        "question": "Show student ids who don't have any sports.",
        "context": "CREATE TABLE Sportsinfo (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)",
        "answer": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo",
        "db_id": "game_1"
    },
    {
        "question": "Show student ids who are on scholarship and have major 600.",
        "context": "CREATE TABLE Sportsinfo (StuID VARCHAR, major VARCHAR, onscholarship VARCHAR); CREATE TABLE Student (StuID VARCHAR, major VARCHAR, onscholarship VARCHAR)",
        "answer": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
        "db_id": "game_1"
    },
    {
        "question": "Show student ids who are female and play football.",
        "context": "CREATE TABLE Sportsinfo (StuID VARCHAR, sex VARCHAR, sportname VARCHAR); CREATE TABLE Student (StuID VARCHAR, sex VARCHAR, sportname VARCHAR)",
        "answer": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "db_id": "game_1"
    },
    {
        "question": "Show all male student ids who don't play football.",
        "context": "CREATE TABLE Sportsinfo (StuID VARCHAR, sex VARCHAR, sportname VARCHAR); CREATE TABLE Student (StuID VARCHAR, sex VARCHAR, sportname VARCHAR)",
        "answer": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
        "db_id": "game_1"
    },
    {
        "question": "Show total hours per week and number of games played for student David Shieber.",
        "context": "CREATE TABLE Student (StuID VARCHAR, Fname VARCHAR, Lname VARCHAR); CREATE TABLE Sportsinfo (StuID VARCHAR)",
        "answer": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"",
        "db_id": "game_1"
    },
    {
        "question": "Show total hours per week and number of games played for students under 20.",
        "context": "CREATE TABLE Student (StuID VARCHAR, age INTEGER); CREATE TABLE Sportsinfo (StuID VARCHAR)",
        "answer": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20",
        "db_id": "game_1"
    },
    {
        "question": "How many students play video games?",
        "context": "CREATE TABLE Plays_games (StuID VARCHAR)",
        "answer": "SELECT count(DISTINCT StuID) FROM Plays_games",
        "db_id": "game_1"
    },
    {
        "question": "Show ids of students who don't play video game.",
        "context": "CREATE TABLE Plays_games (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)",
        "answer": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
        "db_id": "game_1"
    },
    {
        "question": "Show ids of students who play video game and play sports.",
        "context": "CREATE TABLE Plays_games (StuID VARCHAR); CREATE TABLE Sportsinfo (StuID VARCHAR)",
        "answer": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "db_id": "game_1"
    },
    {
        "question": "Show all game ids and the number of hours played.",
        "context": "CREATE TABLE Plays_games (gameid VARCHAR, hours_played INTEGER)",
        "answer": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid",
        "db_id": "game_1"
    },
    {
        "question": "Show all student ids and the number of hours played.",
        "context": "CREATE TABLE Plays_games (Stuid VARCHAR, hours_played INTEGER)",
        "answer": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid",
        "db_id": "game_1"
    },
    {
        "question": "Show the game name that has most number of hours played.",
        "context": "CREATE TABLE Plays_games (gameid VARCHAR); CREATE TABLE Video_games (gameid VARCHAR)",
        "answer": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
        "db_id": "game_1"
    },
    {
        "question": "Show all game names played by at least 1000 hours.",
        "context": "CREATE TABLE Plays_games (gameid VARCHAR); CREATE TABLE Video_games (gameid VARCHAR)",
        "answer": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000",
        "db_id": "game_1"
    },
    {
        "question": "Show all game names played by Linda Smith",
        "context": "CREATE TABLE Student (Stuid VARCHAR, Lname VARCHAR, Fname VARCHAR); CREATE TABLE Plays_games (gameid VARCHAR, Stuid VARCHAR); CREATE TABLE Video_games (gameid VARCHAR)",
        "answer": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"",
        "db_id": "game_1"
    },
    {
        "question": "Find the last and first name of students who are playing Football or Lacrosse.",
        "context": "CREATE TABLE SportsInfo (StuID VARCHAR, SportName VARCHAR); CREATE TABLE Student (lname VARCHAR, fname VARCHAR, StuID VARCHAR)",
        "answer": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"",
        "db_id": "game_1"
    },
    {
        "question": "Find the first name and age of the students who are playing both Football and Lacrosse.",
        "context": "CREATE TABLE Student (fname VARCHAR, age VARCHAR, StuID VARCHAR, SportName VARCHAR); CREATE TABLE Sportsinfo (fname VARCHAR, age VARCHAR, StuID VARCHAR, SportName VARCHAR)",
        "answer": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")",
        "db_id": "game_1"
    },
    {
        "question": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.",
        "context": "CREATE TABLE Plays_games (StuID VARCHAR, GameID VARCHAR); CREATE TABLE Student (lname VARCHAR, sex VARCHAR, StuID VARCHAR); CREATE TABLE Video_games (GameID VARCHAR, Gname VARCHAR)",
        "answer": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")",
        "db_id": "game_1"
    },
    {
        "question": "Find the name of all customers.",
        "context": "CREATE TABLE customers (customer_name VARCHAR)",
        "answer": "SELECT customer_name FROM customers",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the average amount of items ordered in each order?",
        "context": "CREATE TABLE order_items (order_quantity INTEGER)",
        "answer": "SELECT avg(order_quantity) FROM order_items",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the names of customers who use payment method \"Cash\"?",
        "context": "CREATE TABLE customers (customer_name VARCHAR, payment_method VARCHAR)",
        "answer": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
        "context": "CREATE TABLE customers (date_became_customer VARCHAR, customer_id INTEGER)",
        "answer": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which payment method is used by most customers?",
        "context": "CREATE TABLE customers (payment_method VARCHAR)",
        "answer": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the names of customers using the most popular payment method?",
        "context": "CREATE TABLE customers (customer_name VARCHAR, payment_method VARCHAR)",
        "answer": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are all the payment methods?",
        "context": "CREATE TABLE customers (payment_method VARCHAR)",
        "answer": "SELECT DISTINCT payment_method FROM customers",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the details of all products?",
        "context": "CREATE TABLE products (product_details VARCHAR)",
        "answer": "SELECT DISTINCT product_details FROM products",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name of all customers whose name contains \"Alex\".",
        "context": "CREATE TABLE customers (customer_name VARCHAR)",
        "answer": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the detail of products whose detail contains the word \"Latte\" or the word \"Americano\"",
        "context": "CREATE TABLE products (product_details VARCHAR)",
        "answer": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the address content of the customer named \"Maudie Kertzmann\"?",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE addresses (address_content VARCHAR, address_id VARCHAR)",
        "answer": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "How many customers are living in city \"Lake Geovannyton\"?",
        "context": "CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE addresses (address_id VARCHAR, city VARCHAR); CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR)",
        "answer": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name of customers who are living in Colorado?",
        "context": "CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE addresses (address_id VARCHAR, state_province_county VARCHAR)",
        "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the list of cities that no customer is living in.",
        "context": "CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE addresses (city VARCHAR)",
        "answer": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which city has the most customers living in?",
        "context": "CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR)",
        "answer": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the city with post code 255.",
        "context": "CREATE TABLE addresses (city VARCHAR, zip_postcode VARCHAR)",
        "answer": "SELECT city FROM addresses WHERE zip_postcode  =  255",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the state and country of all cities with post code starting with 4.",
        "context": "CREATE TABLE addresses (state_province_county VARCHAR, country VARCHAR, zip_postcode VARCHAR)",
        "answer": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "List the countries having more than 4 addresses listed.",
        "context": "CREATE TABLE addresses (country VARCHAR, address_id VARCHAR)",
        "answer": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "List all the contact channel codes that were used less than 5 times.",
        "context": "CREATE TABLE customer_contact_channels (channel_code VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customer_contact_channels (customer_id VARCHAR)",
        "answer": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customer_contact_channels (active_to_date INTEGER, customer_id VARCHAR)",
        "answer": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the average time span of contact channels in the database?",
        "context": "CREATE TABLE customer_contact_channels (active_to_date VARCHAR, active_from_date VARCHAR)",
        "answer": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the channel code and contact number of the customer contact channel that was active for the longest time?",
        "context": "CREATE TABLE customer_contact_channels (channel_code VARCHAR, contact_number VARCHAR, active_to_date VARCHAR, active_from_date VARCHAR)",
        "answer": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name and active date of the customer that use email as the contact channel.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_contact_channels (active_from_date VARCHAR, customer_id VARCHAR, channel_code VARCHAR)",
        "answer": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the name of the customer that made the order with the largest quantity?",
        "context": "CREATE TABLE order_items (order_id VARCHAR, order_quantity INTEGER); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE order_items (order_quantity INTEGER); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)",
        "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the name of the customer that has purchased the most items?",
        "context": "CREATE TABLE order_items (order_id VARCHAR, order_quantity INTEGER); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)",
        "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the payment method of the customer that has purchased the least quantity of items?",
        "context": "CREATE TABLE order_items (order_id VARCHAR, order_quantity INTEGER); CREATE TABLE customers (payment_method VARCHAR, customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)",
        "answer": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "How many types of products have Rodrick Heaney bought in total?",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE order_items (product_id VARCHAR, order_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)",
        "answer": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the total quantity of products purchased by \"Rodrick Heaney\"?",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE order_items (order_quantity INTEGER, order_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)",
        "answer": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "How many customers have at least one order with status \"Cancelled\"?",
        "context": "CREATE TABLE customer_orders (customer_id VARCHAR, order_status VARCHAR)",
        "answer": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "How many orders have detail \"Second time\"?",
        "context": "CREATE TABLE customer_orders (order_details VARCHAR)",
        "answer": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the customer name and date of the orders that have the status \"Delivered\".",
        "context": "CREATE TABLE customer_orders (order_date VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the total number of products that are in orders with status \"Cancelled\"?",
        "context": "CREATE TABLE customer_orders (order_id VARCHAR, order_status VARCHAR); CREATE TABLE order_items (order_quantity INTEGER, order_id VARCHAR)",
        "answer": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the total amount of products ordered before 2018-03-17 07:13:53.",
        "context": "CREATE TABLE customer_orders (order_id VARCHAR, order_date INTEGER); CREATE TABLE order_items (order_quantity INTEGER, order_id VARCHAR)",
        "answer": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Who made the latest order?",
        "context": "CREATE TABLE customer_orders (customer_id VARCHAR, order_date VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which product has been ordered most number of times?",
        "context": "CREATE TABLE products (product_details VARCHAR, product_id VARCHAR); CREATE TABLE order_items (product_id VARCHAR)",
        "answer": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name and ID of the product whose total order quantity is the largest.",
        "context": "CREATE TABLE order_items (product_id VARCHAR, order_quantity INTEGER); CREATE TABLE products (product_details VARCHAR, product_id VARCHAR)",
        "answer": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "context": "CREATE TABLE addresses (address_content VARCHAR, city VARCHAR, state_province_county VARCHAR)",
        "answer": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name of customers who did not pay with Cash.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, payment_method VARCHAR)",
        "answer": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the names of customers who never ordered product Latte.",
        "context": "CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_details VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the names of customers who never placed an order.",
        "context": "CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR)",
        "answer": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the names of customers who ordered both products Latte and Americano.",
        "context": "CREATE TABLE products (product_id VARCHAR, product_details VARCHAR); CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)",
        "answer": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "db_id": "customers_and_addresses"
    },
    {
        "question": "List the age of all music artists.",
        "context": "CREATE TABLE artist (Age VARCHAR)",
        "answer": "SELECT Age FROM artist",
        "db_id": "music_4"
    },
    {
        "question": "What is the average age of all artists?",
        "context": "CREATE TABLE artist (Age INTEGER)",
        "answer": "SELECT avg(Age) FROM artist",
        "db_id": "music_4"
    },
    {
        "question": "What are the famous titles of the artist \"Triumfall\"?",
        "context": "CREATE TABLE artist (Famous_Title VARCHAR, Artist VARCHAR)",
        "answer": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "db_id": "music_4"
    },
    {
        "question": "What are the distinct Famous release dates?",
        "context": "CREATE TABLE artist (Famous_Release_date VARCHAR)",
        "answer": "SELECT distinct(Famous_Release_date) FROM artist",
        "db_id": "music_4"
    },
    {
        "question": "Return the dates of ceremony and the results of all music festivals",
        "context": "CREATE TABLE music_festival (Date_of_ceremony VARCHAR, RESULT VARCHAR)",
        "answer": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "db_id": "music_4"
    },
    {
        "question": "What are the category of music festivals with result \"Awarded\"?",
        "context": "CREATE TABLE music_festival (Category VARCHAR, RESULT VARCHAR)",
        "answer": "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"",
        "db_id": "music_4"
    },
    {
        "question": "What are the maximum and minimum week on top of all volumes?",
        "context": "CREATE TABLE volume (Weeks_on_Top INTEGER)",
        "answer": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume",
        "db_id": "music_4"
    },
    {
        "question": "What are the songs in volumes with more than 1 week on top?",
        "context": "CREATE TABLE volume (Song VARCHAR, Weeks_on_Top INTEGER)",
        "answer": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1",
        "db_id": "music_4"
    },
    {
        "question": "Please list all songs in volumes in ascending alphabetical order.",
        "context": "CREATE TABLE volume (Song VARCHAR)",
        "answer": "SELECT Song FROM volume ORDER BY Song",
        "db_id": "music_4"
    },
    {
        "question": "How many distinct artists do the volumes associate to?",
        "context": "CREATE TABLE volume (Artist_ID VARCHAR)",
        "answer": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "db_id": "music_4"
    },
    {
        "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
        "context": "CREATE TABLE music_festival (Date_of_ceremony VARCHAR, Volume VARCHAR); CREATE TABLE volume (Volume_ID VARCHAR, Weeks_on_Top INTEGER)",
        "answer": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2",
        "db_id": "music_4"
    },
    {
        "question": "Please show the songs that have result \"nominated\" at music festivals.",
        "context": "CREATE TABLE volume (Song VARCHAR, Volume_ID VARCHAR); CREATE TABLE music_festival (Volume VARCHAR, Result VARCHAR)",
        "answer": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"",
        "db_id": "music_4"
    },
    {
        "question": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?",
        "context": "CREATE TABLE artist (Artist_ID VARCHAR, Artist VARCHAR); CREATE TABLE volume (Issue_Date VARCHAR, Artist_ID VARCHAR)",
        "answer": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"",
        "db_id": "music_4"
    },
    {
        "question": "What are the songs in volumes associated with the artist aged 32 or older?",
        "context": "CREATE TABLE volume (Song VARCHAR, Artist_ID VARCHAR); CREATE TABLE artist (Artist_ID VARCHAR, age VARCHAR)",
        "answer": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32",
        "db_id": "music_4"
    },
    {
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "context": "CREATE TABLE volume (Weeks_on_Top INTEGER, Artist_ID VARCHAR); CREATE TABLE artist (Artist_ID VARCHAR, age VARCHAR)",
        "answer": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "db_id": "music_4"
    },
    {
        "question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
        "context": "CREATE TABLE artist (Famous_Title VARCHAR, Artist_ID VARCHAR); CREATE TABLE volume (Artist_ID VARCHAR, Weeks_on_Top INTEGER)",
        "answer": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2",
        "db_id": "music_4"
    },
    {
        "question": "Please list the age and famous title of artists in descending order of age.",
        "context": "CREATE TABLE artist (Famous_Title VARCHAR, Age VARCHAR)",
        "answer": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC",
        "db_id": "music_4"
    },
    {
        "question": "What is the famous release date of the artist with the oldest age?",
        "context": "CREATE TABLE artist (Famous_Release_date VARCHAR, Age VARCHAR)",
        "answer": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1",
        "db_id": "music_4"
    },
    {
        "question": "Please show the categories of the music festivals and the count.",
        "context": "CREATE TABLE music_festival (Category VARCHAR)",
        "answer": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category",
        "db_id": "music_4"
    },
    {
        "question": "What is the most common result of the music festival?",
        "context": "CREATE TABLE music_festival (RESULT VARCHAR)",
        "answer": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "music_4"
    },
    {
        "question": "Please show the categories of the music festivals with count more than 1.",
        "context": "CREATE TABLE music_festival (Category VARCHAR)",
        "answer": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1",
        "db_id": "music_4"
    },
    {
        "question": "What is the song in the volume with the maximum weeks on top?",
        "context": "CREATE TABLE volume (Song VARCHAR, Weeks_on_Top VARCHAR)",
        "answer": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
        "db_id": "music_4"
    },
    {
        "question": "Find the famous titles of artists that do not have any volume.",
        "context": "CREATE TABLE volume (Famous_Title VARCHAR, Artist_ID VARCHAR); CREATE TABLE artist (Famous_Title VARCHAR, Artist_ID VARCHAR)",
        "answer": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "db_id": "music_4"
    },
    {
        "question": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.",
        "context": "CREATE TABLE artist (Famous_Title VARCHAR, Artist_ID VARCHAR); CREATE TABLE volume (Artist_ID VARCHAR, Weeks_on_Top INTEGER)",
        "answer": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2",
        "db_id": "music_4"
    },
    {
        "question": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?",
        "context": "CREATE TABLE music_festival (Date_of_ceremony VARCHAR, Category VARCHAR, RESULT VARCHAR)",
        "answer": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
        "db_id": "music_4"
    },
    {
        "question": "What is the issue date of the volume with the minimum weeks on top?",
        "context": "CREATE TABLE volume (Issue_Date VARCHAR, Weeks_on_Top VARCHAR)",
        "answer": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
        "db_id": "music_4"
    },
    {
        "question": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",
        "context": "CREATE TABLE music_festival (RESULT VARCHAR)",
        "answer": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
        "db_id": "music_4"
    },
    {
        "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "context": "CREATE TABLE volume (Artist_ID VARCHAR); CREATE TABLE artist (Artist_ID VARCHAR, age VARCHAR)",
        "answer": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23",
        "db_id": "music_4"
    },
    {
        "question": "How many roller coasters are there?",
        "context": "CREATE TABLE roller_coaster (Id VARCHAR)",
        "answer": "SELECT count(*) FROM roller_coaster",
        "db_id": "roller_coaster"
    },
    {
        "question": "List the names of roller coasters by ascending order of length.",
        "context": "CREATE TABLE roller_coaster (Name VARCHAR, LENGTH VARCHAR)",
        "answer": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
        "db_id": "roller_coaster"
    },
    {
        "question": "What are the lengths and heights of roller coasters?",
        "context": "CREATE TABLE roller_coaster (LENGTH VARCHAR, Height VARCHAR)",
        "answer": "SELECT LENGTH ,  Height FROM roller_coaster",
        "db_id": "roller_coaster"
    },
    {
        "question": "List the names of countries whose language is not \"German\".",
        "context": "CREATE TABLE country (Name VARCHAR, Languages VARCHAR)",
        "answer": "SELECT Name FROM country WHERE Languages != \"German\"",
        "db_id": "roller_coaster"
    },
    {
        "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "context": "CREATE TABLE roller_coaster (Status VARCHAR, LENGTH VARCHAR, Height VARCHAR)",
        "answer": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100",
        "db_id": "roller_coaster"
    },
    {
        "question": "What are the speeds of the longest roller coaster?",
        "context": "CREATE TABLE roller_coaster (Speed VARCHAR, LENGTH VARCHAR)",
        "answer": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "db_id": "roller_coaster"
    },
    {
        "question": "What is the average speed of roller coasters?",
        "context": "CREATE TABLE roller_coaster (Speed INTEGER)",
        "answer": "SELECT avg(Speed) FROM roller_coaster",
        "db_id": "roller_coaster"
    },
    {
        "question": "Show the different statuses and the numbers of roller coasters for each status.",
        "context": "CREATE TABLE roller_coaster (Status VARCHAR)",
        "answer": "SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status",
        "db_id": "roller_coaster"
    },
    {
        "question": "Please show the most common status of roller coasters.",
        "context": "CREATE TABLE roller_coaster (Status VARCHAR)",
        "answer": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "roller_coaster"
    },
    {
        "question": "List the status shared by more than two roller coaster.",
        "context": "CREATE TABLE roller_coaster (Status VARCHAR)",
        "answer": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2",
        "db_id": "roller_coaster"
    },
    {
        "question": "Show the park of the roller coaster with the highest speed.",
        "context": "CREATE TABLE roller_coaster (Park VARCHAR, Speed VARCHAR)",
        "answer": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1",
        "db_id": "roller_coaster"
    },
    {
        "question": "Show the names of roller coasters and names of country they are in.",
        "context": "CREATE TABLE country (Name VARCHAR, Country_ID VARCHAR); CREATE TABLE roller_coaster (Name VARCHAR, Country_ID VARCHAR)",
        "answer": "SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID",
        "db_id": "roller_coaster"
    },
    {
        "question": "Show the names of countries that have more than one roller coaster.",
        "context": "CREATE TABLE roller_coaster (Country_ID VARCHAR); CREATE TABLE country (Name VARCHAR, Country_ID VARCHAR)",
        "answer": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "db_id": "roller_coaster"
    },
    {
        "question": "Show the name and population of the country that has the highest roller coaster.",
        "context": "CREATE TABLE roller_coaster (Country_ID VARCHAR, Height VARCHAR); CREATE TABLE country (Name VARCHAR, population VARCHAR, Country_ID VARCHAR)",
        "answer": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1",
        "db_id": "roller_coaster"
    },
    {
        "question": "Show the names of countries and the average speed of roller coasters from each country.",
        "context": "CREATE TABLE roller_coaster (Speed INTEGER, Country_ID VARCHAR); CREATE TABLE country (Name VARCHAR, Country_ID VARCHAR)",
        "answer": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name",
        "db_id": "roller_coaster"
    },
    {
        "question": "How many countries do not have an roller coaster longer than 3000?",
        "context": "CREATE TABLE country (country_id VARCHAR, LENGTH INTEGER); CREATE TABLE roller_coaster (country_id VARCHAR, LENGTH INTEGER)",
        "answer": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )",
        "db_id": "roller_coaster"
    },
    {
        "question": "What are the country names, area and population which has both roller coasters with speed higher",
        "context": "CREATE TABLE country (name VARCHAR, area VARCHAR, population VARCHAR, Country_ID VARCHAR); CREATE TABLE roller_coaster (Country_ID VARCHAR, speed INTEGER)",
        "answer": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55",
        "db_id": "roller_coaster"
    },
    {
        "question": "How many different captain ranks are there?",
        "context": "CREATE TABLE captain (rank VARCHAR)",
        "answer": "SELECT count(DISTINCT rank) FROM captain",
        "db_id": "ship_1"
    },
    {
        "question": "How many captains are in each rank?",
        "context": "CREATE TABLE captain (rank VARCHAR)",
        "answer": "SELECT count(*) ,  rank FROM captain GROUP BY rank",
        "db_id": "ship_1"
    },
    {
        "question": "How many captains with younger than 50 are in each rank?",
        "context": "CREATE TABLE captain (rank VARCHAR, age INTEGER)",
        "answer": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank",
        "db_id": "ship_1"
    },
    {
        "question": "Sort all captain names by their ages from old to young.",
        "context": "CREATE TABLE captain (name VARCHAR, age VARCHAR)",
        "answer": "SELECT name FROM captain ORDER BY age DESC",
        "db_id": "ship_1"
    },
    {
        "question": "Find the name, class and rank of all captains.",
        "context": "CREATE TABLE captain (name VARCHAR, CLASS VARCHAR, rank VARCHAR)",
        "answer": "SELECT name ,  CLASS ,  rank FROM captain",
        "db_id": "ship_1"
    },
    {
        "question": "Which rank is the most common among captains?",
        "context": "CREATE TABLE captain (rank VARCHAR)",
        "answer": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
        "db_id": "ship_1"
    },
    {
        "question": "Which classes have more than two captains?",
        "context": "CREATE TABLE captain (CLASS VARCHAR)",
        "answer": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2",
        "db_id": "ship_1"
    },
    {
        "question": "Find the name of captains whose rank are either Midshipman or Lieutenant.",
        "context": "CREATE TABLE captain (name VARCHAR, rank VARCHAR)",
        "answer": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'",
        "db_id": "ship_1"
    },
    {
        "question": "What are the average and minimum age of captains in different class?",
        "context": "CREATE TABLE captain (CLASS VARCHAR, age INTEGER)",
        "answer": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS",
        "db_id": "ship_1"
    },
    {
        "question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.",
        "context": "CREATE TABLE captain (rank VARCHAR, CLASS VARCHAR)",
        "answer": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'",
        "db_id": "ship_1"
    },
    {
        "question": "Find the captain rank that has no captain in Third-rate ship of the line class.",
        "context": "CREATE TABLE captain (rank VARCHAR, CLASS VARCHAR)",
        "answer": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'",
        "db_id": "ship_1"
    },
    {
        "question": "What is the name of the youngest captain?",
        "context": "CREATE TABLE captain (name VARCHAR, age VARCHAR)",
        "answer": "SELECT name FROM captain ORDER BY age LIMIT 1",
        "db_id": "ship_1"
    },
    {
        "question": "Find the name, type, and flag of the ship that is built in the most recent year.",
        "context": "CREATE TABLE ship (name VARCHAR, TYPE VARCHAR, flag VARCHAR, built_year VARCHAR)",
        "answer": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1",
        "db_id": "ship_1"
    },
    {
        "question": "Group by ships by flag, and return number of ships that have each flag.",
        "context": "CREATE TABLE ship (flag VARCHAR)",
        "answer": "SELECT count(*) ,  flag FROM ship GROUP BY flag",
        "db_id": "ship_1"
    },
    {
        "question": "Which flag is most widely used among all ships?",
        "context": "CREATE TABLE ship (flag VARCHAR)",
        "answer": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
        "db_id": "ship_1"
    },
    {
        "question": "List all ship names in the order of built year and class.",
        "context": "CREATE TABLE ship (name VARCHAR, built_year VARCHAR, CLASS VARCHAR)",
        "answer": "SELECT name FROM ship ORDER BY built_year ,  CLASS",
        "db_id": "ship_1"
    },
    {
        "question": "Find the ship type that are used by both ships with Panama and Malta flags.",
        "context": "CREATE TABLE ship (TYPE VARCHAR, flag VARCHAR)",
        "answer": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'",
        "db_id": "ship_1"
    },
    {
        "question": "In which year were most of ships built?",
        "context": "CREATE TABLE ship (built_year VARCHAR)",
        "answer": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1",
        "db_id": "ship_1"
    },
    {
        "question": "Find the name of the ships that have more than one captain.",
        "context": "CREATE TABLE captain (ship_id VARCHAR); CREATE TABLE ship (name VARCHAR, ship_id VARCHAR)",
        "answer": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1",
        "db_id": "ship_1"
    },
    {
        "question": "what are the names and classes of the ships that do not have any captain yet?",
        "context": "CREATE TABLE ship (name VARCHAR, CLASS VARCHAR, ship_id VARCHAR); CREATE TABLE captain (name VARCHAR, CLASS VARCHAR, ship_id VARCHAR)",
        "answer": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
        "db_id": "ship_1"
    },
    {
        "question": "Find the name of the ship that is steered by the youngest captain.",
        "context": "CREATE TABLE ship (name VARCHAR, ship_id VARCHAR); CREATE TABLE captain (ship_id VARCHAR, age VARCHAR)",
        "answer": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
        "db_id": "ship_1"
    },
    {
        "question": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.",
        "context": "CREATE TABLE captain (name VARCHAR, flag VARCHAR, ship_id VARCHAR, rank VARCHAR); CREATE TABLE ship (name VARCHAR, flag VARCHAR, ship_id VARCHAR, rank VARCHAR)",
        "answer": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",
        "db_id": "ship_1"
    },
    {
        "question": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.",
        "context": "CREATE TABLE ship (name VARCHAR, ship_id VARCHAR); CREATE TABLE captain (ship_id VARCHAR, rank VARCHAR)",
        "answer": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'",
        "db_id": "ship_1"
    },
    {
        "question": "What is id of the city that hosted events in the most recent year?",
        "context": "CREATE TABLE hosting_city (host_city VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "db_id": "city_record"
    },
    {
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "context": "CREATE TABLE MATCH (match_id VARCHAR, competition VARCHAR)",
        "answer": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "db_id": "city_record"
    },
    {
        "question": "Find the cities which were once a host city after 2010?",
        "context": "CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE hosting_city (host_city VARCHAR, year INTEGER)",
        "answer": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010",
        "db_id": "city_record"
    },
    {
        "question": "Which city has hosted the most events?",
        "context": "CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE hosting_city (host_city VARCHAR)",
        "answer": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "db_id": "city_record"
    },
    {
        "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "context": "CREATE TABLE city (city_id VARCHAR, city VARCHAR); CREATE TABLE MATCH (venue VARCHAR, match_id VARCHAR, competition VARCHAR); CREATE TABLE hosting_city (host_city VARCHAR, match_id VARCHAR)",
        "answer": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "db_id": "city_record"
    },
    {
        "question": "Give me the temperature of Shanghai in January.",
        "context": "CREATE TABLE city (city_id VARCHAR, city VARCHAR); CREATE TABLE temperature (Jan VARCHAR, city_id VARCHAR)",
        "answer": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
        "db_id": "city_record"
    },
    {
        "question": "What is the host year of city \"Taizhou ( Zhejiang )\"?",
        "context": "CREATE TABLE city (city_id VARCHAR, city VARCHAR); CREATE TABLE hosting_city (year VARCHAR, host_city VARCHAR)",
        "answer": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\"",
        "db_id": "city_record"
    },
    {
        "question": "Which three cities have the largest regional population?",
        "context": "CREATE TABLE city (city VARCHAR, regional_population VARCHAR)",
        "answer": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
        "db_id": "city_record"
    },
    {
        "question": "Which city has the lowest GDP? Please list the city name and its GDP.",
        "context": "CREATE TABLE city (city VARCHAR, GDP VARCHAR)",
        "answer": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "db_id": "city_record"
    },
    {
        "question": "Which city has the highest temperature in February?",
        "context": "CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE temperature (city_id VARCHAR, Feb VARCHAR)",
        "answer": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "db_id": "city_record"
    },
    {
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "context": "CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE temperature (city_id VARCHAR, Mar VARCHAR, Jul VARCHAR, Oct VARCHAR)",
        "answer": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "db_id": "city_record"
    },
    {
        "question": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?",
        "context": "CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE hosting_city (host_city VARCHAR); CREATE TABLE temperature (city_id VARCHAR, Mar INTEGER, Jul VARCHAR)",
        "answer": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "db_id": "city_record"
    },
    {
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "context": "CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE hosting_city (host_city VARCHAR); CREATE TABLE temperature (city_id VARCHAR, Mar INTEGER, Dec VARCHAR)",
        "answer": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "db_id": "city_record"
    },
    {
        "question": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?",
        "context": "CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE hosting_city (host_city VARCHAR); CREATE TABLE temperature (city_id VARCHAR, Feb INTEGER, Jun VARCHAR)",
        "answer": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "db_id": "city_record"
    },
    {
        "question": "Please give me a list of cities whose regional population is over 10000000.",
        "context": "CREATE TABLE city (city VARCHAR, regional_population INTEGER)",
        "answer": "SELECT city FROM city WHERE regional_population  >  10000000",
        "db_id": "city_record"
    },
    {
        "question": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
        "context": "CREATE TABLE city (city VARCHAR, regional_population INTEGER)",
        "answer": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "db_id": "city_record"
    },
    {
        "question": "Find the number of matches in different competitions.",
        "context": "CREATE TABLE MATCH (Competition VARCHAR)",
        "answer": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition",
        "db_id": "city_record"
    },
    {
        "question": "List venues of all matches in the order of their dates starting from the most recent one.",
        "context": "CREATE TABLE MATCH (venue VARCHAR, date VARCHAR)",
        "answer": "SELECT venue FROM MATCH ORDER BY date DESC",
        "db_id": "city_record"
    },
    {
        "question": "what is the GDP of the city with the largest population.",
        "context": "CREATE TABLE city (gdp VARCHAR, Regional_Population VARCHAR)",
        "answer": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "db_id": "city_record"
    },
    {
        "question": "What are the GDP and population of the city that already served as a host more than once?",
        "context": "CREATE TABLE hosting_city (host_city VARCHAR); CREATE TABLE city (city_id VARCHAR)",
        "answer": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
        "db_id": "city_record"
    },
    {
        "question": "List every individual's first name, middle name and last name in alphabetical order by last name.",
        "context": "CREATE TABLE individuals (individual_first_name VARCHAR, individual_middle_name VARCHAR, individual_last_name VARCHAR)",
        "answer": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name",
        "db_id": "e_government"
    },
    {
        "question": "List all the types of forms.",
        "context": "CREATE TABLE forms (form_type_code VARCHAR)",
        "answer": "SELECT DISTINCT form_type_code FROM forms",
        "db_id": "e_government"
    },
    {
        "question": "Find the name of the most popular party form.",
        "context": "CREATE TABLE party_forms (form_id VARCHAR); CREATE TABLE forms (form_name VARCHAR, form_id VARCHAR)",
        "answer": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "e_government"
    },
    {
        "question": "Find the payment method and phone of the party with email \"enrico09@example.com\".",
        "context": "CREATE TABLE parties (payment_method_code VARCHAR, party_phone VARCHAR, party_email VARCHAR)",
        "answer": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"",
        "db_id": "e_government"
    },
    {
        "question": "Find the emails of parties with the most popular party form.",
        "context": "CREATE TABLE party_forms (form_id VARCHAR); CREATE TABLE parties (party_email VARCHAR, party_id VARCHAR); CREATE TABLE party_forms (party_id VARCHAR, form_id VARCHAR)",
        "answer": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "db_id": "e_government"
    },
    {
        "question": "List all the name of organizations in order of the date formed.",
        "context": "CREATE TABLE organizations (organization_name VARCHAR, date_formed VARCHAR)",
        "answer": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
        "db_id": "e_government"
    },
    {
        "question": "Find the name of the youngest organization.",
        "context": "CREATE TABLE organizations (organization_name VARCHAR, date_formed VARCHAR)",
        "answer": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "db_id": "e_government"
    },
    {
        "question": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "context": "CREATE TABLE organizations (organization_id VARCHAR, organization_name VARCHAR); CREATE TABLE individuals (individual_last_name VARCHAR, individual_id VARCHAR); CREATE TABLE organization_contact_individuals (organization_id VARCHAR, individual_id VARCHAR, date_contact_to VARCHAR)",
        "answer": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "db_id": "e_government"
    },
    {
        "question": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.",
        "context": "CREATE TABLE organizations (uk_vat_number INTEGER); CREATE TABLE individuals (individual_last_name VARCHAR, individual_id VARCHAR); CREATE TABLE organizations (organization_id VARCHAR, uk_vat_number INTEGER); CREATE TABLE organization_contact_individuals (organization_id VARCHAR, individual_id VARCHAR, date_contact_to VARCHAR)",
        "answer": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
        "db_id": "e_government"
    },
    {
        "question": "Find name of the services that has never been used.",
        "context": "CREATE TABLE services (service_name VARCHAR); CREATE TABLE party_services (service_id VARCHAR); CREATE TABLE services (service_name VARCHAR, service_id VARCHAR)",
        "answer": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "db_id": "e_government"
    },
    {
        "question": "Find the name of all the cities and states.",
        "context": "CREATE TABLE addresses (town_city VARCHAR, state_province_county VARCHAR)",
        "answer": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "db_id": "e_government"
    },
    {
        "question": "How many cities are there in state \"Colorado\"?",
        "context": "CREATE TABLE addresses (state_province_county VARCHAR)",
        "answer": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\"",
        "db_id": "e_government"
    },
    {
        "question": "Find the payment method code used by more than 3 parties.",
        "context": "CREATE TABLE parties (payment_method_code VARCHAR)",
        "answer": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3",
        "db_id": "e_government"
    },
    {
        "question": "Find the name of organizations whose names contain \"Party\".",
        "context": "CREATE TABLE organizations (organization_name VARCHAR)",
        "answer": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
        "db_id": "e_government"
    },
    {
        "question": "How many distinct payment methods are used by parties?",
        "context": "CREATE TABLE parties (payment_method_code VARCHAR)",
        "answer": "SELECT count(DISTINCT payment_method_code) FROM parties",
        "db_id": "e_government"
    },
    {
        "question": "Which is the email of the party that has used the services the most number of times?",
        "context": "CREATE TABLE parties (party_email VARCHAR, party_id VARCHAR); CREATE TABLE party_services (customer_id VARCHAR)",
        "answer": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "db_id": "e_government"
    },
    {
        "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "context": "CREATE TABLE addresses (state_province_county VARCHAR, line_1_number_building VARCHAR)",
        "answer": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "db_id": "e_government"
    },
    {
        "question": "What is the name of organization that has the greatest number of contact individuals?",
        "context": "CREATE TABLE organization_contact_individuals (organization_id VARCHAR); CREATE TABLE organizations (organization_name VARCHAR, organization_id VARCHAR)",
        "answer": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "e_government"
    },
    {
        "question": "Find the last name of the individuals that have been contact individuals of an organization.",
        "context": "CREATE TABLE individuals (individual_last_name VARCHAR, individual_id VARCHAR); CREATE TABLE organization_contact_individuals (individual_id VARCHAR)",
        "answer": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "db_id": "e_government"
    },
    {
        "question": "How many drivers are there?",
        "context": "CREATE TABLE driver (Id VARCHAR)",
        "answer": "SELECT count(*) FROM driver",
        "db_id": "school_bus"
    },
    {
        "question": "Show the name, home city, and age for all drivers.",
        "context": "CREATE TABLE driver (name VARCHAR, home_city VARCHAR, age VARCHAR)",
        "answer": "SELECT name ,  home_city ,  age FROM driver",
        "db_id": "school_bus"
    },
    {
        "question": "Show the party and the number of drivers in each party.",
        "context": "CREATE TABLE driver (party VARCHAR)",
        "answer": "SELECT party ,  count(*) FROM driver GROUP BY party",
        "db_id": "school_bus"
    },
    {
        "question": "Show the name of drivers in descending order of age.",
        "context": "CREATE TABLE driver (name VARCHAR, age VARCHAR)",
        "answer": "SELECT name FROM driver ORDER BY age DESC",
        "db_id": "school_bus"
    },
    {
        "question": "Show all different home cities.",
        "context": "CREATE TABLE driver (home_city VARCHAR)",
        "answer": "SELECT DISTINCT home_city FROM driver",
        "db_id": "school_bus"
    },
    {
        "question": "Show the home city with the most number of drivers.",
        "context": "CREATE TABLE driver (home_city VARCHAR)",
        "answer": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1",
        "db_id": "school_bus"
    },
    {
        "question": "Show the party with drivers from Hartford and drivers older than 40.",
        "context": "CREATE TABLE driver (party VARCHAR, home_city VARCHAR, age VARCHAR)",
        "answer": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40",
        "db_id": "school_bus"
    },
    {
        "question": "Show home city where at least two drivers older than 40 are from.",
        "context": "CREATE TABLE driver (home_city VARCHAR, age INTEGER)",
        "answer": "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2",
        "db_id": "school_bus"
    },
    {
        "question": "Show all home cities except for those having a driver older than 40.",
        "context": "CREATE TABLE driver (home_city VARCHAR, age INTEGER)",
        "answer": "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40",
        "db_id": "school_bus"
    },
    {
        "question": "Show the names of the drivers without a school bus.",
        "context": "CREATE TABLE school_bus (name VARCHAR, driver_id VARCHAR); CREATE TABLE driver (name VARCHAR, driver_id VARCHAR)",
        "answer": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)",
        "db_id": "school_bus"
    },
    {
        "question": "Show the types of schools that have two schools.",
        "context": "CREATE TABLE school (TYPE VARCHAR)",
        "answer": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2",
        "db_id": "school_bus"
    },
    {
        "question": "Show the school name and driver name for all school buses.",
        "context": "CREATE TABLE school (school VARCHAR, school_id VARCHAR); CREATE TABLE school_bus (school_id VARCHAR, driver_id VARCHAR); CREATE TABLE driver (name VARCHAR, driver_id VARCHAR)",
        "answer": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id",
        "db_id": "school_bus"
    },
    {
        "question": "What is the maximum, minimum and average years spent working on a school bus?",
        "context": "CREATE TABLE school_bus (years_working INTEGER)",
        "answer": "SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus",
        "db_id": "school_bus"
    },
    {
        "question": "Show the school name and type for schools without a school bus.",
        "context": "CREATE TABLE school_bus (school VARCHAR, TYPE VARCHAR, school_id VARCHAR); CREATE TABLE school (school VARCHAR, TYPE VARCHAR, school_id VARCHAR)",
        "answer": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)",
        "db_id": "school_bus"
    },
    {
        "question": "Show the type of school and the number of buses for each type.",
        "context": "CREATE TABLE school (type VARCHAR, school_id VARCHAR); CREATE TABLE school_bus (school_id VARCHAR)",
        "answer": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type",
        "db_id": "school_bus"
    },
    {
        "question": "How many drivers are from Hartford city or younger than 40?",
        "context": "CREATE TABLE driver (home_city VARCHAR, age VARCHAR)",
        "answer": "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40",
        "db_id": "school_bus"
    },
    {
        "question": "List names for drivers from Hartford city and younger than 40.",
        "context": "CREATE TABLE driver (name VARCHAR, home_city VARCHAR, age VARCHAR)",
        "answer": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40",
        "db_id": "school_bus"
    },
    {
        "question": "find the name of driver who is driving the school bus with the longest working history.",
        "context": "CREATE TABLE school_bus (driver_id VARCHAR); CREATE TABLE driver (name VARCHAR, driver_id VARCHAR)",
        "answer": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1",
        "db_id": "school_bus"
    },
    {
        "question": "How many flights have a velocity larger than 200?",
        "context": "CREATE TABLE flight (velocity INTEGER)",
        "answer": "SELECT count(*) FROM flight WHERE velocity  >  200",
        "db_id": "flight_company"
    },
    {
        "question": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude.",
        "context": "CREATE TABLE flight (vehicle_flight_number VARCHAR, date VARCHAR, pilot VARCHAR, altitude VARCHAR)",
        "answer": "SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC",
        "db_id": "flight_company"
    },
    {
        "question": "List the id, country, city and name of the airports ordered alphabetically by the name.",
        "context": "CREATE TABLE airport (id VARCHAR, country VARCHAR, city VARCHAR, name VARCHAR)",
        "answer": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name",
        "db_id": "flight_company"
    },
    {
        "question": "What is maximum group equity shareholding of the companies?",
        "context": "CREATE TABLE operate_company (group_equity_shareholding INTEGER)",
        "answer": "SELECT max(group_equity_shareholding) FROM operate_company",
        "db_id": "flight_company"
    },
    {
        "question": "What is the velocity of the pilot named 'Thompson'?",
        "context": "CREATE TABLE flight (velocity INTEGER, pilot VARCHAR)",
        "answer": "SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'",
        "db_id": "flight_company"
    },
    {
        "question": "What are the names and types of the companies that have ever operated a flight?",
        "context": "CREATE TABLE operate_company (name VARCHAR, type VARCHAR, id VARCHAR); CREATE TABLE flight (Id VARCHAR)",
        "answer": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id",
        "db_id": "flight_company"
    },
    {
        "question": "What are the names of the airports which are not in the country 'Iceland'?",
        "context": "CREATE TABLE airport (name VARCHAR, country VARCHAR)",
        "answer": "SELECT name FROM airport WHERE country != 'Iceland'",
        "db_id": "flight_company"
    },
    {
        "question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
        "context": "CREATE TABLE flight (Id VARCHAR); CREATE TABLE operate_company (type VARCHAR, id VARCHAR)",
        "answer": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200",
        "db_id": "flight_company"
    },
    {
        "question": "What are the ids and names of the companies that operated more than one flight?",
        "context": "CREATE TABLE flight (Id VARCHAR); CREATE TABLE operate_company (id VARCHAR, name VARCHAR)",
        "answer": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1",
        "db_id": "flight_company"
    },
    {
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "context": "CREATE TABLE airport (id VARCHAR, name VARCHAR, IATA VARCHAR); CREATE TABLE flight (id VARCHAR, airport_id VARCHAR)",
        "answer": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_company"
    },
    {
        "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "context": "CREATE TABLE airport (id VARCHAR, country VARCHAR, name VARCHAR); CREATE TABLE flight (pilot VARCHAR, airport_id VARCHAR)",
        "answer": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'",
        "db_id": "flight_company"
    },
    {
        "question": "What is the most common company type, and how many are there?",
        "context": "CREATE TABLE operate_company (TYPE VARCHAR)",
        "answer": "SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_company"
    },
    {
        "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "context": "CREATE TABLE airport (id VARCHAR, airport_id VARCHAR, pilot VARCHAR); CREATE TABLE flight (id VARCHAR, airport_id VARCHAR, pilot VARCHAR)",
        "answer": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );",
        "db_id": "flight_company"
    },
    {
        "question": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.",
        "context": "CREATE TABLE operate_company (id VARCHAR, principal_activities VARCHAR); CREATE TABLE flight (Id VARCHAR)",
        "answer": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'",
        "db_id": "flight_company"
    },
    {
        "question": "Which of the airport names contains the word 'international'?",
        "context": "CREATE TABLE airport (name VARCHAR)",
        "answer": "SELECT name FROM airport WHERE name LIKE '%international%'",
        "db_id": "flight_company"
    },
    {
        "question": "How many companies operates airlines in each airport?",
        "context": "CREATE TABLE airport (id VARCHAR); CREATE TABLE flight (Id VARCHAR); CREATE TABLE operate_company (id VARCHAR)",
        "answer": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",
        "db_id": "flight_company"
    },
    {
        "question": "how many airports are there in each country?",
        "context": "CREATE TABLE airport (country VARCHAR)",
        "answer": "SELECT count(*) ,  country FROM airport GROUP BY country",
        "db_id": "flight_company"
    },
    {
        "question": "which countries have more than 2 airports?",
        "context": "CREATE TABLE airport (country VARCHAR)",
        "answer": "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2",
        "db_id": "flight_company"
    },
    {
        "question": "which pilot is in charge of the most number of flights?",
        "context": "CREATE TABLE flight (pilot VARCHAR)",
        "answer": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_company"
    },
    {
        "question": "Show all account ids and account details.",
        "context": "CREATE TABLE Accounts (account_id VARCHAR, account_details VARCHAR)",
        "answer": "SELECT account_id ,  account_details FROM Accounts",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "How many statements do we have?",
        "context": "CREATE TABLE Statements (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Statements",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "List all statement ids and statement details.",
        "context": "CREATE TABLE Statements (STATEMENT_ID VARCHAR, statement_details VARCHAR)",
        "answer": "SELECT STATEMENT_ID ,  statement_details FROM Statements",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show statement id, statement detail, account detail for accounts.",
        "context": "CREATE TABLE Accounts (statement_id VARCHAR, account_details VARCHAR); CREATE TABLE Statements (statement_details VARCHAR, statement_id VARCHAR)",
        "answer": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show all statement id and the number of accounts for each statement.",
        "context": "CREATE TABLE Accounts (STATEMENT_ID VARCHAR)",
        "answer": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "context": "CREATE TABLE Accounts (statement_id VARCHAR); CREATE TABLE Statements (statement_details VARCHAR, statement_id VARCHAR)",
        "answer": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show the number of documents.",
        "context": "CREATE TABLE Documents (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Documents",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
        "context": "CREATE TABLE Documents (document_type_code VARCHAR, document_name VARCHAR, document_description VARCHAR)",
        "answer": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show the ids and names of all documents.",
        "context": "CREATE TABLE Documents (document_id VARCHAR, document_name VARCHAR)",
        "answer": "SELECT document_id ,  document_name FROM Documents",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Find names and ids of all documents with document type code BK.",
        "context": "CREATE TABLE Documents (document_name VARCHAR, document_id VARCHAR, document_type_code VARCHAR)",
        "answer": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "How many documents are with document type code BK for each product id?",
        "context": "CREATE TABLE Documents (project_id VARCHAR, document_type_code VARCHAR)",
        "answer": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
        "context": "CREATE TABLE Documents (project_id VARCHAR); CREATE TABLE projects (project_id VARCHAR, project_details VARCHAR)",
        "answer": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show project ids and the number of documents in each project.",
        "context": "CREATE TABLE Documents (project_id VARCHAR)",
        "answer": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What is the id of the project with least number of documents?",
        "context": "CREATE TABLE Documents (project_id VARCHAR)",
        "answer": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show the ids for projects with at least 2 documents.",
        "context": "CREATE TABLE Documents (project_id VARCHAR)",
        "answer": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "List document type codes and the number of documents in each code.",
        "context": "CREATE TABLE Documents (document_type_code VARCHAR)",
        "answer": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What is the document type code with most number of documents?",
        "context": "CREATE TABLE Documents (document_type_code VARCHAR)",
        "answer": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show the document type code with fewer than 3 documents.",
        "context": "CREATE TABLE Documents (document_type_code VARCHAR)",
        "answer": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "context": "CREATE TABLE Statements (statement_details VARCHAR, statement_id VARCHAR); CREATE TABLE Documents (document_name VARCHAR, document_id VARCHAR)",
        "answer": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show all document type codes, document type names, document type descriptions.",
        "context": "CREATE TABLE Ref_document_types (document_type_code VARCHAR, document_type_name VARCHAR, document_type_description VARCHAR)",
        "answer": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What is the document type description for document type named Film?",
        "context": "CREATE TABLE Ref_document_types (document_type_description VARCHAR, document_type_name VARCHAR)",
        "answer": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What is the document type name and the document type description and creation date for all the documents?",
        "context": "CREATE TABLE Ref_document_types (document_type_name VARCHAR, document_type_description VARCHAR, document_type_code VARCHAR); CREATE TABLE Documents (Document_date VARCHAR, document_type_code VARCHAR)",
        "answer": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show the number of projects.",
        "context": "CREATE TABLE Projects (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Projects",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "List ids and details for all projects.",
        "context": "CREATE TABLE Projects (project_id VARCHAR, project_details VARCHAR)",
        "answer": "SELECT project_id ,  project_details FROM Projects",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What is the project id and detail for the project with at least two documents?",
        "context": "CREATE TABLE Projects (project_id VARCHAR, project_details VARCHAR); CREATE TABLE Documents (project_id VARCHAR)",
        "answer": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What is the project detail for the project with document \"King Book\"?",
        "context": "CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR); CREATE TABLE Documents (project_id VARCHAR, document_name VARCHAR)",
        "answer": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "How many budget types do we have?",
        "context": "CREATE TABLE Ref_budget_codes (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Ref_budget_codes",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "List all budget type codes and descriptions.",
        "context": "CREATE TABLE Ref_budget_codes (budget_type_code VARCHAR, budget_type_description VARCHAR)",
        "answer": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What is the description for the budget type with code ORG?",
        "context": "CREATE TABLE Ref_budget_codes (budget_type_description VARCHAR, budget_type_code VARCHAR)",
        "answer": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "How many documents have expenses?",
        "context": "CREATE TABLE Documents_with_expenses (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Documents_with_expenses",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What are the document ids for the budget type code 'SF'?",
        "context": "CREATE TABLE Documents_with_expenses (document_id VARCHAR, budget_type_code VARCHAR)",
        "answer": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show the budget type code and description and the corresponding document id.",
        "context": "CREATE TABLE Ref_budget_codes (budget_type_code VARCHAR, budget_type_description VARCHAR); CREATE TABLE Documents_with_expenses (document_id VARCHAR, budget_type_code VARCHAR)",
        "answer": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show ids for all documents with budget types described as 'Government'.",
        "context": "CREATE TABLE Documents_with_expenses (document_id VARCHAR, Budget_Type_code VARCHAR); CREATE TABLE Ref_Budget_Codes (Budget_Type_code VARCHAR, budget_type_Description VARCHAR)",
        "answer": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show budget type codes and the number of documents in each budget type.",
        "context": "CREATE TABLE Documents_with_expenses (budget_type_code VARCHAR)",
        "answer": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What is the budget type code with most number of documents.",
        "context": "CREATE TABLE Documents_with_expenses (budget_type_code VARCHAR)",
        "answer": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What are the ids of documents which don't have expense budgets?",
        "context": "CREATE TABLE Documents (document_id VARCHAR); CREATE TABLE Documents_with_expenses (document_id VARCHAR)",
        "answer": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Show ids for all documents in type CV without expense budgets.",
        "context": "CREATE TABLE Documents_with_expenses (document_id VARCHAR, document_type_code VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_type_code VARCHAR)",
        "answer": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What are the ids of documents with letter 's' in the name with any expense budgets.",
        "context": "CREATE TABLE Documents_with_expenses (document_id VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_name VARCHAR)",
        "answer": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "How many documents do not have any expense?",
        "context": "CREATE TABLE Documents (document_id VARCHAR); CREATE TABLE Documents_with_expenses (document_id VARCHAR)",
        "answer": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?",
        "context": "CREATE TABLE Documents_with_Expenses (document_id VARCHAR, budget_type_code VARCHAR); CREATE TABLE Documents (document_date VARCHAR, document_id VARCHAR)",
        "answer": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "What are the account details with the largest value or with value having char '5' in it?",
        "context": "CREATE TABLE Accounts (Account_details INTEGER)",
        "answer": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "db_id": "cre_Docs_and_Epenses"
    },
    {
        "question": "Find the total number of scientists.",
        "context": "CREATE TABLE scientists (Id VARCHAR)",
        "answer": "SELECT count(*) FROM scientists",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the total hours of all projects.",
        "context": "CREATE TABLE projects (hours INTEGER)",
        "answer": "SELECT sum(hours) FROM projects",
        "db_id": "scientist_1"
    },
    {
        "question": "How many different scientists are assigned to any project?",
        "context": "CREATE TABLE assignedto (scientist VARCHAR)",
        "answer": "SELECT count(DISTINCT scientist) FROM assignedto",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the number of distinct projects.",
        "context": "CREATE TABLE projects (name VARCHAR)",
        "answer": "SELECT count(DISTINCT name) FROM projects",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the average hours of all projects.",
        "context": "CREATE TABLE projects (hours INTEGER)",
        "answer": "SELECT avg(hours) FROM projects",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the name of project that continues for the longest time.",
        "context": "CREATE TABLE projects (name VARCHAR, hours VARCHAR)",
        "answer": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
        "db_id": "scientist_1"
    },
    {
        "question": "List the name of all projects that are operated longer than the average working hours of all projects.",
        "context": "CREATE TABLE projects (name VARCHAR, hours INTEGER)",
        "answer": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the name and hours of project that has the most number of scientists.",
        "context": "CREATE TABLE assignedto (project VARCHAR); CREATE TABLE projects (name VARCHAR, hours VARCHAR, code VARCHAR)",
        "answer": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.",
        "context": "CREATE TABLE scientists (SSN VARCHAR, name VARCHAR); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR); CREATE TABLE projects (name VARCHAR, code VARCHAR)",
        "answer": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.",
        "context": "CREATE TABLE scientists (SSN VARCHAR, name VARCHAR); CREATE TABLE projects (hours INTEGER, code VARCHAR); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR)",
        "answer": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the name of projects that require between 100 and 300 hours of work.",
        "context": "CREATE TABLE projects (name VARCHAR, hours INTEGER)",
        "answer": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.",
        "context": "CREATE TABLE projects (code VARCHAR, name VARCHAR); CREATE TABLE scientists (name VARCHAR, SSN VARCHAR); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR)",
        "answer": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'",
        "db_id": "scientist_1"
    },
    {
        "question": "List the names of all scientists sorted in alphabetical order.",
        "context": "CREATE TABLE scientists (name VARCHAR)",
        "answer": "SELECT name FROM scientists ORDER BY name",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the number of scientists involved for each project name.",
        "context": "CREATE TABLE assignedto (project VARCHAR); CREATE TABLE projects (name VARCHAR, code VARCHAR)",
        "answer": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the number of scientists involved for the projects that require more than 300 hours.",
        "context": "CREATE TABLE assignedto (project VARCHAR); CREATE TABLE projects (name VARCHAR, code VARCHAR, hours INTEGER)",
        "answer": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the number of projects which each scientist is working on and scientist's name.",
        "context": "CREATE TABLE scientists (name VARCHAR, ssn VARCHAR); CREATE TABLE assignedto (scientist VARCHAR)",
        "answer": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the SSN and name of scientists who are assigned to the project with the longest hours.",
        "context": "CREATE TABLE scientists (ssn VARCHAR, name VARCHAR, SSN VARCHAR); CREATE TABLE projects (code VARCHAR, hours INTEGER); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR); CREATE TABLE projects (hours INTEGER)",
        "answer": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the name of scientists who are assigned to some project.",
        "context": "CREATE TABLE assignedto (scientist VARCHAR); CREATE TABLE scientists (name VARCHAR, ssn VARCHAR)",
        "answer": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "db_id": "scientist_1"
    },
    {
        "question": "Select the project names which are not assigned yet.",
        "context": "CREATE TABLE Projects (Name VARCHAR, Code VARCHAR, Project VARCHAR); CREATE TABLE AssignedTo (Name VARCHAR, Code VARCHAR, Project VARCHAR)",
        "answer": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the name of scientists who are not assigned to any project.",
        "context": "CREATE TABLE scientists (Name VARCHAR, ssn VARCHAR, scientist VARCHAR); CREATE TABLE AssignedTo (Name VARCHAR, ssn VARCHAR, scientist VARCHAR)",
        "answer": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the number of scientists who are not assigned to any project.",
        "context": "CREATE TABLE AssignedTo (ssn VARCHAR, scientist VARCHAR); CREATE TABLE scientists (ssn VARCHAR, scientist VARCHAR)",
        "answer": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
        "db_id": "scientist_1"
    },
    {
        "question": "Find the names of scientists who are not working on the project with the highest hours.",
        "context": "CREATE TABLE scientists (name VARCHAR, SSN VARCHAR); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR); CREATE TABLE projects (code VARCHAR, hours INTEGER); CREATE TABLE scientists (name VARCHAR, hours INTEGER); CREATE TABLE projects (name VARCHAR, hours INTEGER)",
        "answer": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "db_id": "scientist_1"
    },
    {
        "question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
        "context": "CREATE TABLE AssignedTo (Scientist VARCHAR, Project VARCHAR); CREATE TABLE Projects (Name VARCHAR, Hours VARCHAR, Code VARCHAR); CREATE TABLE Scientists (Name VARCHAR, SSN VARCHAR)",
        "answer": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",
        "db_id": "scientist_1"
    },
    {
        "question": "Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.",
        "context": "CREATE TABLE scientists (name VARCHAR, SSN VARCHAR); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR); CREATE TABLE projects (name VARCHAR, code VARCHAR, hours INTEGER); CREATE TABLE projects (hours INTEGER)",
        "answer": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)",
        "db_id": "scientist_1"
    },
    {
        "question": "What is the name of the highest rated wine?",
        "context": "CREATE TABLE WINE (Name VARCHAR, Score VARCHAR)",
        "answer": "SELECT Name FROM WINE ORDER BY Score LIMIT 1",
        "db_id": "wine_1"
    },
    {
        "question": "Which winery is the wine that has the highest score from?",
        "context": "CREATE TABLE WINE (Winery VARCHAR, SCORE VARCHAR)",
        "answer": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
        "db_id": "wine_1"
    },
    {
        "question": "Find the names of all wines produced in 2008.",
        "context": "CREATE TABLE WINE (Name VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"",
        "db_id": "wine_1"
    },
    {
        "question": "List the grapes and appelations of all wines.",
        "context": "CREATE TABLE WINE (Grape VARCHAR, Appelation VARCHAR)",
        "answer": "SELECT Grape ,  Appelation FROM WINE",
        "db_id": "wine_1"
    },
    {
        "question": "List the names and scores of all wines.",
        "context": "CREATE TABLE WINE (Name VARCHAR, Score VARCHAR)",
        "answer": "SELECT Name ,  Score FROM WINE",
        "db_id": "wine_1"
    },
    {
        "question": "List the area and county of all appelations.",
        "context": "CREATE TABLE APPELLATIONS (Area VARCHAR, County VARCHAR)",
        "answer": "SELECT Area ,  County FROM APPELLATIONS",
        "db_id": "wine_1"
    },
    {
        "question": "What are the prices of wines produced before the year of 2010?",
        "context": "CREATE TABLE WINE (Price VARCHAR, YEAR INTEGER)",
        "answer": "SELECT Price FROM WINE WHERE YEAR  <  2010",
        "db_id": "wine_1"
    },
    {
        "question": "List the names of all distinct wines that have scores higher than 90.",
        "context": "CREATE TABLE WINE (Name VARCHAR, score INTEGER)",
        "answer": "SELECT Name FROM WINE WHERE score  >  90",
        "db_id": "wine_1"
    },
    {
        "question": "List the names of all distinct wines that are made of red color grape.",
        "context": "CREATE TABLE GRAPES (Grape VARCHAR, Color VARCHAR); CREATE TABLE WINE (Name VARCHAR, Grape VARCHAR)",
        "answer": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "db_id": "wine_1"
    },
    {
        "question": "Find the names of all distinct wines that have appellations in North Coast area.",
        "context": "CREATE TABLE APPELLATIONs (Appelation VARCHAR, Area VARCHAR); CREATE TABLE WINE (Name VARCHAR, Appelation VARCHAR)",
        "answer": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"",
        "db_id": "wine_1"
    },
    {
        "question": "How many wines are produced at Robert Biale winery?",
        "context": "CREATE TABLE WINE (Winery VARCHAR)",
        "answer": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"",
        "db_id": "wine_1"
    },
    {
        "question": "How many appelations are in Napa Country?",
        "context": "CREATE TABLE APPELLATIONS (County VARCHAR)",
        "answer": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
        "db_id": "wine_1"
    },
    {
        "question": "Give me the average prices of wines that are produced by appelations in Sonoma County.",
        "context": "CREATE TABLE WINE (Price INTEGER, Appelation VARCHAR); CREATE TABLE APPELLATIONS (Appelation VARCHAR, County VARCHAR)",
        "answer": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"",
        "db_id": "wine_1"
    },
    {
        "question": "What are the names and scores of wines that are made of white color grapes?",
        "context": "CREATE TABLE GRAPES (Grape VARCHAR, Color VARCHAR); CREATE TABLE WINE (Name VARCHAR, Score VARCHAR, Grape VARCHAR)",
        "answer": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"",
        "db_id": "wine_1"
    },
    {
        "question": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.",
        "context": "CREATE TABLE APPELLATIONS (Appelation VARCHAR, Area VARCHAR); CREATE TABLE WINE (Price INTEGER, Appelation VARCHAR, year VARCHAR)",
        "answer": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005",
        "db_id": "wine_1"
    },
    {
        "question": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.",
        "context": "CREATE TABLE GRAPES (Grape VARCHAR, Color VARCHAR); CREATE TABLE WINE (Grape VARCHAR, score VARCHAR)",
        "answer": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90",
        "db_id": "wine_1"
    },
    {
        "question": "What are the wines that have prices higher than 50 and made of Red color grapes?",
        "context": "CREATE TABLE WINE (Name VARCHAR, Grape VARCHAR, price VARCHAR); CREATE TABLE Grapes (Grape VARCHAR, Color VARCHAR)",
        "answer": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50",
        "db_id": "wine_1"
    },
    {
        "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
        "context": "CREATE TABLE APPELLATIONS (Appelation VARCHAR, County VARCHAR); CREATE TABLE WINE (Name VARCHAR, Appelation VARCHAR, price VARCHAR)",
        "answer": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "db_id": "wine_1"
    },
    {
        "question": "What are the numbers of wines for different grapes?",
        "context": "CREATE TABLE WINE (Grape VARCHAR)",
        "answer": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape",
        "db_id": "wine_1"
    },
    {
        "question": "What are the average prices of wines for different years?",
        "context": "CREATE TABLE WINE (YEAR VARCHAR, Price INTEGER)",
        "answer": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",
        "db_id": "wine_1"
    },
    {
        "question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "context": "CREATE TABLE wine (Name VARCHAR, Price INTEGER, Winery VARCHAR); CREATE TABLE WINE (Name VARCHAR, Price INTEGER, Winery VARCHAR)",
        "answer": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")",
        "db_id": "wine_1"
    },
    {
        "question": "List the names of all distinct wines in alphabetical order.",
        "context": "CREATE TABLE WINE (Name VARCHAR)",
        "answer": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
        "db_id": "wine_1"
    },
    {
        "question": "List the names of all distinct wines ordered by price.",
        "context": "CREATE TABLE WINE (Name VARCHAR, price VARCHAR)",
        "answer": "SELECT DISTINCT Name FROM WINE ORDER BY price",
        "db_id": "wine_1"
    },
    {
        "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?",
        "context": "CREATE TABLE WINE (Appelation VARCHAR, year VARCHAR); CREATE TABLE APPELLATIONS (Area VARCHAR, Appelation VARCHAR)",
        "answer": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wine_1"
    },
    {
        "question": "What is the color of the grape whose wine products has the highest average price?",
        "context": "CREATE TABLE GRAPES (Color VARCHAR, Grape VARCHAR); CREATE TABLE WINE (Grape VARCHAR)",
        "answer": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1",
        "db_id": "wine_1"
    },
    {
        "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
        "context": "CREATE TABLE WINE (Name VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
        "db_id": "wine_1"
    },
    {
        "question": "Find the distinct winery of wines having price between 50 and 100.",
        "context": "CREATE TABLE WINE (Winery VARCHAR, Price INTEGER)",
        "answer": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
        "db_id": "wine_1"
    },
    {
        "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
        "context": "CREATE TABLE WINE (Price INTEGER, Cases INTEGER, YEAR VARCHAR, Grape VARCHAR)",
        "answer": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"",
        "db_id": "wine_1"
    },
    {
        "question": "What are the maximum price and score of wines produced by St. Helena appelation?",
        "context": "CREATE TABLE WINE (Price INTEGER, Score INTEGER, Appelation VARCHAR)",
        "answer": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "db_id": "wine_1"
    },
    {
        "question": "What are the maximum price and score of wines in each year?",
        "context": "CREATE TABLE WINE (YEAR VARCHAR, Price INTEGER, Score INTEGER)",
        "answer": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
        "db_id": "wine_1"
    },
    {
        "question": "What are the average price and score of wines grouped by appelation?",
        "context": "CREATE TABLE WINE (Appelation VARCHAR, Price INTEGER, Score INTEGER)",
        "answer": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation",
        "db_id": "wine_1"
    },
    {
        "question": "Find the wineries that have at least four wines.",
        "context": "CREATE TABLE WINE (Winery VARCHAR)",
        "answer": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4",
        "db_id": "wine_1"
    },
    {
        "question": "Find the country of all appelations who have at most three wines.",
        "context": "CREATE TABLE APPELLATIONS (County VARCHAR, Appelation VARCHAR); CREATE TABLE WINE (Appelation VARCHAR)",
        "answer": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
        "db_id": "wine_1"
    },
    {
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "context": "CREATE TABLE WINE (Name VARCHAR, YEAR INTEGER, Winery VARCHAR)",
        "answer": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "db_id": "wine_1"
    },
    {
        "question": "What are the names of wines that are more expensive then all wines made in the year 2006?",
        "context": "CREATE TABLE WINE (Name VARCHAR, Price INTEGER, YEAR VARCHAR)",
        "answer": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)",
        "db_id": "wine_1"
    },
    {
        "question": "Find the top 3 wineries with the greatest number of wines made of white color grapes.",
        "context": "CREATE TABLE GRAPES (GRAPE VARCHAR, Color VARCHAR); CREATE TABLE WINE (Winery VARCHAR, GRAPE VARCHAR)",
        "answer": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
        "db_id": "wine_1"
    },
    {
        "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
        "context": "CREATE TABLE WINE (Grape VARCHAR, Winery VARCHAR, YEAR VARCHAR, Price INTEGER)",
        "answer": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",
        "db_id": "wine_1"
    },
    {
        "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "context": "CREATE TABLE WINE (Grape VARCHAR, Appelation VARCHAR, Name VARCHAR, Score INTEGER)",
        "answer": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",
        "db_id": "wine_1"
    },
    {
        "question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
        "context": "CREATE TABLE WINE (Appelation VARCHAR, YEAR INTEGER, Area VARCHAR); CREATE TABLE APPELLATIONS (Appelation VARCHAR, YEAR INTEGER, Area VARCHAR)",
        "answer": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
        "db_id": "wine_1"
    },
    {
        "question": "Find the average price of wines that are not produced from Sonoma county.",
        "context": "CREATE TABLE wine (price INTEGER, Appelation VARCHAR); CREATE TABLE APPELLATIONS (Appelation VARCHAR, County VARCHAR); CREATE TABLE WINE (Appelation VARCHAR)",
        "answer": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')",
        "db_id": "wine_1"
    },
    {
        "question": "Find the county where produces the most number of wines with score higher than 90.",
        "context": "CREATE TABLE WINE (Appelation VARCHAR, Score INTEGER); CREATE TABLE APPELLATIONS (County VARCHAR, Appelation VARCHAR)",
        "answer": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wine_1"
    },
    {
        "question": "How many train stations are there?",
        "context": "CREATE TABLE station (Id VARCHAR)",
        "answer": "SELECT count(*) FROM station",
        "db_id": "train_station"
    },
    {
        "question": "Show the name, location, and number of platforms for all stations.",
        "context": "CREATE TABLE station (name VARCHAR, LOCATION VARCHAR, number_of_platforms VARCHAR)",
        "answer": "SELECT name ,  LOCATION ,  number_of_platforms FROM station",
        "db_id": "train_station"
    },
    {
        "question": "What are all locations of train stations?",
        "context": "CREATE TABLE station (LOCATION VARCHAR)",
        "answer": "SELECT DISTINCT LOCATION FROM station",
        "db_id": "train_station"
    },
    {
        "question": "Show the names and total passengers for all train stations not in London.",
        "context": "CREATE TABLE station (name VARCHAR, total_passengers VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'",
        "db_id": "train_station"
    },
    {
        "question": "Show the names and main services for train stations that have the top three total number of passengers.",
        "context": "CREATE TABLE station (name VARCHAR, main_services VARCHAR, total_passengers VARCHAR)",
        "answer": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3",
        "db_id": "train_station"
    },
    {
        "question": "What is the average and maximum number of total passengers for train stations in London or Glasgow?",
        "context": "CREATE TABLE station (total_passengers INTEGER, LOCATION VARCHAR)",
        "answer": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'",
        "db_id": "train_station"
    },
    {
        "question": "Show all locations and the total number of platforms and passengers for all train stations in each location.",
        "context": "CREATE TABLE station (LOCATION VARCHAR, number_of_platforms INTEGER, total_passengers INTEGER)",
        "answer": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION",
        "db_id": "train_station"
    },
    {
        "question": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.",
        "context": "CREATE TABLE station (LOCATION VARCHAR, number_of_platforms VARCHAR, total_passengers VARCHAR)",
        "answer": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25",
        "db_id": "train_station"
    },
    {
        "question": "Show all locations which don't have a train station with at least 15 platforms.",
        "context": "CREATE TABLE station (LOCATION VARCHAR, number_of_platforms VARCHAR)",
        "answer": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15",
        "db_id": "train_station"
    },
    {
        "question": "Show the location with most number of train stations.",
        "context": "CREATE TABLE station (LOCATION VARCHAR)",
        "answer": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "db_id": "train_station"
    },
    {
        "question": "Show the name, time, and service for all trains.",
        "context": "CREATE TABLE train (name VARCHAR, TIME VARCHAR, service VARCHAR)",
        "answer": "SELECT name ,  TIME ,  service FROM train",
        "db_id": "train_station"
    },
    {
        "question": "Show the number of trains",
        "context": "CREATE TABLE train (Id VARCHAR)",
        "answer": "SELECT count(*) FROM train",
        "db_id": "train_station"
    },
    {
        "question": "Show the name and service for all trains in order by time.",
        "context": "CREATE TABLE train (name VARCHAR, service VARCHAR, TIME VARCHAR)",
        "answer": "SELECT name ,  service FROM train ORDER BY TIME",
        "db_id": "train_station"
    },
    {
        "question": "Show the station name and number of trains in each station.",
        "context": "CREATE TABLE station (name VARCHAR, station_id VARCHAR); CREATE TABLE train_station (station_id VARCHAR)",
        "answer": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id",
        "db_id": "train_station"
    },
    {
        "question": "show the train name and station name for each train.",
        "context": "CREATE TABLE station (name VARCHAR, station_id VARCHAR); CREATE TABLE train (name VARCHAR, train_id VARCHAR); CREATE TABLE train_station (station_id VARCHAR, train_id VARCHAR)",
        "answer": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id",
        "db_id": "train_station"
    },
    {
        "question": "Show all train names and times in stations in London in descending order by train time.",
        "context": "CREATE TABLE train_station (station_id VARCHAR, train_id VARCHAR); CREATE TABLE station (station_id VARCHAR, location VARCHAR); CREATE TABLE train (name VARCHAR, time VARCHAR, train_id VARCHAR)",
        "answer": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC",
        "db_id": "train_station"
    },
    {
        "question": "Show the station name with greatest number of trains.",
        "context": "CREATE TABLE station (name VARCHAR, station_id VARCHAR); CREATE TABLE train_station (station_id VARCHAR)",
        "answer": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "train_station"
    },
    {
        "question": "Show the station name with at least two trains.",
        "context": "CREATE TABLE station (name VARCHAR, station_id VARCHAR); CREATE TABLE train_station (station_id VARCHAR)",
        "answer": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2",
        "db_id": "train_station"
    },
    {
        "question": "Show all locations with only 1 station.",
        "context": "CREATE TABLE station (LOCATION VARCHAR)",
        "answer": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1",
        "db_id": "train_station"
    },
    {
        "question": "Show station names without any trains.",
        "context": "CREATE TABLE station (name VARCHAR, station_id VARCHAR); CREATE TABLE train_station (name VARCHAR, station_id VARCHAR)",
        "answer": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)",
        "db_id": "train_station"
    },
    {
        "question": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?",
        "context": "CREATE TABLE station (name VARCHAR, station_id VARCHAR); CREATE TABLE train (train_id VARCHAR, Name VARCHAR); CREATE TABLE train_station (station_id VARCHAR, train_id VARCHAR)",
        "answer": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Guruvayur Express\"",
        "db_id": "train_station"
    },
    {
        "question": "Find the names of the trains that do not pass any station located in London.",
        "context": "CREATE TABLE station (station_id VARCHAR); CREATE TABLE train_station (station_id VARCHAR); CREATE TABLE train_station (train_id VARCHAR, station_id VARCHAR); CREATE TABLE train (name VARCHAR, train_id VARCHAR)",
        "answer": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")",
        "db_id": "train_station"
    },
    {
        "question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
        "context": "CREATE TABLE station (name VARCHAR, LOCATION VARCHAR, Annual_entry_exit VARCHAR, Annual_interchanges VARCHAR)",
        "answer": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges",
        "db_id": "train_station"
    },
    {
        "question": "List all vehicle id",
        "context": "CREATE TABLE Vehicles (vehicle_id VARCHAR)",
        "answer": "SELECT vehicle_id FROM Vehicles;",
        "db_id": "driving_school"
    },
    {
        "question": "How many vehicle in total?",
        "context": "CREATE TABLE Vehicles (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Vehicles;",
        "db_id": "driving_school"
    },
    {
        "question": "Show the detail of vehicle with id 1.",
        "context": "CREATE TABLE Vehicles (vehicle_details VARCHAR, vehicle_id VARCHAR)",
        "answer": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;",
        "db_id": "driving_school"
    },
    {
        "question": "List the first name middle name and last name of all staff.",
        "context": "CREATE TABLE Staff (first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT first_name ,  middle_name ,  last_name FROM Staff;",
        "db_id": "driving_school"
    },
    {
        "question": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
        "context": "CREATE TABLE Staff (date_of_birth VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "db_id": "driving_school"
    },
    {
        "question": "When did the staff member with first name as Janessa and last name as Sawayn join the company?",
        "context": "CREATE TABLE Staff (date_joined_staff VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "db_id": "driving_school"
    },
    {
        "question": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?",
        "context": "CREATE TABLE Staff (date_left_staff VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "db_id": "driving_school"
    },
    {
        "question": "How many staff have the first name Ludie?",
        "context": "CREATE TABLE Staff (first_name VARCHAR)",
        "answer": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
        "db_id": "driving_school"
    },
    {
        "question": "What is the nickname of staff with first name as Janessa and last name as Sawayn?",
        "context": "CREATE TABLE Staff (nickname VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "db_id": "driving_school"
    },
    {
        "question": "How many staff in total?",
        "context": "CREATE TABLE Staff (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Staff;",
        "db_id": "driving_school"
    },
    {
        "question": "Which city does staff with first name as Janessa and last name as Sawayn live?",
        "context": "CREATE TABLE Staff (staff_address_id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE Addresses (city VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "db_id": "driving_school"
    },
    {
        "question": "Which country and state does staff with first name as Janessa and last name as Sawayn lived?",
        "context": "CREATE TABLE Addresses (country VARCHAR, state_province_county VARCHAR, address_id VARCHAR); CREATE TABLE Staff (staff_address_id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "db_id": "driving_school"
    },
    {
        "question": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?",
        "context": "CREATE TABLE Lessons (lesson_time INTEGER, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";",
        "db_id": "driving_school"
    },
    {
        "question": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?",
        "context": "CREATE TABLE Addresses (zip_postcode VARCHAR, address_id VARCHAR); CREATE TABLE Staff (staff_address_id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "db_id": "driving_school"
    },
    {
        "question": "How many staff live in state Georgia?",
        "context": "CREATE TABLE Addresses (state_province_county VARCHAR)",
        "answer": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
        "db_id": "driving_school"
    },
    {
        "question": "Find out the first name and last name of staff lived in city Damianfort.",
        "context": "CREATE TABLE Staff (first_name VARCHAR, last_name VARCHAR, staff_address_id VARCHAR); CREATE TABLE Addresses (address_id VARCHAR, city VARCHAR)",
        "answer": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
        "db_id": "driving_school"
    },
    {
        "question": "Which city lives most of staffs? List the city name and number of staffs.",
        "context": "CREATE TABLE Staff (staff_address_id VARCHAR); CREATE TABLE Addresses (city VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "driving_school"
    },
    {
        "question": "List the states which have between 2 to 4 staffs living there.",
        "context": "CREATE TABLE Addresses (state_province_county VARCHAR, address_id VARCHAR); CREATE TABLE Staff (staff_address_id VARCHAR)",
        "answer": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "db_id": "driving_school"
    },
    {
        "question": "List the first name and last name of all customers.",
        "context": "CREATE TABLE Customers (first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT first_name ,  last_name FROM Customers;",
        "db_id": "driving_school"
    },
    {
        "question": "List email address and birthday of customer whose first name as Carole.",
        "context": "CREATE TABLE Customers (email_address VARCHAR, date_of_birth VARCHAR, first_name VARCHAR)",
        "answer": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"",
        "db_id": "driving_school"
    },
    {
        "question": "List phone number and email address of customer with more than 2000 outstanding balance.",
        "context": "CREATE TABLE Customers (phone_number VARCHAR, email_address VARCHAR, amount_outstanding INTEGER)",
        "answer": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;",
        "db_id": "driving_school"
    },
    {
        "question": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?",
        "context": "CREATE TABLE Customers (customer_status_code VARCHAR, cell_mobile_phone_number VARCHAR, email_address VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"",
        "db_id": "driving_school"
    },
    {
        "question": "When are the birthdays of customer who are classified as 'Good Customer' status?",
        "context": "CREATE TABLE Customers (date_of_birth VARCHAR, customer_status_code VARCHAR)",
        "answer": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'",
        "db_id": "driving_school"
    },
    {
        "question": "When did customer with first name as Carole and last name as Bernhard became a customer?",
        "context": "CREATE TABLE Customers (date_became_customer VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
        "db_id": "driving_school"
    },
    {
        "question": "List all customer status codes and the number of customers having each status code.",
        "context": "CREATE TABLE Customers (customer_status_code VARCHAR)",
        "answer": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;",
        "db_id": "driving_school"
    },
    {
        "question": "Which customer status code has least number of customers?",
        "context": "CREATE TABLE Customers (customer_status_code VARCHAR)",
        "answer": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;",
        "db_id": "driving_school"
    },
    {
        "question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "context": "CREATE TABLE Lessons (customer_id VARCHAR, lesson_status_code VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
        "db_id": "driving_school"
    },
    {
        "question": "What is maximum, minimum and average amount of outstanding of customer?",
        "context": "CREATE TABLE Customers (amount_outstanding INTEGER)",
        "answer": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;",
        "db_id": "driving_school"
    },
    {
        "question": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.",
        "context": "CREATE TABLE Customers (first_name VARCHAR, last_name VARCHAR, amount_outstanding INTEGER)",
        "answer": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;",
        "db_id": "driving_school"
    },
    {
        "question": "List first name and last name of customers lived in city Lockmanfurt.",
        "context": "CREATE TABLE Customers (first_name VARCHAR, last_name VARCHAR, customer_address_id VARCHAR); CREATE TABLE Addresses (address_id VARCHAR, city VARCHAR)",
        "answer": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";",
        "db_id": "driving_school"
    },
    {
        "question": "Which country does customer with first name as Carole and last name as Bernhard lived in?",
        "context": "CREATE TABLE Addresses (country VARCHAR, address_id VARCHAR); CREATE TABLE Customers (customer_address_id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
        "db_id": "driving_school"
    },
    {
        "question": "What is zip code of customer with first name as Carole and last name as Bernhard?",
        "context": "CREATE TABLE Addresses (zip_postcode VARCHAR, address_id VARCHAR); CREATE TABLE Customers (customer_address_id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
        "db_id": "driving_school"
    },
    {
        "question": "Which city does has most number of customers?",
        "context": "CREATE TABLE Customers (customer_address_id VARCHAR); CREATE TABLE Addresses (city VARCHAR, address_id VARCHAR)",
        "answer": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "driving_school"
    },
    {
        "question": "How much in total does customer with first name as Carole and last name as Bernhard paid?",
        "context": "CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE Customer_Payments (amount_payment INTEGER, customer_id VARCHAR)",
        "answer": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"",
        "db_id": "driving_school"
    },
    {
        "question": "List the number of customers that did not have any payment history.",
        "context": "CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Customer_Payments (customer_id VARCHAR)",
        "answer": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );",
        "db_id": "driving_school"
    },
    {
        "question": "List first name and last name of customers that have more than 2 payments.",
        "context": "CREATE TABLE Customers (first_name VARCHAR, last_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customer_Payments (customer_id VARCHAR)",
        "answer": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;",
        "db_id": "driving_school"
    },
    {
        "question": "List all payment methods and number of payments using each payment methods.",
        "context": "CREATE TABLE Customer_Payments (payment_method_code VARCHAR)",
        "answer": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
        "db_id": "driving_school"
    },
    {
        "question": "How many lessons were in cancelled state?",
        "context": "CREATE TABLE Lessons (lesson_status_code VARCHAR)",
        "answer": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
        "db_id": "driving_school"
    },
    {
        "question": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "context": "CREATE TABLE Lessons (lesson_id VARCHAR, staff_id VARCHAR); CREATE TABLE Staff (staff_id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "db_id": "driving_school"
    },
    {
        "question": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "context": "CREATE TABLE Lessons (staff_id VARCHAR); CREATE TABLE Staff (staff_id VARCHAR, first_name VARCHAR)",
        "answer": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"",
        "db_id": "driving_school"
    },
    {
        "question": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?",
        "context": "CREATE TABLE Lessons (staff_id VARCHAR); CREATE TABLE Staff (staff_id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "db_id": "driving_school"
    },
    {
        "question": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?",
        "context": "CREATE TABLE Lessons (staff_id VARCHAR); CREATE TABLE Staff (staff_id VARCHAR, first_name VARCHAR, last_name VARCHAR)",
        "answer": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "db_id": "driving_school"
    },
    {
        "question": "How many lesson does customer with first name Ray took?",
        "context": "CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR); CREATE TABLE Lessons (customer_id VARCHAR)",
        "answer": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"",
        "db_id": "driving_school"
    },
    {
        "question": "Which last names are both used by customers and by staff?",
        "context": "CREATE TABLE Customers (last_name VARCHAR); CREATE TABLE Staff (last_name VARCHAR)",
        "answer": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "db_id": "driving_school"
    },
    {
        "question": "What is the first name of the staff who did not give any lesson?",
        "context": "CREATE TABLE Lessons (staff_id VARCHAR); CREATE TABLE Staff (first_name VARCHAR); CREATE TABLE Staff (first_name VARCHAR, staff_id VARCHAR)",
        "answer": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "db_id": "driving_school"
    },
    {
        "question": "What is the id and detail of the vehicle used in lessons for most of the times?",
        "context": "CREATE TABLE Lessons (vehicle_id VARCHAR); CREATE TABLE Vehicles (vehicle_id VARCHAR, vehicle_details VARCHAR)",
        "answer": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "driving_school"
    },
    {
        "question": "How many faculty do we have?",
        "context": "CREATE TABLE Faculty (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Faculty",
        "db_id": "activity_1"
    },
    {
        "question": "What ranks do we have for faculty?",
        "context": "CREATE TABLE Faculty (rank VARCHAR)",
        "answer": "SELECT DISTINCT rank FROM Faculty",
        "db_id": "activity_1"
    },
    {
        "question": "Show all the distinct buildings that have faculty rooms.",
        "context": "CREATE TABLE Faculty (building VARCHAR)",
        "answer": "SELECT DISTINCT building FROM Faculty",
        "db_id": "activity_1"
    },
    {
        "question": "Show the rank, first name, and last name for all the faculty.",
        "context": "CREATE TABLE Faculty (rank VARCHAR, Fname VARCHAR, Lname VARCHAR)",
        "answer": "SELECT rank ,  Fname ,  Lname FROM Faculty",
        "db_id": "activity_1"
    },
    {
        "question": "Show the first name, last name, and phone number for all female faculty members.",
        "context": "CREATE TABLE Faculty (Fname VARCHAR, Lname VARCHAR, phone VARCHAR, Sex VARCHAR)",
        "answer": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'",
        "db_id": "activity_1"
    },
    {
        "question": "Show ids for all the male faculty.",
        "context": "CREATE TABLE Faculty (FacID VARCHAR, Sex VARCHAR)",
        "answer": "SELECT FacID FROM Faculty WHERE Sex  =  'M'",
        "db_id": "activity_1"
    },
    {
        "question": "How many female Professors do we have?",
        "context": "CREATE TABLE Faculty (Sex VARCHAR, Rank VARCHAR)",
        "answer": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"",
        "db_id": "activity_1"
    },
    {
        "question": "Show the phone, room, and building for the faculty named Jerry Prince.",
        "context": "CREATE TABLE Faculty (phone VARCHAR, room VARCHAR, building VARCHAR, Fname VARCHAR, Lname VARCHAR)",
        "answer": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"",
        "db_id": "activity_1"
    },
    {
        "question": "How many Professors are in building NEB?",
        "context": "CREATE TABLE Faculty (Rank VARCHAR, building VARCHAR)",
        "answer": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
        "db_id": "activity_1"
    },
    {
        "question": "Show the first name and last name for all the instructors.",
        "context": "CREATE TABLE Faculty (fname VARCHAR, lname VARCHAR, Rank VARCHAR)",
        "answer": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
        "db_id": "activity_1"
    },
    {
        "question": "Show all the buildings along with the number of faculty members the buildings have.",
        "context": "CREATE TABLE Faculty (building VARCHAR)",
        "answer": "SELECT building ,  count(*) FROM Faculty GROUP BY building",
        "db_id": "activity_1"
    },
    {
        "question": "Which building has most faculty members?",
        "context": "CREATE TABLE Faculty (building VARCHAR)",
        "answer": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
        "db_id": "activity_1"
    },
    {
        "question": "Show all the buildings that have at least 10 professors.",
        "context": "CREATE TABLE Faculty (building VARCHAR, rank VARCHAR)",
        "answer": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
        "db_id": "activity_1"
    },
    {
        "question": "For each faculty rank, show the number of faculty members who have it.",
        "context": "CREATE TABLE Faculty (rank VARCHAR)",
        "answer": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank",
        "db_id": "activity_1"
    },
    {
        "question": "Show all the ranks and the number of male and female faculty for each rank.",
        "context": "CREATE TABLE Faculty (rank VARCHAR, sex VARCHAR)",
        "answer": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "db_id": "activity_1"
    },
    {
        "question": "Which rank has the smallest number of faculty members?",
        "context": "CREATE TABLE Faculty (rank VARCHAR)",
        "answer": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1",
        "db_id": "activity_1"
    },
    {
        "question": "Show the number of male and female assistant professors.",
        "context": "CREATE TABLE Faculty (sex VARCHAR, rank VARCHAR)",
        "answer": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
        "db_id": "activity_1"
    },
    {
        "question": "What are the first name and last name of Linda Smith's advisor?",
        "context": "CREATE TABLE Student (advisor VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE Faculty (fname VARCHAR, lname VARCHAR, FacID VARCHAR)",
        "answer": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
        "db_id": "activity_1"
    },
    {
        "question": "Show the ids of students whose advisors are professors.",
        "context": "CREATE TABLE Student (StuID VARCHAR, advisor VARCHAR); CREATE TABLE Faculty (FacID VARCHAR, rank VARCHAR)",
        "answer": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"",
        "db_id": "activity_1"
    },
    {
        "question": "Show first name and last name for all the students advised by Michael Goodrich.",
        "context": "CREATE TABLE Faculty (FacID VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE Student (fname VARCHAR, lname VARCHAR, advisor VARCHAR)",
        "answer": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
        "db_id": "activity_1"
    },
    {
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "context": "CREATE TABLE Faculty (FacID VARCHAR); CREATE TABLE Student (advisor VARCHAR)",
        "answer": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "db_id": "activity_1"
    },
    {
        "question": "Show all the faculty ranks and the number of students advised by each rank.",
        "context": "CREATE TABLE Student (advisor VARCHAR); CREATE TABLE Faculty (rank VARCHAR, FacID VARCHAR)",
        "answer": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
        "db_id": "activity_1"
    },
    {
        "question": "What are the first and last name of the faculty who has the most students?",
        "context": "CREATE TABLE Student (advisor VARCHAR); CREATE TABLE Faculty (fname VARCHAR, lname VARCHAR, FacID VARCHAR)",
        "answer": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "db_id": "activity_1"
    },
    {
        "question": "Show the ids for all the faculty members who have at least 2 students.",
        "context": "CREATE TABLE Faculty (FacID VARCHAR); CREATE TABLE Student (advisor VARCHAR)",
        "answer": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2",
        "db_id": "activity_1"
    },
    {
        "question": "Show ids for the faculty members who don't advise any student.",
        "context": "CREATE TABLE Faculty (FacID VARCHAR, advisor VARCHAR); CREATE TABLE Student (FacID VARCHAR, advisor VARCHAR)",
        "answer": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "db_id": "activity_1"
    },
    {
        "question": "What activities do we have?",
        "context": "CREATE TABLE Activity (activity_name VARCHAR)",
        "answer": "SELECT activity_name FROM Activity",
        "db_id": "activity_1"
    },
    {
        "question": "How many activities do we have?",
        "context": "CREATE TABLE Activity (Id VARCHAR)",
        "answer": "SELECT count(*) FROM Activity",
        "db_id": "activity_1"
    },
    {
        "question": "How many faculty members participate in an activity?",
        "context": "CREATE TABLE Faculty_participates_in (FacID VARCHAR)",
        "answer": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
        "db_id": "activity_1"
    },
    {
        "question": "Show the ids of the faculty who don't participate in any activity.",
        "context": "CREATE TABLE Faculty (FacID VARCHAR); CREATE TABLE Faculty_participates_in (FacID VARCHAR)",
        "answer": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
        "db_id": "activity_1"
    },
    {
        "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
        "context": "CREATE TABLE Student (FacID VARCHAR, advisor VARCHAR); CREATE TABLE Faculty_participates_in (FacID VARCHAR, advisor VARCHAR)",
        "answer": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "db_id": "activity_1"
    },
    {
        "question": "How many activities does Mark Giuliano participate in?",
        "context": "CREATE TABLE Faculty_participates_in (facID VARCHAR); CREATE TABLE Faculty (facID VARCHAR, fname VARCHAR, lname VARCHAR)",
        "answer": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "db_id": "activity_1"
    },
    {
        "question": "Show the names of all the activities Mark Giuliano participates in.",
        "context": "CREATE TABLE Activity (activity_name VARCHAR, actid VARCHAR); CREATE TABLE Faculty (facID VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE Faculty_participates_in (facID VARCHAR, actid VARCHAR)",
        "answer": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "db_id": "activity_1"
    },
    {
        "question": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.",
        "context": "CREATE TABLE Faculty_participates_in (facID VARCHAR); CREATE TABLE Faculty (fname VARCHAR, lname VARCHAR, FacID VARCHAR, facID VARCHAR)",
        "answer": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
        "db_id": "activity_1"
    },
    {
        "question": "Show all the activity names and the number of faculty involved in each activity.",
        "context": "CREATE TABLE Faculty_participates_in (actID VARCHAR); CREATE TABLE Activity (activity_name VARCHAR, actID VARCHAR)",
        "answer": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "db_id": "activity_1"
    },
    {
        "question": "What is the first and last name of the faculty participating in the most activities?",
        "context": "CREATE TABLE Faculty_participates_in (facID VARCHAR); CREATE TABLE Faculty (fname VARCHAR, lname VARCHAR, FacID VARCHAR, facID VARCHAR)",
        "answer": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "db_id": "activity_1"
    },
    {
        "question": "What is the name of the activity that has the most faculty members involved in?",
        "context": "CREATE TABLE Faculty_participates_in (actID VARCHAR); CREATE TABLE Activity (activity_name VARCHAR, actID VARCHAR)",
        "answer": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "db_id": "activity_1"
    },
    {
        "question": "Show the ids of the students who don't participate in any activity.",
        "context": "CREATE TABLE Participates_in (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)",
        "answer": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
        "db_id": "activity_1"
    },
    {
        "question": "Show the ids for all the students who participate in an activity and are under 20.",
        "context": "CREATE TABLE Student (StuID VARCHAR, age INTEGER); CREATE TABLE Participates_in (StuID VARCHAR, age INTEGER)",
        "answer": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "db_id": "activity_1"
    },
    {
        "question": "What is the first and last name of the student participating in the most activities?",
        "context": "CREATE TABLE Student (fname VARCHAR, lname VARCHAR, StuID VARCHAR); CREATE TABLE Participates_in (StuID VARCHAR)",
        "answer": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "db_id": "activity_1"
    },
    {
        "question": "What is the name of the activity with the most students?",
        "context": "CREATE TABLE Participates_in (actID VARCHAR); CREATE TABLE Activity (activity_name VARCHAR, actID VARCHAR)",
        "answer": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "db_id": "activity_1"
    },
    {
        "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
        "context": "CREATE TABLE activity (activity_name VARCHAR); CREATE TABLE Faculty_participates_in (facID VARCHAR, actid VARCHAR); CREATE TABLE Faculty (lname VARCHAR, facID VARCHAR)",
        "answer": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "db_id": "activity_1"
    },
    {
        "question": "Find the first names of professors who are not playing Canoeing or Kayaking.",
        "context": "CREATE TABLE faculty (lname VARCHAR, rank VARCHAR); CREATE TABLE activity (activity_name VARCHAR); CREATE TABLE Faculty_participates_in (facID VARCHAR, actid VARCHAR); CREATE TABLE Faculty (lname VARCHAR, facID VARCHAR)",
        "answer": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "db_id": "activity_1"
    },
    {
        "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
        "context": "CREATE TABLE activity (activity_name VARCHAR); CREATE TABLE Faculty_participates_in (facID VARCHAR, actid VARCHAR); CREATE TABLE Faculty (lname VARCHAR, facID VARCHAR)",
        "answer": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'",
        "db_id": "activity_1"
    },
    {
        "question": "Find the ids of the students who participate in Canoeing and Kayaking.",
        "context": "CREATE TABLE activity (actid VARCHAR, activity_name VARCHAR); CREATE TABLE participates_in (stuid VARCHAR)",
        "answer": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
        "db_id": "activity_1"
    },
    {
        "question": "Find the name of the airport in the city of Goroka.",
        "context": "CREATE TABLE airports (name VARCHAR, city VARCHAR)",
        "answer": "SELECT name FROM airports WHERE city  =  'Goroka'",
        "db_id": "flight_4"
    },
    {
        "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
        "context": "CREATE TABLE airports (name VARCHAR, city VARCHAR, country VARCHAR, elevation VARCHAR)",
        "answer": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "db_id": "flight_4"
    },
    {
        "question": "How many airlines are there?",
        "context": "CREATE TABLE airlines (Id VARCHAR)",
        "answer": "SELECT count(*) FROM airlines",
        "db_id": "flight_4"
    },
    {
        "question": "What is the total number of airlines?",
        "context": "CREATE TABLE AIRLINES (Id VARCHAR)",
        "answer": "SELECT count(*) FROM airlines",
        "db_id": "flight_4"
    },
    {
        "question": "How many airlines does Russia has?",
        "context": "CREATE TABLE airlines (country VARCHAR)",
        "answer": "SELECT count(*) FROM airlines WHERE country  =  'Russia'",
        "db_id": "flight_4"
    },
    {
        "question": "What is the maximum elevation of all airports in the country of Iceland?",
        "context": "CREATE TABLE airports (elevation INTEGER, country VARCHAR)",
        "answer": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'",
        "db_id": "flight_4"
    },
    {
        "question": "Find the name of the airports located in Cuba or Argentina.",
        "context": "CREATE TABLE airports (name VARCHAR, country VARCHAR)",
        "answer": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'",
        "db_id": "flight_4"
    },
    {
        "question": "Find the country of the airlines whose name starts with 'Orbit'.",
        "context": "CREATE TABLE airlines (country VARCHAR, name VARCHAR)",
        "answer": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
        "db_id": "flight_4"
    },
    {
        "question": "Find the name of airports whose altitude is between -50 and 50.",
        "context": "CREATE TABLE airports (name VARCHAR, elevation INTEGER)",
        "answer": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "db_id": "flight_4"
    },
    {
        "question": "Which country is the airport that has the highest altitude located in?",
        "context": "CREATE TABLE airports (country VARCHAR, elevation VARCHAR)",
        "answer": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1",
        "db_id": "flight_4"
    },
    {
        "question": "Find the number of airports whose name contain the word 'International'.",
        "context": "CREATE TABLE airports (name VARCHAR)",
        "answer": "SELECT count(*) FROM airports WHERE name LIKE '%International%'",
        "db_id": "flight_4"
    },
    {
        "question": "How many different cities do have some airport in the country of Greenland?",
        "context": "CREATE TABLE airports (city VARCHAR, country VARCHAR)",
        "answer": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'",
        "db_id": "flight_4"
    },
    {
        "question": "Find the number of routes operated by American Airlines.",
        "context": "CREATE TABLE routes (alid VARCHAR); CREATE TABLE airlines (alid VARCHAR, name VARCHAR)",
        "answer": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "db_id": "flight_4"
    },
    {
        "question": "Find the number of routes whose destination airports are in Canada.",
        "context": "CREATE TABLE routes (dst_apid VARCHAR); CREATE TABLE airports (apid VARCHAR)",
        "answer": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "db_id": "flight_4"
    },
    {
        "question": "Find the name, city, and country of the airport that has the lowest altitude.",
        "context": "CREATE TABLE airports (name VARCHAR, city VARCHAR, country VARCHAR, elevation VARCHAR)",
        "answer": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
        "db_id": "flight_4"
    },
    {
        "question": "Find the name, city, and country of the airport that has the highest latitude.",
        "context": "CREATE TABLE airports (name VARCHAR, city VARCHAR, country VARCHAR, elevation VARCHAR)",
        "answer": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1",
        "db_id": "flight_4"
    },
    {
        "question": "Find the name and city of the airport which is the destination of the most number of routes.",
        "context": "CREATE TABLE airports (name VARCHAR, city VARCHAR, apid VARCHAR); CREATE TABLE routes (dst_apid VARCHAR)",
        "answer": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_4"
    },
    {
        "question": "Find the names of the top 10 airlines that operate the most number of routes.",
        "context": "CREATE TABLE airlines (name VARCHAR, alid VARCHAR); CREATE TABLE routes (alid VARCHAR)",
        "answer": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "db_id": "flight_4"
    },
    {
        "question": "Find the name and city of the airport which is the source for the most number of flight routes.",
        "context": "CREATE TABLE airports (name VARCHAR, city VARCHAR, apid VARCHAR); CREATE TABLE routes (src_apid VARCHAR)",
        "answer": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_4"
    },
    {
        "question": "Find the number of different airports which are the destinations of the American Airlines.",
        "context": "CREATE TABLE routes (alid VARCHAR); CREATE TABLE airlines (alid VARCHAR, name VARCHAR)",
        "answer": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "db_id": "flight_4"
    },
    {
        "question": "Which countries has the most number of airlines?",
        "context": "CREATE TABLE airlines (country VARCHAR)",
        "answer": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_4"
    },
    {
        "question": "Which countries has the most number of airlines whose active status is 'Y'?",
        "context": "CREATE TABLE airlines (country VARCHAR, active VARCHAR)",
        "answer": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_4"
    },
    {
        "question": "List all countries and their number of airlines in the descending order of number of airlines.",
        "context": "CREATE TABLE airlines (country VARCHAR)",
        "answer": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC",
        "db_id": "flight_4"
    },
    {
        "question": "How many airports are there per country? Order the countries by decreasing number of airports.",
        "context": "CREATE TABLE airports (country VARCHAR)",
        "answer": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC",
        "db_id": "flight_4"
    },
    {
        "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
        "context": "CREATE TABLE airports (city VARCHAR, country VARCHAR)",
        "answer": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "db_id": "flight_4"
    },
    {
        "question": "Return the cities with more than 3 airports in the United States.",
        "context": "CREATE TABLE airports (city VARCHAR, country VARCHAR)",
        "answer": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
        "db_id": "flight_4"
    },
    {
        "question": "How many cities are there that have more than 3 airports?",
        "context": "CREATE TABLE airports (city VARCHAR)",
        "answer": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
        "db_id": "flight_4"
    },
    {
        "question": "List the cities which have more than one airport and number of airports.",
        "context": "CREATE TABLE airports (city VARCHAR)",
        "answer": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1",
        "db_id": "flight_4"
    },
    {
        "question": "List the cities which have more than 2 airports sorted by the number of airports.",
        "context": "CREATE TABLE airports (city VARCHAR)",
        "answer": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "db_id": "flight_4"
    },
    {
        "question": "Find the number of routes for each source airport and the airport name.",
        "context": "CREATE TABLE airports (name VARCHAR, apid VARCHAR); CREATE TABLE routes (src_apid VARCHAR)",
        "answer": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "db_id": "flight_4"
    },
    {
        "question": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.",
        "context": "CREATE TABLE airports (name VARCHAR, apid VARCHAR); CREATE TABLE routes (src_apid VARCHAR)",
        "answer": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "db_id": "flight_4"
    },
    {
        "question": "Find the average elevation of all airports for each country.",
        "context": "CREATE TABLE airports (country VARCHAR, elevation INTEGER)",
        "answer": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
        "db_id": "flight_4"
    },
    {
        "question": "Find the cities which have exactly two airports.",
        "context": "CREATE TABLE airports (city VARCHAR)",
        "answer": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2",
        "db_id": "flight_4"
    },
    {
        "question": "For each country and airline name, how many routes are there?",
        "context": "CREATE TABLE airlines (country VARCHAR, name VARCHAR, alid VARCHAR); CREATE TABLE routes (alid VARCHAR)",
        "answer": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
        "db_id": "flight_4"
    },
    {
        "question": "Find the number of routes with destination airports in Italy.",
        "context": "CREATE TABLE routes (dst_apid VARCHAR); CREATE TABLE airports (apid VARCHAR, country VARCHAR)",
        "answer": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
        "db_id": "flight_4"
    },
    {
        "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "context": "CREATE TABLE routes (dst_apid VARCHAR, alid VARCHAR); CREATE TABLE airports (apid VARCHAR, country VARCHAR); CREATE TABLE airlines (alid VARCHAR, name VARCHAR)",
        "answer": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "db_id": "flight_4"
    },
    {
        "question": "Find the number of routes that have destination John F Kennedy International Airport.",
        "context": "CREATE TABLE airports (apid VARCHAR, name VARCHAR); CREATE TABLE routes (dst_apid VARCHAR)",
        "answer": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "db_id": "flight_4"
    },
    {
        "question": "Find the number of routes from the United States to Canada.",
        "context": "CREATE TABLE airports (dst_apid VARCHAR, src_apid VARCHAR, apid VARCHAR, country VARCHAR); CREATE TABLE routes (dst_apid VARCHAR, src_apid VARCHAR, apid VARCHAR, country VARCHAR)",
        "answer": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "db_id": "flight_4"
    },
    {
        "question": "Find the id of routes whose source and destination airports are in the United States.",
        "context": "CREATE TABLE routes (rid VARCHAR, dst_apid VARCHAR, src_apid VARCHAR, apid VARCHAR, country VARCHAR); CREATE TABLE airports (rid VARCHAR, dst_apid VARCHAR, src_apid VARCHAR, apid VARCHAR, country VARCHAR)",
        "answer": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "db_id": "flight_4"
    },
    {
        "question": "Find the name of airline which runs the most number of routes.",
        "context": "CREATE TABLE airlines (name VARCHAR, alid VARCHAR); CREATE TABLE routes (alid VARCHAR)",
        "answer": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_4"
    },
    {
        "question": "Find the busiest source airport that runs most number of routes in China.",
        "context": "CREATE TABLE routes (src_apid VARCHAR); CREATE TABLE airports (name VARCHAR, apid VARCHAR, country VARCHAR)",
        "answer": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_4"
    },
    {
        "question": "Find the busiest destination airport that runs most number of routes in China.",
        "context": "CREATE TABLE routes (dst_apid VARCHAR); CREATE TABLE airports (name VARCHAR, apid VARCHAR, country VARCHAR)",
        "answer": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_4"
    },
    {
        "question": "What is the id of the most recent order?",
        "context": "CREATE TABLE orders (order_id VARCHAR, date_order_placed VARCHAR)",
        "answer": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "db_id": "tracking_orders"
    },
    {
        "question": "what are the order id and customer id of the oldest order?",
        "context": "CREATE TABLE orders (order_id VARCHAR, customer_id VARCHAR, date_order_placed VARCHAR)",
        "answer": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the id of the order whose shipment tracking number is \"3452\".",
        "context": "CREATE TABLE shipments (order_id VARCHAR, shipment_tracking_number VARCHAR)",
        "answer": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the ids of all the order items whose product id is 11.",
        "context": "CREATE TABLE order_items (order_item_id VARCHAR, product_id VARCHAR)",
        "answer": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "db_id": "tracking_orders"
    },
    {
        "question": "List the name of all the distinct customers who have orders with status \"Packing\".",
        "context": "CREATE TABLE orders (customer_id VARCHAR, order_status VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the details of all the distinct customers who have orders with status \"On Road\".",
        "context": "CREATE TABLE orders (customer_id VARCHAR, order_status VARCHAR); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
        "db_id": "tracking_orders"
    },
    {
        "question": "What is the name of the customer who has the most orders?",
        "context": "CREATE TABLE orders (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "tracking_orders"
    },
    {
        "question": "What is the customer id of the customer who has the most orders?",
        "context": "CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE orders (customer_id VARCHAR)",
        "answer": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "tracking_orders"
    },
    {
        "question": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE orders (order_id VARCHAR, order_status VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the dates of orders which belong to the customer named \"Jeramie\".",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE orders (date_order_placed VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "db_id": "tracking_orders"
    },
    {
        "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
        "context": "CREATE TABLE orders (customer_id VARCHAR, date_order_placed VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "db_id": "tracking_orders"
    },
    {
        "question": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "context": "CREATE TABLE order_items (product_id VARCHAR, order_id VARCHAR); CREATE TABLE orders (order_id VARCHAR, date_order_placed VARCHAR)",
        "answer": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".",
        "context": "CREATE TABLE orders (customer_id VARCHAR, order_status VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".",
        "context": "CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE orders (customer_id VARCHAR, order_status VARCHAR)",
        "answer": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "db_id": "tracking_orders"
    },
    {
        "question": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
        "context": "CREATE TABLE shipments (order_id VARCHAR, shipment_tracking_number VARCHAR); CREATE TABLE orders (date_order_placed VARCHAR, order_id VARCHAR)",
        "answer": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "db_id": "tracking_orders"
    },
    {
        "question": "What is the placement date of the order whose invoice number is 10?",
        "context": "CREATE TABLE orders (date_order_placed VARCHAR, order_id VARCHAR); CREATE TABLE shipments (order_id VARCHAR, invoice_number VARCHAR)",
        "answer": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "db_id": "tracking_orders"
    },
    {
        "question": "List the count and id of each product in all the orders.",
        "context": "CREATE TABLE orders (order_id VARCHAR); CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR); CREATE TABLE products (product_id VARCHAR)",
        "answer": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "db_id": "tracking_orders"
    },
    {
        "question": "List the name and count of each product in all orders.",
        "context": "CREATE TABLE orders (order_id VARCHAR); CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR)",
        "answer": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the ids of orders which are shipped after 2000-01-01.",
        "context": "CREATE TABLE shipments (order_id VARCHAR, shipment_date INTEGER)",
        "answer": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the id of the order which is shipped most recently.",
        "context": "CREATE TABLE shipments (order_id VARCHAR, shipment_date INTEGER)",
        "answer": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)",
        "db_id": "tracking_orders"
    },
    {
        "question": "List the names of all distinct products in alphabetical order.",
        "context": "CREATE TABLE products (product_name VARCHAR)",
        "answer": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
        "db_id": "tracking_orders"
    },
    {
        "question": "List the ids of all distinct orders ordered by placed date.",
        "context": "CREATE TABLE orders (order_id VARCHAR, date_order_placed VARCHAR)",
        "answer": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "db_id": "tracking_orders"
    },
    {
        "question": "What is the id of the order which has the most items?",
        "context": "CREATE TABLE orders (order_id VARCHAR); CREATE TABLE order_items (order_id VARCHAR)",
        "answer": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "context": "CREATE TABLE invoices (invoice_number VARCHAR, invoice_date VARCHAR)",
        "answer": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "context": "CREATE TABLE invoices (invoice_details VARCHAR, invoice_date VARCHAR)",
        "answer": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "db_id": "tracking_orders"
    },
    {
        "question": "For each customer who has at least two orders, find the customer name and number of orders made.",
        "context": "CREATE TABLE orders (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2",
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the name of the customers who have at most two orders.",
        "context": "CREATE TABLE orders (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)",
        "answer": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "db_id": "tracking_orders"
    },
    {
        "question": "List the names of the customers who have once bought product \"food\".",
        "context": "CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE orders (customer_id VARCHAR, order_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE order_items (product_id VARCHAR, order_id VARCHAR)",
        "answer": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "db_id": "tracking_orders"
    },
    {
        "question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").",
        "context": "CREATE TABLE orders (customer_id VARCHAR, order_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE order_items (product_id VARCHAR, order_item_status VARCHAR, order_id VARCHAR)",
        "answer": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "db_id": "tracking_orders"
    },
    {
        "question": "How many architects are female?",
        "context": "CREATE TABLE architect (gender VARCHAR)",
        "answer": "SELECT count(*) FROM architect WHERE gender  =  'female'",
        "db_id": "architecture"
    },
    {
        "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "context": "CREATE TABLE architect (name VARCHAR, nationality VARCHAR, id VARCHAR, gender VARCHAR)",
        "answer": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name",
        "db_id": "architecture"
    },
    {
        "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
        "context": "CREATE TABLE architect (name VARCHAR, id VARCHAR); CREATE TABLE bridge (length_meters INTEGER, architect_id VARCHAR)",
        "answer": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
        "db_id": "architecture"
    },
    {
        "question": "What is the average length in feet of the bridges?",
        "context": "CREATE TABLE bridge (length_feet INTEGER)",
        "answer": "SELECT avg(length_feet) FROM bridge",
        "db_id": "architecture"
    },
    {
        "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?",
        "context": "CREATE TABLE mill (name VARCHAR, built_year VARCHAR, TYPE VARCHAR)",
        "answer": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'",
        "db_id": "architecture"
    },
    {
        "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
        "context": "CREATE TABLE mill (Id VARCHAR); CREATE TABLE architect (name VARCHAR, nationality VARCHAR, id VARCHAR)",
        "answer": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",
        "db_id": "architecture"
    },
    {
        "question": "What are the names of the mills which are not located in 'Donceel'?",
        "context": "CREATE TABLE mill (name VARCHAR, LOCATION VARCHAR)",
        "answer": "SELECT name FROM mill WHERE LOCATION != 'Donceel'",
        "db_id": "architecture"
    },
    {
        "question": "What are the distinct types of mills that are built by American or Canadian architects?",
        "context": "CREATE TABLE architect (Id VARCHAR); CREATE TABLE mill (type VARCHAR, architect_id VARCHAR)",
        "answer": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'",
        "db_id": "architecture"
    },
    {
        "question": "What are the ids and names of the architects who built at least 3 bridges ?",
        "context": "CREATE TABLE architect (id VARCHAR, name VARCHAR); CREATE TABLE bridge (architect_id VARCHAR)",
        "answer": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
        "db_id": "architecture"
    },
    {
        "question": "What is the id, name and nationality of the architect who built most mills?",
        "context": "CREATE TABLE architect (id VARCHAR, name VARCHAR, nationality VARCHAR); CREATE TABLE mill (architect_id VARCHAR)",
        "answer": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "architecture"
    },
    {
        "question": "What are the ids, names and genders of the architects who built two bridges or one mill?",
        "context": "CREATE TABLE mill (architect_id VARCHAR); CREATE TABLE architect (id VARCHAR, name VARCHAR, gender VARCHAR); CREATE TABLE bridge (architect_id VARCHAR)",
        "answer": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
        "db_id": "architecture"
    },
    {
        "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
        "context": "CREATE TABLE bridge (LOCATION VARCHAR, name VARCHAR)",
        "answer": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'",
        "db_id": "architecture"
    },
    {
        "question": "Which of the mill names contains the french word 'Moulin'?",
        "context": "CREATE TABLE mill (name VARCHAR)",
        "answer": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
        "db_id": "architecture"
    },
    {
        "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
        "context": "CREATE TABLE architect (Id VARCHAR); CREATE TABLE mill (name VARCHAR, architect_id VARCHAR); CREATE TABLE bridge (architect_id VARCHAR, length_meters INTEGER)",
        "answer": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80",
        "db_id": "architecture"
    },
    {
        "question": "What is the most common mill type, and how many are there?",
        "context": "CREATE TABLE mill (TYPE VARCHAR)",
        "answer": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "db_id": "architecture"
    },
    {
        "question": "How many architects haven't built a mill before year 1850?",
        "context": "CREATE TABLE mill (id VARCHAR, architect_id VARCHAR, built_year INTEGER); CREATE TABLE architect (id VARCHAR, architect_id VARCHAR, built_year INTEGER)",
        "answer": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );",
        "db_id": "architecture"
    },
    {
        "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
        "context": "CREATE TABLE bridge (name VARCHAR, architect_id VARCHAR, length_feet VARCHAR); CREATE TABLE architect (id VARCHAR, nationality VARCHAR)",
        "answer": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
        "db_id": "architecture"
    },
    {
        "question": "How many book clubs are there?",
        "context": "CREATE TABLE book_club (Id VARCHAR)",
        "answer": "SELECT count(*) FROM book_club",
        "db_id": "culture_company"
    },
    {
        "question": "show the titles, and authors or editors for all books made after the year 1989.",
        "context": "CREATE TABLE book_club (book_title VARCHAR, author_or_editor VARCHAR, YEAR INTEGER)",
        "answer": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "db_id": "culture_company"
    },
    {
        "question": "Show all distinct publishers for books.",
        "context": "CREATE TABLE book_club (publisher VARCHAR)",
        "answer": "SELECT DISTINCT publisher FROM book_club",
        "db_id": "culture_company"
    },
    {
        "question": "Show the years, book titles, and publishers for all books, in descending order by year.",
        "context": "CREATE TABLE book_club (YEAR VARCHAR, book_title VARCHAR, publisher VARCHAR)",
        "answer": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC",
        "db_id": "culture_company"
    },
    {
        "question": "Show all publishers and the number of books for each publisher.",
        "context": "CREATE TABLE book_club (publisher VARCHAR)",
        "answer": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher",
        "db_id": "culture_company"
    },
    {
        "question": "What is the publisher with most number of books?",
        "context": "CREATE TABLE book_club (publisher VARCHAR)",
        "answer": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1",
        "db_id": "culture_company"
    },
    {
        "question": "Show all book categories and the number of books in each category.",
        "context": "CREATE TABLE book_club (category VARCHAR)",
        "answer": "SELECT category ,  count(*) FROM book_club GROUP BY category",
        "db_id": "culture_company"
    },
    {
        "question": "List categories that have at least two books after year 1989.",
        "context": "CREATE TABLE book_club (category VARCHAR, YEAR INTEGER)",
        "answer": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2",
        "db_id": "culture_company"
    },
    {
        "question": "Show publishers with a book published in 1989 and a book in 1990.",
        "context": "CREATE TABLE book_club (publisher VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
        "db_id": "culture_company"
    },
    {
        "question": "Show all publishers which do not have a book in 1989.",
        "context": "CREATE TABLE book_club (publisher VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989",
        "db_id": "culture_company"
    },
    {
        "question": "Show all movie titles, years, and directors, ordered by budget.",
        "context": "CREATE TABLE movie (title VARCHAR, YEAR VARCHAR, director VARCHAR, budget_million VARCHAR)",
        "answer": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million",
        "db_id": "culture_company"
    },
    {
        "question": "How many movie directors are there?",
        "context": "CREATE TABLE movie (director VARCHAR)",
        "answer": "SELECT COUNT (DISTINCT director) FROM movie",
        "db_id": "culture_company"
    },
    {
        "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "context": "CREATE TABLE movie (title VARCHAR, director VARCHAR, YEAR VARCHAR, gross_worldwide VARCHAR)",
        "answer": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "db_id": "culture_company"
    },
    {
        "question": "Show all director names who have a movie in both year 1999 and 2000.",
        "context": "CREATE TABLE movie (director VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999",
        "db_id": "culture_company"
    },
    {
        "question": "Show all director names who have a movie in the year 1999 or 2000.",
        "context": "CREATE TABLE movie (director VARCHAR, YEAR VARCHAR)",
        "answer": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000",
        "db_id": "culture_company"
    },
    {
        "question": "What is the average, maximum, and minimum budget for all movies before 2000.",
        "context": "CREATE TABLE movie (budget_million INTEGER, YEAR INTEGER)",
        "answer": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000",
        "db_id": "culture_company"
    },
    {
        "question": "List all company names with a book published by Alyson.",
        "context": "CREATE TABLE culture_company (company_name VARCHAR, book_club_id VARCHAR); CREATE TABLE book_club (book_club_id VARCHAR, publisher VARCHAR)",
        "answer": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'",
        "db_id": "culture_company"
    },
    {
        "question": "Show the movie titles and book titles for all companies in China.",
        "context": "CREATE TABLE movie (title VARCHAR, movie_id VARCHAR); CREATE TABLE culture_company (movie_id VARCHAR, book_club_id VARCHAR, incorporated_in VARCHAR); CREATE TABLE book_club (book_title VARCHAR, book_club_id VARCHAR)",
        "answer": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
        "db_id": "culture_company"
    },
    {
        "question": "Show all company names with a movie directed in year 1999.",
        "context": "CREATE TABLE movie (movie_id VARCHAR, year VARCHAR); CREATE TABLE culture_company (company_name VARCHAR, movie_id VARCHAR)",
        "answer": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999",
        "db_id": "culture_company"
    }
]